{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Documents\\\\anime_website\\\\anime_website\\\\frontend\\\\src\\\\Context\\\\AnimeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AnimeContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AnimeContext = /*#__PURE__*/createContext();\nexport const AnimeProvider = ({\n  children\n}) => {\n  _s();\n  const [animeList, setAnimeList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedAnimeId, setSelectedAnimeId] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const response = await axiosInstance.get('/animes/animes');\n        setAnimeList(response.data);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Error fetching anime list:', error);\n        setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Unable to load anime list. Please try again later.');\n        setAnimeList([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AnimeContext.Provider, {\n    value: {\n      animeList,\n      setAnimeList,\n      selectedAnimeId,\n      setSelectedAnimeId,\n      isLoading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(AnimeProvider, \"UKa61UbVHvUjwWUhdZ9CaqeHOyE=\");\n_c = AnimeProvider;\nexport const useAnimeContext = () => {\n  _s2();\n  const context = useContext(AnimeContext);\n  if (!context) {\n    throw new Error('useAnimeContext must be used within an AnimeProvider');\n  }\n  return context;\n};\n_s2(useAnimeContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AnimeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","AnimeContext","AnimeProvider","children","_s","animeList","setAnimeList","isLoading","setIsLoading","error","setError","selectedAnimeId","setSelectedAnimeId","fetchData","response","get","data","_error$response","_error$response$data","console","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAnimeContext","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/david/Documents/anime_website/anime_website/frontend/src/Context/AnimeContext.js"],"sourcesContent":["// src/context/AnimeContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axiosInstance from '../utils/axiosConfig';\r\n\r\nexport const AnimeContext = createContext();\r\n\r\nexport const AnimeProvider = ({ children }) => {\r\n  const [animeList, setAnimeList] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedAnimeId, setSelectedAnimeId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        const response = await axiosInstance.get('/animes/animes');\r\n        setAnimeList(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching anime list:', error);\r\n        setError(error.response?.data?.message || 'Unable to load anime list. Please try again later.');\r\n        setAnimeList([]);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <AnimeContext.Provider\r\n      value={{\r\n        animeList,\r\n        setAnimeList,\r\n        selectedAnimeId,\r\n        setSelectedAnimeId,\r\n        isLoading,\r\n        error\r\n      }}\r\n    >\r\n      {children}\r\n    </AnimeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAnimeContext = () => {\r\n  const context = useContext(AnimeContext);\r\n  if (!context) {\r\n    throw new Error('useAnimeContext must be used within an AnimeProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,aAAa,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,OAAO,MAAMC,YAAY,gBAAGP,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMQ,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5DC,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFL,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,IAAI,CAAC;QACd,MAAMI,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,GAAG,CAAC,gBAAgB,CAAC;QAC1DT,YAAY,CAACQ,QAAQ,CAACE,IAAI,CAAC;MAC7B,CAAC,CAAC,OAAOP,KAAK,EAAE;QAAA,IAAAQ,eAAA,EAAAC,oBAAA;QACdC,OAAO,CAACV,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDC,QAAQ,CAAC,EAAAO,eAAA,GAAAR,KAAK,CAACK,QAAQ,cAAAG,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBD,IAAI,cAAAE,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,oDAAoD,CAAC;QAC/Fd,YAAY,CAAC,EAAE,CAAC;MAClB,CAAC,SAAS;QACRE,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDK,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA,CAACC,YAAY,CAACoB,QAAQ;IACpBC,KAAK,EAAE;MACLjB,SAAS;MACTC,YAAY;MACZK,eAAe;MACfC,kBAAkB;MAClBL,SAAS;MACTE;IACF,CAAE;IAAAN,QAAA,EAEDA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACtB,EAAA,CAvCWF,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AAyC1B,OAAO,MAAM0B,eAAe,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACnC,MAAMC,OAAO,GAAGnC,UAAU,CAACM,YAAY,CAAC;EACxC,IAAI,CAAC6B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,eAAe;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}