{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Documents\\\\anime_website\\\\anime_website\\\\frontend\\\\src\\\\pages\\\\Mangas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useRef, useCallback } from 'react';\nimport axiosInstance from '../utils/axiosConfig';\nimport { useMangaContext } from '../Context/MangaContext';\nimport MangaCard from '../cards/MangaCard';\nimport SkeletonCard from '../cards/SkeletonCard';\nimport MangaEditor from '../Components/ListEditors/MangaEditor';\nimport data from '../Context/ContextApi';\nimport modalStyles from '../styles/components/Modal.module.css';\nimport browseStyles from '../styles/pages/Browse.module.css';\nimport { MANGA_FORMATS, AVAILABLE_GENRES, AIRING_STATUS, YEARS } from '../constants/filterOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MANGAS_PER_PAGE = 18;\nconst Mangas = () => {\n  _s();\n  const {\n    mangaList,\n    setMangaList\n  } = useMangaContext();\n  const {\n    userData,\n    setUserData\n  } = useContext(data);\n  const [userMangaStatuses, setUserMangaStatuses] = useState({});\n  const [searchInput, setSearchInput] = useState('');\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [isMangaEditorOpen, setIsMangaEditorOpen] = useState(false);\n  const [selectedMangaForEdit, setSelectedMangaForEdit] = useState(null);\n  const [selectedYear, setSelectedYear] = useState('');\n  const [selectedFormats, setSelectedFormats] = useState([]);\n  const [selectedStatus, setSelectedStatus] = useState('');\n  const [gridLayout, setGridLayout] = useState('default');\n  const [isInitialLoading, setIsInitialLoading] = useState(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [displayedMangas, setDisplayedMangas] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [loadingStates, setLoadingStates] = useState({});\n  const observer = useRef();\n  const filteredMangasRef = useRef([]);\n  const isLoadingRef = useRef(false);\n  const handleModalClose = () => setIsMangaEditorOpen(false);\n  const changeLayout = layout => setGridLayout(layout);\n\n  // NEW: Handle manga loading transitions\n  const handleMangaLoad = useCallback(mangaId => {\n    setLoadingStates(prev => ({\n      ...prev,\n      [mangaId]: true\n    }));\n    setTimeout(() => {\n      setLoadingStates(prev => ({\n        ...prev,\n        [mangaId]: false\n      }));\n    }, Math.random() * 300 + 200);\n  }, []);\n\n  // NEW: Initialize loading states for new mangas\n  useEffect(() => {\n    displayedMangas.forEach(manga => {\n      if (loadingStates[manga._id] === undefined) {\n        handleMangaLoad(manga._id);\n      }\n    });\n  }, [displayedMangas, handleMangaLoad, loadingStates]);\n  const mangaTitle = useCallback(titles => {\n    switch (userData.title) {\n      case 'english':\n        return titles.english || titles.romaji;\n      case 'romaji':\n        return titles.romaji || titles.english;\n      case 'native':\n        return titles.native;\n      default:\n        return titles.english || titles.romaji || titles.native || 'Unknown Title';\n    }\n  }, [userData.title]);\n\n  // Initial data fetch\n  useEffect(() => {\n    setIsInitialLoading(true);\n    axiosInstance.get('8080/mangas/mangas').then(response => {\n      setMangaList(response.data);\n      setIsInitialLoading(false);\n    }).catch(error => {\n      console.error(error);\n      setIsInitialLoading(false);\n    });\n  }, [setMangaList]);\n\n  // Fetch user's current manga statuses when userData changes\n  useEffect(() => {\n    const fetchUserMangaStatuses = async () => {\n      if (!(userData !== null && userData !== void 0 && userData._id)) {\n        setUserMangaStatuses({});\n        return;\n      }\n      try {\n        var _currentUser$mangas;\n        const userResponse = await axiosInstance.get(`/users/${userData._id}/current`);\n        const currentUser = userResponse.data;\n\n        // Create a map of mangaId to status for quick lookup\n        const statusMap = {};\n        currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$mangas = currentUser.mangas) === null || _currentUser$mangas === void 0 ? void 0 : _currentUser$mangas.forEach(manga => {\n          statusMap[manga.mangaId] = manga.status;\n        });\n        setUserMangaStatuses(statusMap);\n      } catch (error) {\n        console.error('Error fetching user manga statuses:', error);\n      }\n    };\n    fetchUserMangaStatuses();\n  }, [userData]);\n\n  // Update getMangaStatus to use the status map\n  const getMangaStatus = useCallback(mangaId => {\n    return userMangaStatuses[mangaId] || null;\n  }, [userMangaStatuses]);\n\n  // Filter and sort manga list\n  const filterAndSortMangas = useCallback(() => {\n    if (!Array.isArray(mangaList)) return [];\n    return mangaList.filter(manga => {\n      var _manga$titles, _manga$titles$romaji, _manga$titles2, _manga$titles2$englis, _manga$titles3, _manga$titles3$Native;\n      const matchesSearch = ((_manga$titles = manga.titles) === null || _manga$titles === void 0 ? void 0 : (_manga$titles$romaji = _manga$titles.romaji) === null || _manga$titles$romaji === void 0 ? void 0 : _manga$titles$romaji.toLowerCase().includes(searchInput.toLowerCase())) || ((_manga$titles2 = manga.titles) === null || _manga$titles2 === void 0 ? void 0 : (_manga$titles2$englis = _manga$titles2.english) === null || _manga$titles2$englis === void 0 ? void 0 : _manga$titles2$englis.toLowerCase().includes(searchInput.toLowerCase())) || ((_manga$titles3 = manga.titles) === null || _manga$titles3 === void 0 ? void 0 : (_manga$titles3$Native = _manga$titles3.Native) === null || _manga$titles3$Native === void 0 ? void 0 : _manga$titles3$Native.toLowerCase().includes(searchInput.toLowerCase()));\n      const matchesGenres = selectedGenres.length === 0 || manga.genres && Array.isArray(manga.genres) && selectedGenres.every(genre => manga.genres.some(mangaGenre => genre && mangaGenre.toLowerCase().includes(genre.toLowerCase())));\n      const matchesYear = !selectedYear || manga.releaseData.startDate.year === selectedYear;\n      const matchesFormat = selectedFormats.length === 0 || selectedFormats.includes(manga.typings.Format);\n      const matchesStatus = !selectedStatus || manga.releaseData.releaseStatus === selectedStatus;\n      return matchesSearch && matchesGenres && matchesYear && matchesFormat && matchesStatus;\n    }).sort((a, b) => {\n      const titleA = mangaTitle(a.titles);\n      const titleB = mangaTitle(b.titles);\n      return titleA.localeCompare(titleB, undefined, {\n        sensitivity: 'base'\n      });\n    });\n  }, [mangaList, searchInput, selectedGenres, selectedYear, selectedFormats, selectedStatus, mangaTitle]);\n\n  // Update filtered mangas when filters change\n  useEffect(() => {\n    if (!mangaList) return;\n    setDisplayedMangas([]); // Clear current display\n    filteredMangasRef.current = filterAndSortMangas();\n\n    // Load initial batch\n    const initialBatch = filteredMangasRef.current.slice(0, MANGAS_PER_PAGE);\n    setDisplayedMangas(initialBatch);\n    setHasMore(filteredMangasRef.current.length > MANGAS_PER_PAGE);\n  }, [filterAndSortMangas, mangaList]);\n\n  // Load more mangas\n  const loadMoreMangas = useCallback(() => {\n    if (isLoadingRef.current || !hasMore) return;\n    isLoadingRef.current = true;\n    setIsLoadingMore(true);\n    const currentLength = displayedMangas.length;\n    const nextBatch = filteredMangasRef.current.slice(currentLength, currentLength + MANGAS_PER_PAGE);\n    setTimeout(() => {\n      setDisplayedMangas(prev => [...prev, ...nextBatch]);\n      setHasMore(currentLength + MANGAS_PER_PAGE < filteredMangasRef.current.length);\n      setIsLoadingMore(false);\n      isLoadingRef.current = false;\n    }, 500);\n  }, [displayedMangas.length, hasMore]);\n\n  // Intersection Observer setup\n  const lastMangaElementRef = useCallback(node => {\n    if (isLoadingMore) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        loadMoreMangas();\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [isLoadingMore, hasMore, loadMoreMangas]);\n\n  // NEW: Render list items with transitions\n  const renderListItems = () => {\n    const items = [];\n    displayedMangas.forEach((manga, index) => {\n      const isLoading = loadingStates[manga._id];\n      const mangaStatus = getMangaStatus(manga._id);\n      items.push(/*#__PURE__*/_jsxDEV(\"li\", {\n        ref: index === displayedMangas.length - 1 ? lastMangaElementRef : null,\n        className: `${browseStyles.listItem} ${isLoading ? browseStyles.loading : browseStyles.loaded}`,\n        children: isLoading ? /*#__PURE__*/_jsxDEV(SkeletonCard, {\n          layout: gridLayout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: browseStyles.fadeIn,\n          children: /*#__PURE__*/_jsxDEV(MangaCard, {\n            manga: manga,\n            name: mangaTitle(manga.titles),\n            layout: gridLayout,\n            onTopRightButtonClick: handleTopRightButtonClick,\n            hideTopRightButton: !userData || !userData._id,\n            handleGenreClick: handleGenreClick,\n            status: mangaStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)\n      }, manga._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this));\n    });\n    if (isLoadingMore && hasMore) {\n      for (let i = 0; i < 4; i++) {\n        items.push(/*#__PURE__*/_jsxDEV(\"li\", {\n          className: `${browseStyles.listItem} ${browseStyles.loading}`,\n          children: /*#__PURE__*/_jsxDEV(SkeletonCard, {\n            layout: gridLayout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)\n        }, `skeleton-more-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return items;\n  };\n  const handleGenreClick = genre => {\n    setSelectedGenres(prev => prev.includes(genre) ? prev : [...prev, genre]);\n  };\n  const handleRemoveGenre = genre => {\n    setSelectedGenres(prev => prev.filter(g => g !== genre));\n  };\n  const handleFormatChange = format => {\n    setSelectedFormats(prev => prev.includes(format) ? prev : [...prev, format]);\n  };\n  const handleRemoveFormat = format => {\n    setSelectedFormats(prev => prev.filter(f => f !== format));\n  };\n  const handleTopRightButtonClick = manga => {\n    setSelectedMangaForEdit(manga);\n    setIsMangaEditorOpen(true);\n  };\n  const onMangaDelete = mangaId => {\n    setUserData(prev => {\n      if (!(prev !== null && prev !== void 0 && prev.mangas)) return prev;\n      return {\n        ...prev,\n        mangas: prev.mangas.filter(manga => manga.mangaId !== mangaId)\n      };\n    });\n    setIsMangaEditorOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: browseStyles.browseContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: browseStyles.filterContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: browseStyles.layoutButtons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeLayout('default'),\n          className: browseStyles.layoutButton,\n          children: \"Default\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeLayout('wide'),\n          className: browseStyles.layoutButton,\n          children: \"Wide\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeLayout('compact'),\n          className: browseStyles.layoutButton,\n          children: \"Compact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: browseStyles.searchContainer,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"searchInput\",\n          name: \"searchInput\",\n          placeholder: \"Search manga...\",\n          value: searchInput,\n          onChange: e => setSearchInput(e.target.value),\n          className: browseStyles.searchInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: browseStyles.genreFilterContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: \"\",\n          id: \"genreSearchInput\",\n          name: \"genreSearchInput\",\n          onChange: e => handleGenreClick(e.target.value),\n          className: browseStyles.genreSelect,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select a genre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), AVAILABLE_GENRES.map(genre => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: genre,\n            children: genre\n          }, genre, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: browseStyles.selectedGenres,\n          children: selectedGenres.map(genre => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: browseStyles.selectedGenre,\n            children: [genre, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRemoveGenre(genre),\n              className: browseStyles.removeGenreBtn,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 17\n            }, this)]\n          }, genre, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: browseStyles.filterSection,\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"selectedYear\",\n          name: \"selectedYear\",\n          value: selectedYear,\n          onChange: e => setSelectedYear(e.target.value),\n          className: browseStyles.filterSelect,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"All Years\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), YEARS.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: year\n          }, year, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: browseStyles.filterSection,\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"selectedFormat\",\n          name: \"selectedFormat\",\n          value: \"\",\n          onChange: e => handleFormatChange(e.target.value),\n          className: browseStyles.filterSelect,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select a Format\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this), MANGA_FORMATS.map(format => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: format,\n            children: format\n          }, format, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: browseStyles.selectedFilters,\n          children: selectedFormats.map(format => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: browseStyles.selectedFilter,\n            children: [format, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRemoveFormat(format),\n              className: browseStyles.removeGenreBtn,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 17\n            }, this)]\n          }, format, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: browseStyles.filterSection,\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"selectedStatus\",\n          name: \"selectedStatus\",\n          value: selectedStatus,\n          onChange: e => setSelectedStatus(e.target.value),\n          className: browseStyles.filterSelect,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"All Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this), AIRING_STATUS.map(status => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: status,\n            children: status\n          }, status, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${browseStyles.listSection} ${browseStyles[gridLayout]}`,\n      children: displayedMangas.length === 0 && !isInitialLoading && !isLoadingMore ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: browseStyles.noResults,\n        children: \"No manga found matching your criteria\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${browseStyles.listContainer} ${browseStyles[gridLayout]}`,\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: `${browseStyles.list} ${browseStyles[gridLayout]}`,\n          children: renderListItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), isMangaEditorOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: modalStyles.modalOverlay,\n      onClick: handleModalClose,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: modalStyles.characterModal,\n        onClick: e => e.stopPropagation(),\n        children: /*#__PURE__*/_jsxDEV(MangaEditor, {\n          manga: selectedMangaForEdit,\n          userId: userData._id,\n          closeModal: handleModalClose,\n          onMangaDelete: onMangaDelete,\n          setUserData: setUserData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n_s(Mangas, \"EQEj1DNQs/T8Be9NLRFYQNebozI=\", false, function () {\n  return [useMangaContext];\n});\n_c = Mangas;\nexport default Mangas;\nvar _c;\n$RefreshReg$(_c, \"Mangas\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","useCallback","axiosInstance","useMangaContext","MangaCard","SkeletonCard","MangaEditor","data","modalStyles","browseStyles","MANGA_FORMATS","AVAILABLE_GENRES","AIRING_STATUS","YEARS","jsxDEV","_jsxDEV","MANGAS_PER_PAGE","Mangas","_s","mangaList","setMangaList","userData","setUserData","userMangaStatuses","setUserMangaStatuses","searchInput","setSearchInput","selectedGenres","setSelectedGenres","isMangaEditorOpen","setIsMangaEditorOpen","selectedMangaForEdit","setSelectedMangaForEdit","selectedYear","setSelectedYear","selectedFormats","setSelectedFormats","selectedStatus","setSelectedStatus","gridLayout","setGridLayout","isInitialLoading","setIsInitialLoading","isLoadingMore","setIsLoadingMore","displayedMangas","setDisplayedMangas","hasMore","setHasMore","loadingStates","setLoadingStates","observer","filteredMangasRef","isLoadingRef","handleModalClose","changeLayout","layout","handleMangaLoad","mangaId","prev","setTimeout","Math","random","forEach","manga","_id","undefined","mangaTitle","titles","title","english","romaji","native","get","then","response","catch","error","console","fetchUserMangaStatuses","_currentUser$mangas","userResponse","currentUser","statusMap","mangas","status","getMangaStatus","filterAndSortMangas","Array","isArray","filter","_manga$titles","_manga$titles$romaji","_manga$titles2","_manga$titles2$englis","_manga$titles3","_manga$titles3$Native","matchesSearch","toLowerCase","includes","Native","matchesGenres","length","genres","every","genre","some","mangaGenre","matchesYear","releaseData","startDate","year","matchesFormat","typings","Format","matchesStatus","releaseStatus","sort","a","b","titleA","titleB","localeCompare","sensitivity","current","initialBatch","slice","loadMoreMangas","currentLength","nextBatch","lastMangaElementRef","node","disconnect","IntersectionObserver","entries","isIntersecting","observe","renderListItems","items","index","isLoading","mangaStatus","push","ref","className","listItem","loading","loaded","children","fileName","_jsxFileName","lineNumber","columnNumber","fadeIn","name","onTopRightButtonClick","handleTopRightButtonClick","hideTopRightButton","handleGenreClick","i","handleRemoveGenre","g","handleFormatChange","format","handleRemoveFormat","f","onMangaDelete","browseContainer","filterContainer","layoutButtons","onClick","layoutButton","searchContainer","type","id","placeholder","value","onChange","e","target","genreFilterContainer","genreSelect","disabled","map","selectedGenre","removeGenreBtn","filterSection","filterSelect","selectedFilters","selectedFilter","listSection","noResults","listContainer","list","modalOverlay","characterModal","stopPropagation","userId","closeModal","_c","$RefreshReg$"],"sources":["C:/Users/david/Documents/anime_website/anime_website/frontend/src/pages/Mangas.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef, useCallback } from 'react';\r\nimport axiosInstance from '../utils/axiosConfig';\r\nimport { useMangaContext } from '../Context/MangaContext';\r\nimport MangaCard from '../cards/MangaCard';\r\nimport SkeletonCard from '../cards/SkeletonCard';\r\nimport MangaEditor from '../Components/ListEditors/MangaEditor';\r\nimport data from '../Context/ContextApi';\r\nimport modalStyles from '../styles/components/Modal.module.css';\r\nimport browseStyles from '../styles/pages/Browse.module.css';\r\nimport { MANGA_FORMATS, AVAILABLE_GENRES, AIRING_STATUS, YEARS } from '../constants/filterOptions';\r\n\r\nconst MANGAS_PER_PAGE = 18;\r\n\r\nconst Mangas = () => {\r\n  const { mangaList, setMangaList } = useMangaContext();\r\n  const { userData, setUserData } = useContext(data);\r\n  const [userMangaStatuses, setUserMangaStatuses] = useState({});\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const [selectedGenres, setSelectedGenres] = useState([]);\r\n  const [isMangaEditorOpen, setIsMangaEditorOpen] = useState(false);\r\n  const [selectedMangaForEdit, setSelectedMangaForEdit] = useState(null);\r\n  const [selectedYear, setSelectedYear] = useState('');\r\n  const [selectedFormats, setSelectedFormats] = useState([]);\r\n  const [selectedStatus, setSelectedStatus] = useState('');\r\n  const [gridLayout, setGridLayout] = useState('default');\r\n  const [isInitialLoading, setIsInitialLoading] = useState(true);\r\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n  const [displayedMangas, setDisplayedMangas] = useState([]);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [loadingStates, setLoadingStates] = useState({});\r\n\r\n  const observer = useRef();\r\n  const filteredMangasRef = useRef([]);\r\n  const isLoadingRef = useRef(false);\r\n\r\n  const handleModalClose = () => setIsMangaEditorOpen(false);\r\n  const changeLayout = (layout) => setGridLayout(layout);\r\n\r\n  // NEW: Handle manga loading transitions\r\n  const handleMangaLoad = useCallback((mangaId) => {\r\n    setLoadingStates(prev => ({\r\n      ...prev,\r\n      [mangaId]: true\r\n    }));\r\n\r\n    setTimeout(() => {\r\n      setLoadingStates(prev => ({\r\n        ...prev,\r\n        [mangaId]: false\r\n      }));\r\n    }, Math.random() * 300 + 200);\r\n  }, []);\r\n\r\n  // NEW: Initialize loading states for new mangas\r\n  useEffect(() => {\r\n    displayedMangas.forEach(manga => {\r\n      if (loadingStates[manga._id] === undefined) {\r\n        handleMangaLoad(manga._id);\r\n      }\r\n    });\r\n  }, [displayedMangas, handleMangaLoad, loadingStates]);\r\n\r\n  const mangaTitle = useCallback((titles) => {\r\n    switch (userData.title) {\r\n      case 'english':\r\n        return titles.english || titles.romaji;\r\n      case 'romaji':\r\n        return titles.romaji || titles.english;\r\n      case 'native':\r\n        return titles.native;\r\n      default:\r\n        return titles.english || titles.romaji || titles.native || 'Unknown Title';\r\n    }\r\n  }, [userData.title]);\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    setIsInitialLoading(true);\r\n    axiosInstance.get('8080/mangas/mangas')\r\n      .then(response => {\r\n        setMangaList(response.data);\r\n        setIsInitialLoading(false);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        setIsInitialLoading(false);\r\n      });\r\n  }, [setMangaList]);\r\n\r\n  // Fetch user's current manga statuses when userData changes\r\n  useEffect(() => {\r\n    const fetchUserMangaStatuses = async () => {\r\n      if (!userData?._id) {\r\n        setUserMangaStatuses({});\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const userResponse = await axiosInstance.get(`/users/${userData._id}/current`);\r\n        const currentUser = userResponse.data;\r\n\r\n        // Create a map of mangaId to status for quick lookup\r\n        const statusMap = {};\r\n        currentUser?.mangas?.forEach(manga => {\r\n          statusMap[manga.mangaId] = manga.status;\r\n        });\r\n\r\n        setUserMangaStatuses(statusMap);\r\n      } catch (error) {\r\n        console.error('Error fetching user manga statuses:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserMangaStatuses();\r\n  }, [userData]);\r\n\r\n  // Update getMangaStatus to use the status map\r\n  const getMangaStatus = useCallback((mangaId) => {\r\n    return userMangaStatuses[mangaId] || null;\r\n  }, [userMangaStatuses]);\r\n\r\n  // Filter and sort manga list\r\n  const filterAndSortMangas = useCallback(() => {\r\n    if (!Array.isArray(mangaList)) return [];\r\n\r\n    return mangaList.filter(manga => {\r\n      const matchesSearch =\r\n        manga.titles?.romaji?.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n        manga.titles?.english?.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n        manga.titles?.Native?.toLowerCase().includes(searchInput.toLowerCase());\r\n\r\n      const matchesGenres =\r\n        selectedGenres.length === 0 ||\r\n        (manga.genres &&\r\n          Array.isArray(manga.genres) &&\r\n          selectedGenres.every(genre =>\r\n            manga.genres.some(\r\n              mangaGenre =>\r\n                genre &&\r\n                mangaGenre.toLowerCase().includes(genre.toLowerCase())\r\n            )\r\n          ));\r\n\r\n      const matchesYear = !selectedYear || manga.releaseData.startDate.year === selectedYear;\r\n      const matchesFormat = selectedFormats.length === 0 || selectedFormats.includes(manga.typings.Format);\r\n      const matchesStatus = !selectedStatus || manga.releaseData.releaseStatus === selectedStatus;\r\n\r\n      return matchesSearch && matchesGenres && matchesYear && matchesFormat && matchesStatus;\r\n    }).sort((a, b) => {\r\n      const titleA = mangaTitle(a.titles);\r\n      const titleB = mangaTitle(b.titles);\r\n      return titleA.localeCompare(titleB, undefined, { sensitivity: 'base' });\r\n    });\r\n  }, [mangaList, searchInput, selectedGenres, selectedYear, selectedFormats, selectedStatus, mangaTitle]);\r\n\r\n  // Update filtered mangas when filters change\r\n  useEffect(() => {\r\n    if (!mangaList) return;\r\n\r\n    setDisplayedMangas([]); // Clear current display\r\n    filteredMangasRef.current = filterAndSortMangas();\r\n\r\n    // Load initial batch\r\n    const initialBatch = filteredMangasRef.current.slice(0, MANGAS_PER_PAGE);\r\n    setDisplayedMangas(initialBatch);\r\n    setHasMore(filteredMangasRef.current.length > MANGAS_PER_PAGE);\r\n  }, [filterAndSortMangas, mangaList]);\r\n\r\n  // Load more mangas\r\n  const loadMoreMangas = useCallback(() => {\r\n    if (isLoadingRef.current || !hasMore) return;\r\n\r\n    isLoadingRef.current = true;\r\n    setIsLoadingMore(true);\r\n\r\n    const currentLength = displayedMangas.length;\r\n    const nextBatch = filteredMangasRef.current.slice(\r\n      currentLength,\r\n      currentLength + MANGAS_PER_PAGE\r\n    );\r\n\r\n    setTimeout(() => {\r\n      setDisplayedMangas(prev => [...prev, ...nextBatch]);\r\n      setHasMore(currentLength + MANGAS_PER_PAGE < filteredMangasRef.current.length);\r\n      setIsLoadingMore(false);\r\n      isLoadingRef.current = false;\r\n    }, 500);\r\n  }, [displayedMangas.length, hasMore]);\r\n\r\n  // Intersection Observer setup\r\n  const lastMangaElementRef = useCallback(node => {\r\n    if (isLoadingMore) return;\r\n\r\n    if (observer.current) observer.current.disconnect();\r\n\r\n    observer.current = new IntersectionObserver(entries => {\r\n      if (entries[0].isIntersecting && hasMore) {\r\n        loadMoreMangas();\r\n      }\r\n    });\r\n\r\n    if (node) observer.current.observe(node);\r\n  }, [isLoadingMore, hasMore, loadMoreMangas]);\r\n\r\n  // NEW: Render list items with transitions\r\n  const renderListItems = () => {\r\n    const items = [];\r\n\r\n    displayedMangas.forEach((manga, index) => {\r\n      const isLoading = loadingStates[manga._id];\r\n      const mangaStatus = getMangaStatus(manga._id);\r\n      items.push(\r\n        <li\r\n          key={manga._id}\r\n          ref={index === displayedMangas.length - 1 ? lastMangaElementRef : null}\r\n          className={`${browseStyles.listItem} ${isLoading ? browseStyles.loading : browseStyles.loaded}`}\r\n        >\r\n          {isLoading ? (\r\n            <SkeletonCard layout={gridLayout} />\r\n          ) : (\r\n            <div className={browseStyles.fadeIn}>\r\n              <MangaCard\r\n                manga={manga}\r\n                name={mangaTitle(manga.titles)}\r\n                layout={gridLayout}\r\n                onTopRightButtonClick={handleTopRightButtonClick}\r\n                hideTopRightButton={!userData || !userData._id}\r\n                handleGenreClick={handleGenreClick}\r\n                status={mangaStatus}\r\n              />\r\n            </div>\r\n          )}\r\n        </li>\r\n      );\r\n    });\r\n\r\n    if (isLoadingMore && hasMore) {\r\n      for (let i = 0; i < 4; i++) {\r\n        items.push(\r\n          <li key={`skeleton-more-${i}`} className={`${browseStyles.listItem} ${browseStyles.loading}`}>\r\n            <SkeletonCard layout={gridLayout} />\r\n          </li>\r\n        );\r\n      }\r\n    }\r\n\r\n    return items;\r\n  };\r\n\r\n  const handleGenreClick = (genre) => {\r\n    setSelectedGenres(prev => prev.includes(genre) ? prev : [...prev, genre]);\r\n  };\r\n\r\n  const handleRemoveGenre = (genre) => {\r\n    setSelectedGenres(prev => prev.filter(g => g !== genre));\r\n  };\r\n\r\n  const handleFormatChange = (format) => {\r\n    setSelectedFormats(prev => prev.includes(format) ? prev : [...prev, format]);\r\n  };\r\n\r\n  const handleRemoveFormat = (format) => {\r\n    setSelectedFormats(prev => prev.filter(f => f !== format));\r\n  };\r\n\r\n  const handleTopRightButtonClick = (manga) => {\r\n    setSelectedMangaForEdit(manga);\r\n    setIsMangaEditorOpen(true);\r\n  };\r\n\r\n  const onMangaDelete = (mangaId) => {\r\n    setUserData(prev => {\r\n      if (!prev?.mangas) return prev;\r\n      return {\r\n        ...prev,\r\n        mangas: prev.mangas.filter(manga => manga.mangaId !== mangaId)\r\n      };\r\n    });\r\n    setIsMangaEditorOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={browseStyles.browseContainer}>\r\n      <div className={browseStyles.filterContainer}>\r\n        <div className={browseStyles.layoutButtons}>\r\n          <button onClick={() => changeLayout('default')} className={browseStyles.layoutButton}>Default</button>\r\n          <button onClick={() => changeLayout('wide')} className={browseStyles.layoutButton}>Wide</button>\r\n          <button onClick={() => changeLayout('compact')} className={browseStyles.layoutButton}>Compact</button>\r\n        </div>\r\n\r\n        <div className={browseStyles.searchContainer}>\r\n          <input\r\n            type=\"text\"\r\n            id=\"searchInput\"\r\n            name=\"searchInput\"\r\n            placeholder=\"Search manga...\"\r\n            value={searchInput}\r\n            onChange={(e) => setSearchInput(e.target.value)}\r\n            className={browseStyles.searchInput}\r\n          />\r\n        </div>\r\n\r\n        <div className={browseStyles.genreFilterContainer}>\r\n          <select\r\n            value=\"\"\r\n            id=\"genreSearchInput\"\r\n            name=\"genreSearchInput\"\r\n            onChange={(e) => handleGenreClick(e.target.value)}\r\n            className={browseStyles.genreSelect}\r\n          >\r\n            <option value=\"\" disabled>Select a genre</option>\r\n            {AVAILABLE_GENRES.map((genre) => (\r\n              <option key={genre} value={genre}>{genre}</option>\r\n            ))}\r\n          </select>\r\n          <div className={browseStyles.selectedGenres}>\r\n            {selectedGenres.map((genre) => (\r\n              <div key={genre} className={browseStyles.selectedGenre}>\r\n                {genre}\r\n                <button onClick={() => handleRemoveGenre(genre)} className={browseStyles.removeGenreBtn}>×</button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className={browseStyles.filterSection}>\r\n          <select\r\n            id=\"selectedYear\"\r\n            name=\"selectedYear\"\r\n            value={selectedYear}\r\n            onChange={(e) => setSelectedYear(e.target.value)}\r\n            className={browseStyles.filterSelect}\r\n          >\r\n            <option value=\"\">All Years</option>\r\n            {YEARS.map(year => (\r\n              <option key={year} value={year}>{year}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className={browseStyles.filterSection}>\r\n          <select\r\n            id=\"selectedFormat\"\r\n            name=\"selectedFormat\"\r\n            value=\"\"\r\n            onChange={(e) => handleFormatChange(e.target.value)}\r\n            className={browseStyles.filterSelect}\r\n          >\r\n            <option value=\"\" disabled>Select a Format</option>\r\n            {MANGA_FORMATS.map(format => (\r\n              <option key={format} value={format}>{format}</option>\r\n            ))}\r\n          </select>\r\n          <div className={browseStyles.selectedFilters}>\r\n            {selectedFormats.map((format) => (\r\n              <div key={format} className={browseStyles.selectedFilter}>\r\n                {format}\r\n                <button onClick={() => handleRemoveFormat(format)} className={browseStyles.removeGenreBtn}>×</button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className={browseStyles.filterSection}>\r\n          <select\r\n            id=\"selectedStatus\"\r\n            name=\"selectedStatus\"\r\n            value={selectedStatus}\r\n            onChange={(e) => setSelectedStatus(e.target.value)}\r\n            className={browseStyles.filterSelect}\r\n          >\r\n            <option value=\"\">All Status</option>\r\n            {AIRING_STATUS.map(status => (\r\n              <option key={status} value={status}>{status}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={`${browseStyles.listSection} ${browseStyles[gridLayout]}`}>\r\n        {displayedMangas.length === 0 && !isInitialLoading && !isLoadingMore ? (\r\n          <div className={browseStyles.noResults}>\r\n            No manga found matching your criteria\r\n          </div>\r\n        ) : (\r\n          <div className={`${browseStyles.listContainer} ${browseStyles[gridLayout]}`}>\r\n            <ul className={`${browseStyles.list} ${browseStyles[gridLayout]}`}>\r\n              {renderListItems()}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {isMangaEditorOpen && (\r\n        <div className={modalStyles.modalOverlay} onClick={handleModalClose}>\r\n          <div className={modalStyles.characterModal} onClick={(e) => e.stopPropagation()}>\r\n            <MangaEditor\r\n              manga={selectedMangaForEdit}\r\n              userId={userData._id}\r\n              closeModal={handleModalClose}\r\n              onMangaDelete={onMangaDelete}\r\n              setUserData={setUserData}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mangas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}