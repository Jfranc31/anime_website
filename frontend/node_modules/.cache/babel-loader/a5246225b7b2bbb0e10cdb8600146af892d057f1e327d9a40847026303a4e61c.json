{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Documents\\\\anime_website\\\\anime_website\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useContext, useCallback } from 'react';\n// import { Link } from 'react-router-dom';\n// import axiosInstance from './../utils/axiosConfig';\n// import { useAnimeContext } from '../Context/AnimeContext';\n// import { useMangaContext } from '../Context/MangaContext';\n// import data from '../Context/ContextApi';\n// import homeStyles from '../styles/pages/Home.module.css';\n// import { fetchWithErrorHandling } from '../utils/apiUtils';\n\n// const Home = () => {\n//   const { animeList } = useAnimeContext();\n//   const { mangaList } = useMangaContext();\n//   const { userData } = useContext(data);\n//   const [latestActivities, setLatestActivities] = useState([]);\n//   const [userAnimeList, setUserAnimeList] = useState([]);\n//   const [userMangaList, setUserMangaList] = useState([]);\n//   const [hoveredCard, setHoveredCard] = useState(null);\n//   const [popupPosition, setPopupPosition] = useState({ left: '100%', top: '0' });\n\n//   const fetchLatestActivities = useCallback(async () => {\n//     try {\n//       const data = await fetchWithErrorHandling(`/latest-activities/${userData._id}`);\n//       const sortedActivities = data.sort(\n//         (a, b) => new Date(b.activityTimestamp) - new Date(a.activityTimestamp)\n//       );\n//       setLatestActivities(sortedActivities);\n//     } catch (error) {\n//       setLatestActivities([]);\n//     }\n//   }, [userData._id]);\n\n//   const fetchUserList = useCallback(async () => {\n//     try {\n//       const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\n//       setUserAnimeList(data.animes);\n//       setUserMangaList(data.mangas);\n//     } catch (error) {\n//       setUserAnimeList([]);\n//       setUserMangaList([]);\n//     }\n//   }, [userData._id]);\n\n//   useEffect(() => {\n//     fetchLatestActivities();\n//     fetchUserList();\n//   }, [userData._id, fetchLatestActivities, fetchUserList]);\n\n//   const getAnimeById = (animeId) => {\n//     return animeList.find((anime) => anime._id === animeId);\n//   };\n\n//   const getMangaById = (mangaId) => {\n//     return mangaList.find((manga) => manga._id === mangaId);\n//   };\n\n//   const filterAnimeByWatching = () => {\n//     return userAnimeList\n//       .filter((userAnime) => userAnime.status === 'Watching')\n//       .map((userAnime) => ({\n//         animeId: userAnime.animeId,\n//         currentEpisode: userAnime.currentEpisode,\n//         status: userAnime.status,\n//         animeDetails: getAnimeById(userAnime.animeId),\n//       }));\n//   };\n\n//   const filterMangaByReading = () => {\n//     return userMangaList\n//       .filter((userManga) => userManga.status === 'Reading')\n//       .map((userManga) => ({\n//         mangaId: userManga.mangaId,\n//         currentChapter: userManga.currentChapter,\n//         currentVolume: userManga.currentVolume,\n//         status: userManga.status,\n//         mangaDetails: getMangaById(userManga.mangaId),\n//       }));\n//   };\n\n//   const handleIncrementWatchCount = async (id, type) => {\n//     console.log('Incrementing count:', { id, type });\n\n//     if (type === 'anime') {\n//       const currentAnime = userAnimeList.find(anime => anime.animeId === id);\n//       console.log('Current anime:', currentAnime);\n\n//       if (currentAnime) {\n//         const newEpisodeCount = currentAnime.currentEpisode + 1;\n\n//         // Update the local state immediately\n//         setUserAnimeList((prevList) =>\n//           prevList.map((anime) =>\n//             anime.animeId === id\n//               ? { ...anime, currentEpisode: newEpisodeCount }\n//               : anime\n//           )\n//         );\n\n//         try {\n//           // Make an API call to update the current episode on the backend\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateAnime`, {\n//             animeId: id,\n//             status: userData.status || 'Watching',\n//             currentEpisode: newEpisodeCount,\n//           });\n\n//           if (!response.data) {\n//             console.error('Failed to update on the server');\n//           } else {\n//             fetchLatestActivities();\n//           }\n//         } catch (error) {\n//           console.error('Error updating user progress:', error);\n//         }\n//       }\n//     }\n//     if (type === 'manga') {\n//       const currentManga = userMangaList.find(manga => manga.mangaId === id);\n//       console.log('Current manga:', currentManga);\n\n//       if (currentManga) {\n//         const newChapterCount = currentManga.currentChapter + 1;\n//         const volumeCount = currentManga.currentVolume;\n\n//         // Update the local state immediately\n//         setUserMangaList((prevList) =>\n//           prevList.map((manga) =>\n//             manga.mangaId === id\n//               ? { ...manga, currentChapter: newChapterCount, currentVolume: volumeCount }\n//               : manga\n//           )\n//         );\n\n//         console.log('UserMangaList: ', userMangaList);\n\n//         try {\n//           // Make an API call to update the current chapter on the backend\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateManga`, {\n//             mangaId: id,\n//             status: userData.status || 'Reading',\n//             currentChapter: newChapterCount,\n//             currentVolume: volumeCount\n//           });\n\n//           if (!response.data) {\n//             console.log('Failed to update on the server');\n//           } else {\n//             fetchLatestActivities();\n//           }\n//         } catch (error) {\n//           console.error('Error updating user progress:', error);\n//         }\n//       }\n//     }\n//   };\n\n//   const animeActivities = latestActivities.filter(\n//     (activity) => activity.animeDetails\n//   );\n//   const mangaActivities = latestActivities.filter(\n//     (activity) => activity.mangaDetails\n//   );\n//   const watchingAnime = filterAnimeByWatching();\n//   const readingManga = filterMangaByReading();\n\n//   const formatTimeUntilNextEpisode = (timeUntilAiring) => {\n//     const days = Math.floor(timeUntilAiring / (3600 * 24));\n//     const hours = Math.floor((timeUntilAiring % (3600 * 24)) / 3600);\n//     const minutes = Math.floor((timeUntilAiring % 3600) / 60);\n\n//     return `${days}d ${hours}h ${minutes}m`;\n//   };\n\n//   const handleMouseEnter = (animeId, event) => {\n//     const popupWidth = 300; // Set this to the width of your popup\n//     const cardElement = event.currentTarget; // Get the card element\n\n//     const cardRect = cardElement.getBoundingClientRect(); // Get the card's position\n\n//     // Get the activity page width\n//     const activityPage = document.querySelector(`.${homeStyles.activityPage}`);\n//     const activityPageRect = activityPage.getBoundingClientRect();\n//     const activityPageRightEdge = activityPageRect.right;\n\n//     // Calculate the right edge of the popup\n//     const rightEdge = cardRect.right + popupWidth;\n\n//     if (rightEdge > activityPageRightEdge) {\n//       // If it overflows, position it to the left of the card\n//       setPopupPosition({\n//         left: `-215%`, // Position to the left\n//         top: `0`, // Align with the card's top\n//       });\n//     } else {\n//       // Otherwise, position it to the right of the card\n//       setPopupPosition({\n//         left: `100%`, // Position to the right\n//         top: `0`, // Align with the card's top\n//       });\n//     }\n\n//     setHoveredCard(animeId);\n//   };\n\n//   return (\n//     <div className={homeStyles.activityPage}>\n//       {animeActivities.length > 0 && (\n//         <>\n//           <div className={homeStyles.sectionContainer}>\n//             <div className={homeStyles.headerContainer}>\n//               <h1>Anime Activities</h1>\n//             </div>\n//             <div className={homeStyles.activitiesGrid}>\n//               {animeActivities.slice(0, 15).map((activity) => (\n//                 <div key={activity._id} className={homeStyles.activityCard}>\n//                   <Link to={`/anime/${activity.animeDetails._id}`}>\n//                     <div className={homeStyles.activityImage}>\n//                       <img\n//                         src={activity.animeDetails.images.image}\n//                         alt={activity.animeDetails.titles.english}\n//                       />\n//                     </div>\n//                   </Link>\n//                   <div className={homeStyles.activityInfo}>\n//                     <h3>{activity.animeDetails.titles.english || activity.animeDetails.titles.romaji}</h3>\n//                     <p className={homeStyles.activityStatus}>\n//                       {activity.status === 'Completed'\n//                         ? 'Completed'\n//                         : activity.status === 'Planning'\n//                         ? `Planning to watch`\n//                         : activity.currentEpisode === 0 &&\n//                             activity.status === 'Watching'\n//                           ? 'Started watching'\n//                           : `Episode ${activity.currentEpisode}`}\n//                     </p>\n//                     <span className={homeStyles.activityTimestamp}>\n//                       {new Date(\n//                         activity.activityTimestamp\n//                       ).toLocaleDateString()}\n//                     </span>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           {watchingAnime.length > 0 && (\n//             <div className={homeStyles.progressSection}>\n//               <h2>Currently Watching</h2>\n//               <div className={homeStyles.progressGrid}>\n//                 {watchingAnime.map((activity) => (\n//                   <div\n//                     key={activity.animeId}\n//                     className={homeStyles.progressCard}\n//                     onMouseEnter={(event) => handleMouseEnter(activity.animeId, event)}\n//                     onMouseLeave={() => setHoveredCard(null)}\n//                   >\n//                     <Link\n//                       to={`/anime/${activity.animeId}`}\n//                     >\n//                       <img\n//                         src={getAnimeById(activity.animeId)?.images.image}\n//                         alt={getAnimeById(activity.animeId)?.titles.english}\n//                       />\n//                     </Link>\n//                     <div className={homeStyles.progressInfo}>\n//                       {hoveredCard === activity.animeId ? (\n//                         <div className={homeStyles.episodeInfo}>\n//                           <span>\n//                             {activity.currentEpisode} {/* Show the current episode */}\n//                           </span>\n//                           <span\n//                             className={homeStyles.incrementWatchCount}\n//                             onClick={() => handleIncrementWatchCount(activity.animeId, 'anime')} // Increment function\n//                           >\n//                             +\n//                           </span>\n//                         </div>\n//                       ) : (\n//                         getAnimeById(activity.animeId)?.nextAiringEpisode?.airingAt && (\n//                           <div className={homeStyles.episodeInfo}>\n//                             <span>\n//                               {getAnimeById(activity.animeId)?.nextAiringEpisode?.episode}\n//                             </span>\n//                             <span>\n//                               {formatTimeUntilNextEpisode(getAnimeById(activity.animeId)?.nextAiringEpisode?.timeUntilAiring)}\n//                             </span>\n//                           </div>\n//                         )\n//                       )}\n//                     </div>\n//                     {hoveredCard === activity.animeId && (\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\n//                         <h4>{getAnimeById(activity.animeId)?.titles.english || getAnimeById(activity.animeId)?.titles.romaji}</h4>\n//                         <p>Progress: {activity.currentEpisode}/{getAnimeById(activity.animeId)?.lengths.Episodes}</p>\n//                       </div>\n//                     )}\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n//           )}\n//         </>\n//       )}\n\n//       {mangaActivities.length > 0 && (\n//         <>\n//           <div className={homeStyles.sectionContainer}>\n//             <div className={homeStyles.headerContainer}>\n//               <h1>Manga Activities</h1>\n//             </div>\n//             <div className={homeStyles.activitiesGrid}>\n//               {mangaActivities.slice(0, 15).map((activity) => (\n//                 <div key={activity._id} className={homeStyles.activityCard}>\n//                   <Link to={`/manga/${activity.mangaDetails._id}`}>\n//                     <div className={homeStyles.activityImage}>\n//                       <img\n//                         src={activity.mangaDetails.images.image}\n//                         alt={activity.mangaDetails.titles.english}\n//                       />\n//                     </div>\n//                   </Link>\n//                   <div className={homeStyles.activityInfo}>\n//                     <h3>{activity.mangaDetails.titles.english || activity.mangaDetails.titles.romaji}</h3>\n//                     <p className={homeStyles.activityStatus}>\n//                       {activity.status === 'Completed'\n//                         ? 'Completed'\n//                         : activity.status === 'Planning'\n//                         ? 'Planning to read'\n//                         : activity.currentChapter === 0 &&\n//                             activity.status === 'Reading'\n//                           ? 'Started reading'\n//                           : `Chapter ${activity.currentChapter}`}\n//                     </p>\n//                     <span className={homeStyles.activityTimestamp}>\n//                       {new Date(\n//                         activity.activityTimestamp\n//                       ).toLocaleDateString()}\n//                     </span>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           {readingManga.length > 0 && (\n//             <div className={homeStyles.progressSection}>\n//               <h2>Currently Reading</h2>\n//               <div className={homeStyles.progressGrid}>\n//                 {readingManga.map((activity) => (\n//                   <div\n//                     key={activity.mangaId}\n//                     className={homeStyles.progressCard}\n//                     onMouseEnter={(event) => handleMouseEnter(activity.mangaId, event)}\n//                     onMouseLeave={() => setHoveredCard(null)}\n//                   >\n//                     <Link\n//                       to={`/manga/${activity.mangaId}`}\n//                     >\n//                       <img\n//                         src={getMangaById(activity.mangaId)?.images.image}\n//                         alt={getMangaById(activity.mangaId)?.titles.english}\n//                       />\n//                     </Link>\n//                     <div className={homeStyles.progressInfo}>\n//                       {hoveredCard === activity.mangaId && (\n//                         <div className={homeStyles.episodeInfo}>\n//                           <span>\n//                             {activity.currentChapter}\n//                           </span>\n//                           <span\n//                             className={homeStyles.incrementWatchCount}\n//                             onClick={() => handleIncrementWatchCount(activity.mangaId, 'manga')}\n//                           >\n//                             +\n//                           </span>\n//                         </div>\n//                       )}\n//                     </div>\n//                     {hoveredCard === activity.mangaId && (\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\n//                         <h4>{getMangaById(activity.mangaId)?.titles.english || getMangaById(activity.mangaId)?.titles.romaji}</h4>\n//                         <p>Progress: {activity.currentChapter}/{getMangaById(activity.mangaId)?.lengths.chapters}</p>\n//                       </div>\n//                     )}\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n//           )}\n//         </>\n//       )}\n\n//       {animeActivities.length === 0 && mangaActivities.length === 0 && (\n//         <div className={homeStyles.emptyState}>\n//           <h2>No Recent Activities</h2>\n//           <p>\n//             Start watching anime or reading manga to see your activities here!\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Home;\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport data from '../Context/ContextApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [activeTab, setActiveTab] = useState('activity');\n  const [view, setView] = useState('following');\n  const {\n    userData\n  } = useContext(data);\n\n  // Mock data for demonstration\n  const activities = [{\n    id: 1,\n    user: {\n      name: userData.username,\n      avatar: `http://localhost:8080${userData === null || userData === void 0 ? void 0 : userData.avatar}`\n    },\n    type: 'COMPLETED',\n    title: 'A Life-Changing Turn',\n    timestamp: '3 days ago',\n    media: {\n      image: '/api/placeholder/150/200'\n    }\n  }, {\n    id: 2,\n    user: {\n      name: userData.username,\n      avatar: '/api/placeholder/40/40'\n    },\n    type: 'PLANNING',\n    title: 'Honey Lemon Soda',\n    timestamp: '4 days ago',\n    media: {\n      image: '/api/placeholder/150/200'\n    }\n  }];\n  const airingAnime = [{\n    id: 1,\n    title: 'Series 1',\n    episode: 20,\n    timeUntil: '1d 20h 56m',\n    image: '/api/placeholder/120/180'\n  }, {\n    id: 2,\n    title: 'Series 2',\n    episode: 18,\n    timeUntil: '1d 21h 56m',\n    image: '/api/placeholder/120/180'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-gray-100\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto px-4 py-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-6 mb-6 border-b border-gray-700\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `pb-4 px-2 ${activeTab === 'activity' ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400'}`,\n          onClick: () => setActiveTab('activity'),\n          children: \"Activity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `pb-4 px-2 ${activeTab === 'airing' ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400'}`,\n          onClick: () => setActiveTab('airing'),\n          children: \"Airing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-4 mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `px-3 py-1 rounded ${view === 'following' ? 'bg-gray-700 text-white' : 'text-gray-400'}`,\n          onClick: () => setView('following'),\n          children: \"Following\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `px-3 py-1 rounded ${view === 'global' ? 'bg-gray-700 text-white' : 'text-gray-400'}`,\n          onClick: () => setView('global'),\n          children: \"Global\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Write a status...\",\n          className: \"w-full bg-gray-800 rounded-lg p-4 text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this), activeTab === 'activity' ?\n      /*#__PURE__*/\n      /* Activity Feed */\n      _jsxDEV(\"div\", {\n        className: \"space-y-4\",\n        children: activities.map(activity => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-800 rounded-lg p-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-start space-x-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: activity.user.avatar,\n              alt: activity.user.name,\n              className: \"w-10 h-10 rounded-full\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex justify-between\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-semibold text-blue-400\",\n                  children: activity.user.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 536,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-gray-500 text-sm\",\n                  children: activity.timestamp\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 537,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 535,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm mt-1\",\n                children: [activity.type === 'COMPLETED' ? 'Completed ' : 'Plans to watch ', /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-blue-400\",\n                  children: activity.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 541,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: activity.media.image,\n                alt: activity.title,\n                className: \"mt-3 rounded-lg w-32 h-44 object-cover\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 17\n          }, this)\n        }, activity.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      /* Airing Schedule */\n      _jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4\",\n        children: airingAnime.map(anime => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative group\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: anime.image,\n            alt: anime.title,\n            className: \"w-full rounded-lg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute bottom-0 left-0 right-0 bg-black bg-opacity-75 p-2 rounded-b-lg\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm font-semibold\",\n              children: [\"Ep \", anime.episode]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-xs text-gray-400\",\n              children: anime.timeUntil\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 17\n          }, this)]\n        }, anime.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 464,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"xZK9letBWlea1urxJmWqC649taE=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Link","data","jsxDEV","_jsxDEV","Home","_s","activeTab","setActiveTab","view","setView","userData","activities","id","user","name","username","avatar","type","title","timestamp","media","image","airingAnime","episode","timeUntil","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","map","activity","src","alt","anime","_c","$RefreshReg$"],"sources":["C:/Users/david/Documents/anime_website/anime_website/frontend/src/pages/Home.js"],"sourcesContent":["// import React, { useState, useEffect, useContext, useCallback } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import axiosInstance from './../utils/axiosConfig';\r\n// import { useAnimeContext } from '../Context/AnimeContext';\r\n// import { useMangaContext } from '../Context/MangaContext';\r\n// import data from '../Context/ContextApi';\r\n// import homeStyles from '../styles/pages/Home.module.css';\r\n// import { fetchWithErrorHandling } from '../utils/apiUtils';\r\n\r\n// const Home = () => {\r\n//   const { animeList } = useAnimeContext();\r\n//   const { mangaList } = useMangaContext();\r\n//   const { userData } = useContext(data);\r\n//   const [latestActivities, setLatestActivities] = useState([]);\r\n//   const [userAnimeList, setUserAnimeList] = useState([]);\r\n//   const [userMangaList, setUserMangaList] = useState([]);\r\n//   const [hoveredCard, setHoveredCard] = useState(null);\r\n//   const [popupPosition, setPopupPosition] = useState({ left: '100%', top: '0' });\r\n\r\n//   const fetchLatestActivities = useCallback(async () => {\r\n//     try {\r\n//       const data = await fetchWithErrorHandling(`/latest-activities/${userData._id}`);\r\n//       const sortedActivities = data.sort(\r\n//         (a, b) => new Date(b.activityTimestamp) - new Date(a.activityTimestamp)\r\n//       );\r\n//       setLatestActivities(sortedActivities);\r\n//     } catch (error) {\r\n//       setLatestActivities([]);\r\n//     }\r\n//   }, [userData._id]);\r\n\r\n//   const fetchUserList = useCallback(async () => {\r\n//     try {\r\n//       const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\r\n//       setUserAnimeList(data.animes);\r\n//       setUserMangaList(data.mangas);\r\n//     } catch (error) {\r\n//       setUserAnimeList([]);\r\n//       setUserMangaList([]);\r\n//     }\r\n//   }, [userData._id]);\r\n\r\n//   useEffect(() => {\r\n//     fetchLatestActivities();\r\n//     fetchUserList();\r\n//   }, [userData._id, fetchLatestActivities, fetchUserList]);\r\n\r\n//   const getAnimeById = (animeId) => {\r\n//     return animeList.find((anime) => anime._id === animeId);\r\n//   };\r\n\r\n//   const getMangaById = (mangaId) => {\r\n//     return mangaList.find((manga) => manga._id === mangaId);\r\n//   };\r\n\r\n//   const filterAnimeByWatching = () => {\r\n//     return userAnimeList\r\n//       .filter((userAnime) => userAnime.status === 'Watching')\r\n//       .map((userAnime) => ({\r\n//         animeId: userAnime.animeId,\r\n//         currentEpisode: userAnime.currentEpisode,\r\n//         status: userAnime.status,\r\n//         animeDetails: getAnimeById(userAnime.animeId),\r\n//       }));\r\n//   };\r\n\r\n//   const filterMangaByReading = () => {\r\n//     return userMangaList\r\n//       .filter((userManga) => userManga.status === 'Reading')\r\n//       .map((userManga) => ({\r\n//         mangaId: userManga.mangaId,\r\n//         currentChapter: userManga.currentChapter,\r\n//         currentVolume: userManga.currentVolume,\r\n//         status: userManga.status,\r\n//         mangaDetails: getMangaById(userManga.mangaId),\r\n//       }));\r\n//   };\r\n\r\n//   const handleIncrementWatchCount = async (id, type) => {\r\n//     console.log('Incrementing count:', { id, type });\r\n\r\n//     if (type === 'anime') {\r\n//       const currentAnime = userAnimeList.find(anime => anime.animeId === id);\r\n//       console.log('Current anime:', currentAnime);\r\n\r\n//       if (currentAnime) {\r\n//         const newEpisodeCount = currentAnime.currentEpisode + 1;\r\n\r\n//         // Update the local state immediately\r\n//         setUserAnimeList((prevList) =>\r\n//           prevList.map((anime) =>\r\n//             anime.animeId === id\r\n//               ? { ...anime, currentEpisode: newEpisodeCount }\r\n//               : anime\r\n//           )\r\n//         );\r\n\r\n//         try {\r\n//           // Make an API call to update the current episode on the backend\r\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateAnime`, {\r\n//             animeId: id,\r\n//             status: userData.status || 'Watching',\r\n//             currentEpisode: newEpisodeCount,\r\n//           });\r\n\r\n//           if (!response.data) {\r\n//             console.error('Failed to update on the server');\r\n//           } else {\r\n//             fetchLatestActivities();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Error updating user progress:', error);\r\n//         }\r\n//       }\r\n//     }\r\n//     if (type === 'manga') {\r\n//       const currentManga = userMangaList.find(manga => manga.mangaId === id);\r\n//       console.log('Current manga:', currentManga);\r\n\r\n//       if (currentManga) {\r\n//         const newChapterCount = currentManga.currentChapter + 1;\r\n//         const volumeCount = currentManga.currentVolume;\r\n\r\n//         // Update the local state immediately\r\n//         setUserMangaList((prevList) =>\r\n//           prevList.map((manga) =>\r\n//             manga.mangaId === id\r\n//               ? { ...manga, currentChapter: newChapterCount, currentVolume: volumeCount }\r\n//               : manga\r\n//           )\r\n//         );\r\n\r\n//         console.log('UserMangaList: ', userMangaList);\r\n\r\n//         try {\r\n//           // Make an API call to update the current chapter on the backend\r\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateManga`, {\r\n//             mangaId: id,\r\n//             status: userData.status || 'Reading',\r\n//             currentChapter: newChapterCount,\r\n//             currentVolume: volumeCount\r\n//           });\r\n\r\n//           if (!response.data) {\r\n//             console.log('Failed to update on the server');\r\n//           } else {\r\n//             fetchLatestActivities();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Error updating user progress:', error);\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const animeActivities = latestActivities.filter(\r\n//     (activity) => activity.animeDetails\r\n//   );\r\n//   const mangaActivities = latestActivities.filter(\r\n//     (activity) => activity.mangaDetails\r\n//   );\r\n//   const watchingAnime = filterAnimeByWatching();\r\n//   const readingManga = filterMangaByReading();\r\n\r\n//   const formatTimeUntilNextEpisode = (timeUntilAiring) => {\r\n//     const days = Math.floor(timeUntilAiring / (3600 * 24));\r\n//     const hours = Math.floor((timeUntilAiring % (3600 * 24)) / 3600);\r\n//     const minutes = Math.floor((timeUntilAiring % 3600) / 60);\r\n\r\n//     return `${days}d ${hours}h ${minutes}m`;\r\n//   };\r\n\r\n//   const handleMouseEnter = (animeId, event) => {\r\n//     const popupWidth = 300; // Set this to the width of your popup\r\n//     const cardElement = event.currentTarget; // Get the card element\r\n\r\n//     const cardRect = cardElement.getBoundingClientRect(); // Get the card's position\r\n\r\n//     // Get the activity page width\r\n//     const activityPage = document.querySelector(`.${homeStyles.activityPage}`);\r\n//     const activityPageRect = activityPage.getBoundingClientRect();\r\n//     const activityPageRightEdge = activityPageRect.right;\r\n\r\n//     // Calculate the right edge of the popup\r\n//     const rightEdge = cardRect.right + popupWidth;\r\n\r\n//     if (rightEdge > activityPageRightEdge) {\r\n//       // If it overflows, position it to the left of the card\r\n//       setPopupPosition({\r\n//         left: `-215%`, // Position to the left\r\n//         top: `0`, // Align with the card's top\r\n//       });\r\n//     } else {\r\n//       // Otherwise, position it to the right of the card\r\n//       setPopupPosition({\r\n//         left: `100%`, // Position to the right\r\n//         top: `0`, // Align with the card's top\r\n//       });\r\n//     }\r\n\r\n//     setHoveredCard(animeId);\r\n//   };\r\n\r\n//   return (\r\n//     <div className={homeStyles.activityPage}>\r\n//       {animeActivities.length > 0 && (\r\n//         <>\r\n//           <div className={homeStyles.sectionContainer}>\r\n//             <div className={homeStyles.headerContainer}>\r\n//               <h1>Anime Activities</h1>\r\n//             </div>\r\n//             <div className={homeStyles.activitiesGrid}>\r\n//               {animeActivities.slice(0, 15).map((activity) => (\r\n//                 <div key={activity._id} className={homeStyles.activityCard}>\r\n//                   <Link to={`/anime/${activity.animeDetails._id}`}>\r\n//                     <div className={homeStyles.activityImage}>\r\n//                       <img\r\n//                         src={activity.animeDetails.images.image}\r\n//                         alt={activity.animeDetails.titles.english}\r\n//                       />\r\n//                     </div>\r\n//                   </Link>\r\n//                   <div className={homeStyles.activityInfo}>\r\n//                     <h3>{activity.animeDetails.titles.english || activity.animeDetails.titles.romaji}</h3>\r\n//                     <p className={homeStyles.activityStatus}>\r\n//                       {activity.status === 'Completed'\r\n//                         ? 'Completed'\r\n//                         : activity.status === 'Planning'\r\n//                         ? `Planning to watch`\r\n//                         : activity.currentEpisode === 0 &&\r\n//                             activity.status === 'Watching'\r\n//                           ? 'Started watching'\r\n//                           : `Episode ${activity.currentEpisode}`}\r\n//                     </p>\r\n//                     <span className={homeStyles.activityTimestamp}>\r\n//                       {new Date(\r\n//                         activity.activityTimestamp\r\n//                       ).toLocaleDateString()}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {watchingAnime.length > 0 && (\r\n//             <div className={homeStyles.progressSection}>\r\n//               <h2>Currently Watching</h2>\r\n//               <div className={homeStyles.progressGrid}>\r\n//                 {watchingAnime.map((activity) => (\r\n//                   <div\r\n//                     key={activity.animeId}\r\n//                     className={homeStyles.progressCard}\r\n//                     onMouseEnter={(event) => handleMouseEnter(activity.animeId, event)}\r\n//                     onMouseLeave={() => setHoveredCard(null)}\r\n//                   >\r\n//                     <Link\r\n//                       to={`/anime/${activity.animeId}`}\r\n//                     >\r\n//                       <img\r\n//                         src={getAnimeById(activity.animeId)?.images.image}\r\n//                         alt={getAnimeById(activity.animeId)?.titles.english}\r\n//                       />\r\n//                     </Link>\r\n//                     <div className={homeStyles.progressInfo}>\r\n//                       {hoveredCard === activity.animeId ? (\r\n//                         <div className={homeStyles.episodeInfo}>\r\n//                           <span>\r\n//                             {activity.currentEpisode} {/* Show the current episode */}\r\n//                           </span>\r\n//                           <span\r\n//                             className={homeStyles.incrementWatchCount}\r\n//                             onClick={() => handleIncrementWatchCount(activity.animeId, 'anime')} // Increment function\r\n//                           >\r\n//                             +\r\n//                           </span>\r\n//                         </div>\r\n//                       ) : (\r\n//                         getAnimeById(activity.animeId)?.nextAiringEpisode?.airingAt && (\r\n//                           <div className={homeStyles.episodeInfo}>\r\n//                             <span>\r\n//                               {getAnimeById(activity.animeId)?.nextAiringEpisode?.episode}\r\n//                             </span>\r\n//                             <span>\r\n//                               {formatTimeUntilNextEpisode(getAnimeById(activity.animeId)?.nextAiringEpisode?.timeUntilAiring)}\r\n//                             </span>\r\n//                           </div>\r\n//                         )\r\n//                       )}\r\n//                     </div>\r\n//                     {hoveredCard === activity.animeId && (\r\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\r\n//                         <h4>{getAnimeById(activity.animeId)?.titles.english || getAnimeById(activity.animeId)?.titles.romaji}</h4>\r\n//                         <p>Progress: {activity.currentEpisode}/{getAnimeById(activity.animeId)?.lengths.Episodes}</p>\r\n//                       </div>\r\n//                     )}\r\n//                   </div>\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </>\r\n//       )}\r\n\r\n//       {mangaActivities.length > 0 && (\r\n//         <>\r\n//           <div className={homeStyles.sectionContainer}>\r\n//             <div className={homeStyles.headerContainer}>\r\n//               <h1>Manga Activities</h1>\r\n//             </div>\r\n//             <div className={homeStyles.activitiesGrid}>\r\n//               {mangaActivities.slice(0, 15).map((activity) => (\r\n//                 <div key={activity._id} className={homeStyles.activityCard}>\r\n//                   <Link to={`/manga/${activity.mangaDetails._id}`}>\r\n//                     <div className={homeStyles.activityImage}>\r\n//                       <img\r\n//                         src={activity.mangaDetails.images.image}\r\n//                         alt={activity.mangaDetails.titles.english}\r\n//                       />\r\n//                     </div>\r\n//                   </Link>\r\n//                   <div className={homeStyles.activityInfo}>\r\n//                     <h3>{activity.mangaDetails.titles.english || activity.mangaDetails.titles.romaji}</h3>\r\n//                     <p className={homeStyles.activityStatus}>\r\n//                       {activity.status === 'Completed'\r\n//                         ? 'Completed'\r\n//                         : activity.status === 'Planning'\r\n//                         ? 'Planning to read'\r\n//                         : activity.currentChapter === 0 &&\r\n//                             activity.status === 'Reading'\r\n//                           ? 'Started reading'\r\n//                           : `Chapter ${activity.currentChapter}`}\r\n//                     </p>\r\n//                     <span className={homeStyles.activityTimestamp}>\r\n//                       {new Date(\r\n//                         activity.activityTimestamp\r\n//                       ).toLocaleDateString()}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {readingManga.length > 0 && (\r\n//             <div className={homeStyles.progressSection}>\r\n//               <h2>Currently Reading</h2>\r\n//               <div className={homeStyles.progressGrid}>\r\n//                 {readingManga.map((activity) => (\r\n//                   <div\r\n//                     key={activity.mangaId}\r\n//                     className={homeStyles.progressCard}\r\n//                     onMouseEnter={(event) => handleMouseEnter(activity.mangaId, event)}\r\n//                     onMouseLeave={() => setHoveredCard(null)}\r\n//                   >\r\n//                     <Link\r\n//                       to={`/manga/${activity.mangaId}`}\r\n//                     >\r\n//                       <img\r\n//                         src={getMangaById(activity.mangaId)?.images.image}\r\n//                         alt={getMangaById(activity.mangaId)?.titles.english}\r\n//                       />\r\n//                     </Link>\r\n//                     <div className={homeStyles.progressInfo}>\r\n//                       {hoveredCard === activity.mangaId && (\r\n//                         <div className={homeStyles.episodeInfo}>\r\n//                           <span>\r\n//                             {activity.currentChapter}\r\n//                           </span>\r\n//                           <span\r\n//                             className={homeStyles.incrementWatchCount}\r\n//                             onClick={() => handleIncrementWatchCount(activity.mangaId, 'manga')}\r\n//                           >\r\n//                             +\r\n//                           </span>\r\n//                         </div>\r\n//                       )}\r\n//                     </div>\r\n//                     {hoveredCard === activity.mangaId && (\r\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\r\n//                         <h4>{getMangaById(activity.mangaId)?.titles.english || getMangaById(activity.mangaId)?.titles.romaji}</h4>\r\n//                         <p>Progress: {activity.currentChapter}/{getMangaById(activity.mangaId)?.lengths.chapters}</p>\r\n//                       </div>\r\n//                     )}\r\n//                   </div>\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </>\r\n//       )}\r\n\r\n//       {animeActivities.length === 0 && mangaActivities.length === 0 && (\r\n//         <div className={homeStyles.emptyState}>\r\n//           <h2>No Recent Activities</h2>\r\n//           <p>\r\n//             Start watching anime or reading manga to see your activities here!\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport data from '../Context/ContextApi';\r\n\r\nconst Home = () => {\r\n  const [activeTab, setActiveTab] = useState('activity');\r\n  const [view, setView] = useState('following');\r\n  const { userData } = useContext(data);\r\n  \r\n  // Mock data for demonstration\r\n  const activities = [\r\n    {\r\n      id: 1,\r\n      user: {\r\n        name: userData.username,\r\n        avatar: `http://localhost:8080${userData?.avatar}`\r\n      },\r\n      type: 'COMPLETED',\r\n      title: 'A Life-Changing Turn',\r\n      timestamp: '3 days ago',\r\n      media: {\r\n        image: '/api/placeholder/150/200'\r\n      }\r\n    },\r\n    {\r\n      id: 2,\r\n      user: {\r\n        name: userData.username,\r\n        avatar: '/api/placeholder/40/40'\r\n      },\r\n      type: 'PLANNING',\r\n      title: 'Honey Lemon Soda',\r\n      timestamp: '4 days ago',\r\n      media: {\r\n        image: '/api/placeholder/150/200'\r\n      }\r\n    }\r\n  ];\r\n\r\n  const airingAnime = [\r\n    {\r\n      id: 1,\r\n      title: 'Series 1',\r\n      episode: 20,\r\n      timeUntil: '1d 20h 56m',\r\n      image: '/api/placeholder/120/180'\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Series 2',\r\n      episode: 18,\r\n      timeUntil: '1d 21h 56m',\r\n      image: '/api/placeholder/120/180'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-900 text-gray-100\">\r\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\r\n        {/* Header Tabs */}\r\n        <div className=\"flex space-x-6 mb-6 border-b border-gray-700\">\r\n          <button\r\n            className={`pb-4 px-2 ${\r\n              activeTab === 'activity'\r\n                ? 'text-blue-400 border-b-2 border-blue-400'\r\n                : 'text-gray-400'\r\n            }`}\r\n            onClick={() => setActiveTab('activity')}\r\n          >\r\n            Activity\r\n          </button>\r\n          <button\r\n            className={`pb-4 px-2 ${\r\n              activeTab === 'airing'\r\n                ? 'text-blue-400 border-b-2 border-blue-400'\r\n                : 'text-gray-400'\r\n            }`}\r\n            onClick={() => setActiveTab('airing')}\r\n          >\r\n            Airing\r\n          </button>\r\n        </div>\r\n\r\n        {/* View Toggle */}\r\n        <div className=\"flex space-x-4 mb-6\">\r\n          <button\r\n            className={`px-3 py-1 rounded ${\r\n              view === 'following'\r\n                ? 'bg-gray-700 text-white'\r\n                : 'text-gray-400'\r\n            }`}\r\n            onClick={() => setView('following')}\r\n          >\r\n            Following\r\n          </button>\r\n          <button\r\n            className={`px-3 py-1 rounded ${\r\n              view === 'global'\r\n                ? 'bg-gray-700 text-white'\r\n                : 'text-gray-400'\r\n            }`}\r\n            onClick={() => setView('global')}\r\n          >\r\n            Global\r\n          </button>\r\n        </div>\r\n\r\n        {/* Status Input */}\r\n        <div className=\"mb-6\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Write a status...\"\r\n            className=\"w-full bg-gray-800 rounded-lg p-4 text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n          />\r\n        </div>\r\n\r\n        {activeTab === 'activity' ? (\r\n          /* Activity Feed */\r\n          <div className=\"space-y-4\">\r\n            {activities.map(activity => (\r\n              <div key={activity.id} className=\"bg-gray-800 rounded-lg p-4\">\r\n                <div className=\"flex items-start space-x-4\">\r\n                  <img\r\n                    src={activity.user.avatar}\r\n                    alt={activity.user.name}\r\n                    className=\"w-10 h-10 rounded-full\"\r\n                  />\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"font-semibold text-blue-400\">{activity.user.name}</span>\r\n                      <span className=\"text-gray-500 text-sm\">{activity.timestamp}</span>\r\n                    </div>\r\n                    <p className=\"text-sm mt-1\">\r\n                      {activity.type === 'COMPLETED' ? 'Completed ' : 'Plans to watch '}\r\n                      <span className=\"text-blue-400\">{activity.title}</span>\r\n                    </p>\r\n                    <img\r\n                      src={activity.media.image}\r\n                      alt={activity.title}\r\n                      className=\"mt-3 rounded-lg w-32 h-44 object-cover\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          /* Airing Schedule */\r\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4\">\r\n            {airingAnime.map(anime => (\r\n              <div key={anime.id} className=\"relative group\">\r\n                <img\r\n                  src={anime.image}\r\n                  alt={anime.title}\r\n                  className=\"w-full rounded-lg\"\r\n                />\r\n                <div className=\"absolute bottom-0 left-0 right-0 bg-black bg-opacity-75 p-2 rounded-b-lg\">\r\n                  <div className=\"text-sm font-semibold\">Ep {anime.episode}</div>\r\n                  <div className=\"text-xs text-gray-400\">{anime.timeUntil}</div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,IAAI,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,UAAU,CAAC;EACtD,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,WAAW,CAAC;EAC7C,MAAM;IAAEa;EAAS,CAAC,GAAGX,UAAU,CAACE,IAAI,CAAC;;EAErC;EACA,MAAMU,UAAU,GAAG,CACjB;IACEC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEJ,QAAQ,CAACK,QAAQ;MACvBC,MAAM,EAAE,wBAAwBN,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEM,MAAM;IAClD,CAAC;IACDC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,sBAAsB;IAC7BC,SAAS,EAAE,YAAY;IACvBC,KAAK,EAAE;MACLC,KAAK,EAAE;IACT;EACF,CAAC,EACD;IACET,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEJ,QAAQ,CAACK,QAAQ;MACvBC,MAAM,EAAE;IACV,CAAC;IACDC,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE,kBAAkB;IACzBC,SAAS,EAAE,YAAY;IACvBC,KAAK,EAAE;MACLC,KAAK,EAAE;IACT;EACF,CAAC,CACF;EAED,MAAMC,WAAW,GAAG,CAClB;IACEV,EAAE,EAAE,CAAC;IACLM,KAAK,EAAE,UAAU;IACjBK,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,YAAY;IACvBH,KAAK,EAAE;EACT,CAAC,EACD;IACET,EAAE,EAAE,CAAC;IACLM,KAAK,EAAE,UAAU;IACjBK,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,YAAY;IACvBH,KAAK,EAAE;EACT,CAAC,CACF;EAED,oBACElB,OAAA;IAAKsB,SAAS,EAAC,wCAAwC;IAAAC,QAAA,eACrDvB,OAAA;MAAKsB,SAAS,EAAC,6BAA6B;MAAAC,QAAA,gBAE1CvB,OAAA;QAAKsB,SAAS,EAAC,8CAA8C;QAAAC,QAAA,gBAC3DvB,OAAA;UACEsB,SAAS,EAAE,aACTnB,SAAS,KAAK,UAAU,GACpB,0CAA0C,GAC1C,eAAe,EAClB;UACHqB,OAAO,EAAEA,CAAA,KAAMpB,YAAY,CAAC,UAAU,CAAE;UAAAmB,QAAA,EACzC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT5B,OAAA;UACEsB,SAAS,EAAE,aACTnB,SAAS,KAAK,QAAQ,GAClB,0CAA0C,GAC1C,eAAe,EAClB;UACHqB,OAAO,EAAEA,CAAA,KAAMpB,YAAY,CAAC,QAAQ,CAAE;UAAAmB,QAAA,EACvC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAGN5B,OAAA;QAAKsB,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAClCvB,OAAA;UACEsB,SAAS,EAAE,qBACTjB,IAAI,KAAK,WAAW,GAChB,wBAAwB,GACxB,eAAe,EAClB;UACHmB,OAAO,EAAEA,CAAA,KAAMlB,OAAO,CAAC,WAAW,CAAE;UAAAiB,QAAA,EACrC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT5B,OAAA;UACEsB,SAAS,EAAE,qBACTjB,IAAI,KAAK,QAAQ,GACb,wBAAwB,GACxB,eAAe,EAClB;UACHmB,OAAO,EAAEA,CAAA,KAAMlB,OAAO,CAAC,QAAQ,CAAE;UAAAiB,QAAA,EAClC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAGN5B,OAAA;QAAKsB,SAAS,EAAC,MAAM;QAAAC,QAAA,eACnBvB,OAAA;UACEc,IAAI,EAAC,MAAM;UACXe,WAAW,EAAC,mBAAmB;UAC/BP,SAAS,EAAC;QAAqG;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EAELzB,SAAS,KAAK,UAAU;MAAA;MACvB;MACAH,OAAA;QAAKsB,SAAS,EAAC,WAAW;QAAAC,QAAA,EACvBf,UAAU,CAACsB,GAAG,CAACC,QAAQ,iBACtB/B,OAAA;UAAuBsB,SAAS,EAAC,4BAA4B;UAAAC,QAAA,eAC3DvB,OAAA;YAAKsB,SAAS,EAAC,4BAA4B;YAAAC,QAAA,gBACzCvB,OAAA;cACEgC,GAAG,EAAED,QAAQ,CAACrB,IAAI,CAACG,MAAO;cAC1BoB,GAAG,EAAEF,QAAQ,CAACrB,IAAI,CAACC,IAAK;cACxBW,SAAS,EAAC;YAAwB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnC,CAAC,eACF5B,OAAA;cAAKsB,SAAS,EAAC,QAAQ;cAAAC,QAAA,gBACrBvB,OAAA;gBAAKsB,SAAS,EAAC,sBAAsB;gBAAAC,QAAA,gBACnCvB,OAAA;kBAAMsB,SAAS,EAAC,6BAA6B;kBAAAC,QAAA,EAAEQ,QAAQ,CAACrB,IAAI,CAACC;gBAAI;kBAAAc,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC,eACzE5B,OAAA;kBAAMsB,SAAS,EAAC,uBAAuB;kBAAAC,QAAA,EAAEQ,QAAQ,CAACf;gBAAS;kBAAAS,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChE,CAAC,eACN5B,OAAA;gBAAGsB,SAAS,EAAC,cAAc;gBAAAC,QAAA,GACxBQ,QAAQ,CAACjB,IAAI,KAAK,WAAW,GAAG,YAAY,GAAG,iBAAiB,eACjEd,OAAA;kBAAMsB,SAAS,EAAC,eAAe;kBAAAC,QAAA,EAAEQ,QAAQ,CAAChB;gBAAK;kBAAAU,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACtD,CAAC,eACJ5B,OAAA;gBACEgC,GAAG,EAAED,QAAQ,CAACd,KAAK,CAACC,KAAM;gBAC1Be,GAAG,EAAEF,QAAQ,CAAChB,KAAM;gBACpBO,SAAS,EAAC;cAAwC;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnD,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QAAC,GAtBEG,QAAQ,CAACtB,EAAE;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAuBhB,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;MAAA;MAEN;MACA5B,OAAA;QAAKsB,SAAS,EAAC,qEAAqE;QAAAC,QAAA,EACjFJ,WAAW,CAACW,GAAG,CAACI,KAAK,iBACpBlC,OAAA;UAAoBsB,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC5CvB,OAAA;YACEgC,GAAG,EAAEE,KAAK,CAAChB,KAAM;YACjBe,GAAG,EAAEC,KAAK,CAACnB,KAAM;YACjBO,SAAS,EAAC;UAAmB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B,CAAC,eACF5B,OAAA;YAAKsB,SAAS,EAAC,0EAA0E;YAAAC,QAAA,gBACvFvB,OAAA;cAAKsB,SAAS,EAAC,uBAAuB;cAAAC,QAAA,GAAC,KAAG,EAACW,KAAK,CAACd,OAAO;YAAA;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC/D5B,OAAA;cAAKsB,SAAS,EAAC,uBAAuB;cAAAC,QAAA,EAAEW,KAAK,CAACb;YAAS;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3D,CAAC;QAAA,GATEM,KAAK,CAACzB,EAAE;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUb,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAnKID,IAAI;AAAAkC,EAAA,GAAJlC,IAAI;AAqKV,eAAeA,IAAI;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}