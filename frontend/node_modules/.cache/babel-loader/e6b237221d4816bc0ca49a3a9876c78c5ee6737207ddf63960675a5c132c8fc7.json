{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Documents\\\\anime_website\\\\anime_website\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useContext, useCallback } from 'react';\n// import { Link } from 'react-router-dom';\n// import axiosInstance from './../utils/axiosConfig';\n// import { useAnimeContext } from '../Context/AnimeContext';\n// import { useMangaContext } from '../Context/MangaContext';\n// import data from '../Context/ContextApi';\n// import homeStyles from '../styles/pages/Home.module.css';\n// import { fetchWithErrorHandling } from '../utils/apiUtils';\n\n// const Home = () => {\n//   const { animeList } = useAnimeContext();\n//   const { mangaList } = useMangaContext();\n//   const { userData } = useContext(data);\n//   const [latestActivities, setLatestActivities] = useState([]);\n//   const [userAnimeList, setUserAnimeList] = useState([]);\n//   const [userMangaList, setUserMangaList] = useState([]);\n//   const [hoveredCard, setHoveredCard] = useState(null);\n//   const [popupPosition, setPopupPosition] = useState({ left: '100%', top: '0' });\n\n//   const fetchLatestActivities = useCallback(async () => {\n//     try {\n//       const data = await fetchWithErrorHandling(`/latest-activities/${userData._id}`);\n//       const sortedActivities = data.sort(\n//         (a, b) => new Date(b.activityTimestamp) - new Date(a.activityTimestamp)\n//       );\n//       setLatestActivities(sortedActivities);\n//     } catch (error) {\n//       setLatestActivities([]);\n//     }\n//   }, [userData._id]);\n\n//   const fetchUserList = useCallback(async () => {\n//     try {\n//       const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\n//       setUserAnimeList(data.animes);\n//       setUserMangaList(data.mangas);\n//     } catch (error) {\n//       setUserAnimeList([]);\n//       setUserMangaList([]);\n//     }\n//   }, [userData._id]);\n\n//   useEffect(() => {\n//     fetchLatestActivities();\n//     fetchUserList();\n//   }, [userData._id, fetchLatestActivities, fetchUserList]);\n\n//   const getAnimeById = (animeId) => {\n//     return animeList.find((anime) => anime._id === animeId);\n//   };\n\n//   const getMangaById = (mangaId) => {\n//     return mangaList.find((manga) => manga._id === mangaId);\n//   };\n\n//   const filterAnimeByWatching = () => {\n//     return userAnimeList\n//       .filter((userAnime) => userAnime.status === 'Watching')\n//       .map((userAnime) => ({\n//         animeId: userAnime.animeId,\n//         currentEpisode: userAnime.currentEpisode,\n//         status: userAnime.status,\n//         animeDetails: getAnimeById(userAnime.animeId),\n//       }));\n//   };\n\n//   const filterMangaByReading = () => {\n//     return userMangaList\n//       .filter((userManga) => userManga.status === 'Reading')\n//       .map((userManga) => ({\n//         mangaId: userManga.mangaId,\n//         currentChapter: userManga.currentChapter,\n//         currentVolume: userManga.currentVolume,\n//         status: userManga.status,\n//         mangaDetails: getMangaById(userManga.mangaId),\n//       }));\n//   };\n\n//   const handleIncrementWatchCount = async (id, type) => {\n//     console.log('Incrementing count:', { id, type });\n\n//     if (type === 'anime') {\n//       const currentAnime = userAnimeList.find(anime => anime.animeId === id);\n//       console.log('Current anime:', currentAnime);\n\n//       if (currentAnime) {\n//         const newEpisodeCount = currentAnime.currentEpisode + 1;\n\n//         // Update the local state immediately\n//         setUserAnimeList((prevList) =>\n//           prevList.map((anime) =>\n//             anime.animeId === id\n//               ? { ...anime, currentEpisode: newEpisodeCount }\n//               : anime\n//           )\n//         );\n\n//         try {\n//           // Make an API call to update the current episode on the backend\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateAnime`, {\n//             animeId: id,\n//             status: userData.status || 'Watching',\n//             currentEpisode: newEpisodeCount,\n//           });\n\n//           if (!response.data) {\n//             console.error('Failed to update on the server');\n//           } else {\n//             fetchLatestActivities();\n//           }\n//         } catch (error) {\n//           console.error('Error updating user progress:', error);\n//         }\n//       }\n//     }\n//     if (type === 'manga') {\n//       const currentManga = userMangaList.find(manga => manga.mangaId === id);\n//       console.log('Current manga:', currentManga);\n\n//       if (currentManga) {\n//         const newChapterCount = currentManga.currentChapter + 1;\n//         const volumeCount = currentManga.currentVolume;\n\n//         // Update the local state immediately\n//         setUserMangaList((prevList) =>\n//           prevList.map((manga) =>\n//             manga.mangaId === id\n//               ? { ...manga, currentChapter: newChapterCount, currentVolume: volumeCount }\n//               : manga\n//           )\n//         );\n\n//         console.log('UserMangaList: ', userMangaList);\n\n//         try {\n//           // Make an API call to update the current chapter on the backend\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateManga`, {\n//             mangaId: id,\n//             status: userData.status || 'Reading',\n//             currentChapter: newChapterCount,\n//             currentVolume: volumeCount\n//           });\n\n//           if (!response.data) {\n//             console.log('Failed to update on the server');\n//           } else {\n//             fetchLatestActivities();\n//           }\n//         } catch (error) {\n//           console.error('Error updating user progress:', error);\n//         }\n//       }\n//     }\n//   };\n\n//   const animeActivities = latestActivities.filter(\n//     (activity) => activity.animeDetails\n//   );\n//   const mangaActivities = latestActivities.filter(\n//     (activity) => activity.mangaDetails\n//   );\n//   const watchingAnime = filterAnimeByWatching();\n//   const readingManga = filterMangaByReading();\n\n//   const formatTimeUntilNextEpisode = (timeUntilAiring) => {\n//     const days = Math.floor(timeUntilAiring / (3600 * 24));\n//     const hours = Math.floor((timeUntilAiring % (3600 * 24)) / 3600);\n//     const minutes = Math.floor((timeUntilAiring % 3600) / 60);\n\n//     return `${days}d ${hours}h ${minutes}m`;\n//   };\n\n//   const handleMouseEnter = (animeId, event) => {\n//     const popupWidth = 300; // Set this to the width of your popup\n//     const cardElement = event.currentTarget; // Get the card element\n\n//     const cardRect = cardElement.getBoundingClientRect(); // Get the card's position\n\n//     // Get the activity page width\n//     const activityPage = document.querySelector(`.${homeStyles.activityPage}`);\n//     const activityPageRect = activityPage.getBoundingClientRect();\n//     const activityPageRightEdge = activityPageRect.right;\n\n//     // Calculate the right edge of the popup\n//     const rightEdge = cardRect.right + popupWidth;\n\n//     if (rightEdge > activityPageRightEdge) {\n//       // If it overflows, position it to the left of the card\n//       setPopupPosition({\n//         left: `-215%`, // Position to the left\n//         top: `0`, // Align with the card's top\n//       });\n//     } else {\n//       // Otherwise, position it to the right of the card\n//       setPopupPosition({\n//         left: `100%`, // Position to the right\n//         top: `0`, // Align with the card's top\n//       });\n//     }\n\n//     setHoveredCard(animeId);\n//   };\n\n//   return (\n//     <div className={homeStyles.activityPage}>\n//       {animeActivities.length > 0 && (\n//         <>\n//           <div className={homeStyles.sectionContainer}>\n//             <div className={homeStyles.headerContainer}>\n//               <h1>Anime Activities</h1>\n//             </div>\n//             <div className={homeStyles.activitiesGrid}>\n//               {animeActivities.slice(0, 15).map((activity) => (\n//                 <div key={activity._id} className={homeStyles.activityCard}>\n//                   <Link to={`/anime/${activity.animeDetails._id}`}>\n//                     <div className={homeStyles.activityImage}>\n//                       <img\n//                         src={activity.animeDetails.images.image}\n//                         alt={activity.animeDetails.titles.english}\n//                       />\n//                     </div>\n//                   </Link>\n//                   <div className={homeStyles.activityInfo}>\n//                     <h3>{activity.animeDetails.titles.english || activity.animeDetails.titles.romaji}</h3>\n//                     <p className={homeStyles.activityStatus}>\n//                       {activity.status === 'Completed'\n//                         ? 'Completed'\n//                         : activity.status === 'Planning'\n//                         ? `Planning to watch`\n//                         : activity.currentEpisode === 0 &&\n//                             activity.status === 'Watching'\n//                           ? 'Started watching'\n//                           : `Episode ${activity.currentEpisode}`}\n//                     </p>\n//                     <span className={homeStyles.activityTimestamp}>\n//                       {new Date(\n//                         activity.activityTimestamp\n//                       ).toLocaleDateString()}\n//                     </span>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           {watchingAnime.length > 0 && (\n//             <div className={homeStyles.progressSection}>\n//               <h2>Currently Watching</h2>\n//               <div className={homeStyles.progressGrid}>\n//                 {watchingAnime.map((activity) => (\n//                   <div\n//                     key={activity.animeId}\n//                     className={homeStyles.progressCard}\n//                     onMouseEnter={(event) => handleMouseEnter(activity.animeId, event)}\n//                     onMouseLeave={() => setHoveredCard(null)}\n//                   >\n//                     <Link\n//                       to={`/anime/${activity.animeId}`}\n//                     >\n//                       <img\n//                         src={getAnimeById(activity.animeId)?.images.image}\n//                         alt={getAnimeById(activity.animeId)?.titles.english}\n//                       />\n//                     </Link>\n//                     <div className={homeStyles.progressInfo}>\n//                       {hoveredCard === activity.animeId ? (\n//                         <div className={homeStyles.episodeInfo}>\n//                           <span>\n//                             {activity.currentEpisode} {/* Show the current episode */}\n//                           </span>\n//                           <span\n//                             className={homeStyles.incrementWatchCount}\n//                             onClick={() => handleIncrementWatchCount(activity.animeId, 'anime')} // Increment function\n//                           >\n//                             +\n//                           </span>\n//                         </div>\n//                       ) : (\n//                         getAnimeById(activity.animeId)?.nextAiringEpisode?.airingAt && (\n//                           <div className={homeStyles.episodeInfo}>\n//                             <span>\n//                               {getAnimeById(activity.animeId)?.nextAiringEpisode?.episode}\n//                             </span>\n//                             <span>\n//                               {formatTimeUntilNextEpisode(getAnimeById(activity.animeId)?.nextAiringEpisode?.timeUntilAiring)}\n//                             </span>\n//                           </div>\n//                         )\n//                       )}\n//                     </div>\n//                     {hoveredCard === activity.animeId && (\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\n//                         <h4>{getAnimeById(activity.animeId)?.titles.english || getAnimeById(activity.animeId)?.titles.romaji}</h4>\n//                         <p>Progress: {activity.currentEpisode}/{getAnimeById(activity.animeId)?.lengths.Episodes}</p>\n//                       </div>\n//                     )}\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n//           )}\n//         </>\n//       )}\n\n//       {mangaActivities.length > 0 && (\n//         <>\n//           <div className={homeStyles.sectionContainer}>\n//             <div className={homeStyles.headerContainer}>\n//               <h1>Manga Activities</h1>\n//             </div>\n//             <div className={homeStyles.activitiesGrid}>\n//               {mangaActivities.slice(0, 15).map((activity) => (\n//                 <div key={activity._id} className={homeStyles.activityCard}>\n//                   <Link to={`/manga/${activity.mangaDetails._id}`}>\n//                     <div className={homeStyles.activityImage}>\n//                       <img\n//                         src={activity.mangaDetails.images.image}\n//                         alt={activity.mangaDetails.titles.english}\n//                       />\n//                     </div>\n//                   </Link>\n//                   <div className={homeStyles.activityInfo}>\n//                     <h3>{activity.mangaDetails.titles.english || activity.mangaDetails.titles.romaji}</h3>\n//                     <p className={homeStyles.activityStatus}>\n//                       {activity.status === 'Completed'\n//                         ? 'Completed'\n//                         : activity.status === 'Planning'\n//                         ? 'Planning to read'\n//                         : activity.currentChapter === 0 &&\n//                             activity.status === 'Reading'\n//                           ? 'Started reading'\n//                           : `Chapter ${activity.currentChapter}`}\n//                     </p>\n//                     <span className={homeStyles.activityTimestamp}>\n//                       {new Date(\n//                         activity.activityTimestamp\n//                       ).toLocaleDateString()}\n//                     </span>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           {readingManga.length > 0 && (\n//             <div className={homeStyles.progressSection}>\n//               <h2>Currently Reading</h2>\n//               <div className={homeStyles.progressGrid}>\n//                 {readingManga.map((activity) => (\n//                   <div\n//                     key={activity.mangaId}\n//                     className={homeStyles.progressCard}\n//                     onMouseEnter={(event) => handleMouseEnter(activity.mangaId, event)}\n//                     onMouseLeave={() => setHoveredCard(null)}\n//                   >\n//                     <Link\n//                       to={`/manga/${activity.mangaId}`}\n//                     >\n//                       <img\n//                         src={getMangaById(activity.mangaId)?.images.image}\n//                         alt={getMangaById(activity.mangaId)?.titles.english}\n//                       />\n//                     </Link>\n//                     <div className={homeStyles.progressInfo}>\n//                       {hoveredCard === activity.mangaId && (\n//                         <div className={homeStyles.episodeInfo}>\n//                           <span>\n//                             {activity.currentChapter}\n//                           </span>\n//                           <span\n//                             className={homeStyles.incrementWatchCount}\n//                             onClick={() => handleIncrementWatchCount(activity.mangaId, 'manga')}\n//                           >\n//                             +\n//                           </span>\n//                         </div>\n//                       )}\n//                     </div>\n//                     {hoveredCard === activity.mangaId && (\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\n//                         <h4>{getMangaById(activity.mangaId)?.titles.english || getMangaById(activity.mangaId)?.titles.romaji}</h4>\n//                         <p>Progress: {activity.currentChapter}/{getMangaById(activity.mangaId)?.lengths.chapters}</p>\n//                       </div>\n//                     )}\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n//           )}\n//         </>\n//       )}\n\n//       {animeActivities.length === 0 && mangaActivities.length === 0 && (\n//         <div className={homeStyles.emptyState}>\n//           <h2>No Recent Activities</h2>\n//           <p>\n//             Start watching anime or reading manga to see your activities here!\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Home;\n\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport data from '../Context/ContextApi';\nimport styles from '../styles/pages/Home.module.css';\nimport { useAnimeContext } from '../Context/AnimeContext';\nimport { useMangaContext } from '../Context/MangaContext';\nimport { fetchWithErrorHandling } from '../utils/apiUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const {\n    animeList\n  } = useAnimeContext();\n  const {\n    mangaList\n  } = useMangaContext();\n  const [activeTab, setActiveTab] = useState('activity');\n  const [view, setView] = useState('following');\n  const {\n    userData\n  } = useContext(data);\n  const [latestActivities, setLatestActivities] = useState([]);\n  const [userAnimeList, setUserAnimeList] = useState([]);\n  const [userMangaList, setUserMangaList] = useState([]);\n  const fetchLatestActivities = useCallback(async () => {\n    try {\n      const data = await fetchWithErrorHandling(`/latest-activities/${userData._id}`);\n      const sortedActivities = data.sort((a, b) => new Date(b.activityTimestamp) - new Date(a.activityTimestamp));\n      setLatestActivities(sortedActivities);\n    } catch (error) {\n      setLatestActivities([]);\n    }\n  }, [userData._id]);\n  const fetchUserList = useCallback(async () => {\n    try {\n      const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\n      setUserAnimeList(data.animes);\n      setUserMangaList(data.mangas);\n    } catch (error) {\n      setUserAnimeList([]);\n      setUserMangaList([]);\n    }\n  }, [userData._id]);\n  useEffect(() => {\n    fetchLatestActivities();\n    fetchUserList();\n  }, [userData._id, fetchLatestActivities, fetchUserList]);\n  const getAnimeById = animeId => {\n    return animeList.find(anime => anime._id === animeId);\n  };\n  const getMangaById = mangaId => {\n    return mangaList.find(manga => manga._id === mangaId);\n  };\n  const filterAnimeByWatching = () => {\n    return userAnimeList.filter(userAnime => userAnime.status === 'Watching').map(userAnime => ({\n      animeId: userAnime.animeId,\n      currentEpisode: userAnime.currentEpisode,\n      status: userAnime.status,\n      animeDetails: getAnimeById(userAnime.animeId)\n    }));\n  };\n  const filterMangaByReading = () => {\n    return userMangaList.filter(userManga => userManga.status === 'Reading').map(userManga => ({\n      mangaId: userManga.mangaId,\n      currentChapter: userManga.currentChapter,\n      currentVolume: userManga.currentVolume,\n      status: userManga.status,\n      mangaDetails: getMangaById(userManga.mangaId)\n    }));\n  };\n  const animeActivities = latestActivities.filter(activity => activity.animeDetails);\n  const mangaActivities = latestActivities.filter(activity => activity.mangaDetails);\n  const watchingAnime = filterAnimeByWatching();\n  const readingManga = filterMangaByReading();\n\n  // Mock data for demonstration\n  const activities = [{\n    id: 1,\n    user: {\n      name: userData.username,\n      avatar: `http://localhost:8080${userData === null || userData === void 0 ? void 0 : userData.avatar}`\n    },\n    type: 'COMPLETED',\n    title: 'A Life-Changing Turn',\n    timestamp: '3 days ago',\n    media: {\n      image: '/api/placeholder/150/200'\n    }\n  }, {\n    id: 2,\n    user: {\n      name: userData.username,\n      avatar: `http://localhost:8080${userData === null || userData === void 0 ? void 0 : userData.avatar}`\n    },\n    type: 'PLANNING',\n    title: 'Honey Lemon Soda',\n    timestamp: '4 days ago',\n    media: {\n      image: '/api/placeholder/150/200'\n    }\n  }];\n  const airingAnime = [{\n    id: 1,\n    title: 'Series 1',\n    episode: 20,\n    timeUntil: '1d 20h 56m',\n    image: '/api/placeholder/120/180'\n  }, {\n    id: 2,\n    title: 'Series 2',\n    episode: 18,\n    timeUntil: '1d 21h 56m',\n    image: '/api/placeholder/120/180'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tabContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.tab} ${activeTab === 'activity' ? styles.active : ''}`,\n        onClick: () => setActiveTab('activity'),\n        children: \"Activity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.tab} ${activeTab === 'airing' ? styles.active : ''}`,\n        onClick: () => setActiveTab('airing'),\n        children: \"Airing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.viewToggle,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.toggleButton} ${view === 'following' ? styles.active : ''}`,\n        onClick: () => setView('following'),\n        children: \"Following\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.toggleButton} ${view === 'global' ? styles.active : ''}`,\n        onClick: () => setView('global'),\n        children: \"Global\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Write a status...\",\n      className: styles.statusInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }, this), activeTab === 'activity' ?\n    /*#__PURE__*/\n    /* Activity Feed */\n    _jsxDEV(\"div\", {\n      className: styles.activityFeed,\n      children: animeActivities.map(activity => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.activityCard,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.activityHeader,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://localhost:8080${userData === null || userData === void 0 ? void 0 : userData.avatar}`,\n            alt: activity.user.name,\n            className: styles.avatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.activityInfo,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.activityMeta,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.username,\n                children: activity.user.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.timestamp,\n                children: activity.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 595,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: styles.activityContent,\n              children: [activity.type === 'COMPLETED' ? 'Completed ' : 'Plans to watch ', /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.username,\n                children: activity.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: activity.media.image,\n              alt: activity.title,\n              className: styles.mediaImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 15\n        }, this)\n      }, activity.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    /* Airing Schedule */\n    _jsxDEV(\"div\", {\n      className: styles.airingGrid,\n      children: airingAnime.map(anime => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.airingCard,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: anime.image,\n          alt: anime.title,\n          className: styles.airingImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.airingInfo,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.episodeNumber,\n            children: [\"Ep \", anime.episode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.airingTime,\n            children: anime.timeUntil\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 15\n        }, this)]\n      }, anime.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 541,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"wHzctk3GgLPCDYHI5Nfktk2SrBI=\", false, function () {\n  return [useAnimeContext, useMangaContext];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useCallback","Link","data","styles","useAnimeContext","useMangaContext","fetchWithErrorHandling","jsxDEV","_jsxDEV","Home","_s","animeList","mangaList","activeTab","setActiveTab","view","setView","userData","latestActivities","setLatestActivities","userAnimeList","setUserAnimeList","userMangaList","setUserMangaList","fetchLatestActivities","_id","sortedActivities","sort","a","b","Date","activityTimestamp","error","fetchUserList","animes","mangas","getAnimeById","animeId","find","anime","getMangaById","mangaId","manga","filterAnimeByWatching","filter","userAnime","status","map","currentEpisode","animeDetails","filterMangaByReading","userManga","currentChapter","currentVolume","mangaDetails","animeActivities","activity","mangaActivities","watchingAnime","readingManga","activities","id","user","name","username","avatar","type","title","timestamp","media","image","airingAnime","episode","timeUntil","className","container","children","tabContainer","tab","active","onClick","fileName","_jsxFileName","lineNumber","columnNumber","viewToggle","toggleButton","placeholder","statusInput","activityFeed","activityCard","activityHeader","src","alt","activityInfo","activityMeta","activityContent","mediaImage","airingGrid","airingCard","airingImage","airingInfo","episodeNumber","airingTime","_c","$RefreshReg$"],"sources":["C:/Users/david/Documents/anime_website/anime_website/frontend/src/pages/Home.js"],"sourcesContent":["// import React, { useState, useEffect, useContext, useCallback } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import axiosInstance from './../utils/axiosConfig';\r\n// import { useAnimeContext } from '../Context/AnimeContext';\r\n// import { useMangaContext } from '../Context/MangaContext';\r\n// import data from '../Context/ContextApi';\r\n// import homeStyles from '../styles/pages/Home.module.css';\r\n// import { fetchWithErrorHandling } from '../utils/apiUtils';\r\n\r\n// const Home = () => {\r\n//   const { animeList } = useAnimeContext();\r\n//   const { mangaList } = useMangaContext();\r\n//   const { userData } = useContext(data);\r\n//   const [latestActivities, setLatestActivities] = useState([]);\r\n//   const [userAnimeList, setUserAnimeList] = useState([]);\r\n//   const [userMangaList, setUserMangaList] = useState([]);\r\n//   const [hoveredCard, setHoveredCard] = useState(null);\r\n//   const [popupPosition, setPopupPosition] = useState({ left: '100%', top: '0' });\r\n\r\n//   const fetchLatestActivities = useCallback(async () => {\r\n//     try {\r\n//       const data = await fetchWithErrorHandling(`/latest-activities/${userData._id}`);\r\n//       const sortedActivities = data.sort(\r\n//         (a, b) => new Date(b.activityTimestamp) - new Date(a.activityTimestamp)\r\n//       );\r\n//       setLatestActivities(sortedActivities);\r\n//     } catch (error) {\r\n//       setLatestActivities([]);\r\n//     }\r\n//   }, [userData._id]);\r\n\r\n//   const fetchUserList = useCallback(async () => {\r\n//     try {\r\n//       const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\r\n//       setUserAnimeList(data.animes);\r\n//       setUserMangaList(data.mangas);\r\n//     } catch (error) {\r\n//       setUserAnimeList([]);\r\n//       setUserMangaList([]);\r\n//     }\r\n//   }, [userData._id]);\r\n\r\n//   useEffect(() => {\r\n//     fetchLatestActivities();\r\n//     fetchUserList();\r\n//   }, [userData._id, fetchLatestActivities, fetchUserList]);\r\n\r\n//   const getAnimeById = (animeId) => {\r\n//     return animeList.find((anime) => anime._id === animeId);\r\n//   };\r\n\r\n//   const getMangaById = (mangaId) => {\r\n//     return mangaList.find((manga) => manga._id === mangaId);\r\n//   };\r\n\r\n//   const filterAnimeByWatching = () => {\r\n//     return userAnimeList\r\n//       .filter((userAnime) => userAnime.status === 'Watching')\r\n//       .map((userAnime) => ({\r\n//         animeId: userAnime.animeId,\r\n//         currentEpisode: userAnime.currentEpisode,\r\n//         status: userAnime.status,\r\n//         animeDetails: getAnimeById(userAnime.animeId),\r\n//       }));\r\n//   };\r\n\r\n//   const filterMangaByReading = () => {\r\n//     return userMangaList\r\n//       .filter((userManga) => userManga.status === 'Reading')\r\n//       .map((userManga) => ({\r\n//         mangaId: userManga.mangaId,\r\n//         currentChapter: userManga.currentChapter,\r\n//         currentVolume: userManga.currentVolume,\r\n//         status: userManga.status,\r\n//         mangaDetails: getMangaById(userManga.mangaId),\r\n//       }));\r\n//   };\r\n\r\n//   const handleIncrementWatchCount = async (id, type) => {\r\n//     console.log('Incrementing count:', { id, type });\r\n\r\n//     if (type === 'anime') {\r\n//       const currentAnime = userAnimeList.find(anime => anime.animeId === id);\r\n//       console.log('Current anime:', currentAnime);\r\n\r\n//       if (currentAnime) {\r\n//         const newEpisodeCount = currentAnime.currentEpisode + 1;\r\n\r\n//         // Update the local state immediately\r\n//         setUserAnimeList((prevList) =>\r\n//           prevList.map((anime) =>\r\n//             anime.animeId === id\r\n//               ? { ...anime, currentEpisode: newEpisodeCount }\r\n//               : anime\r\n//           )\r\n//         );\r\n\r\n//         try {\r\n//           // Make an API call to update the current episode on the backend\r\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateAnime`, {\r\n//             animeId: id,\r\n//             status: userData.status || 'Watching',\r\n//             currentEpisode: newEpisodeCount,\r\n//           });\r\n\r\n//           if (!response.data) {\r\n//             console.error('Failed to update on the server');\r\n//           } else {\r\n//             fetchLatestActivities();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Error updating user progress:', error);\r\n//         }\r\n//       }\r\n//     }\r\n//     if (type === 'manga') {\r\n//       const currentManga = userMangaList.find(manga => manga.mangaId === id);\r\n//       console.log('Current manga:', currentManga);\r\n\r\n//       if (currentManga) {\r\n//         const newChapterCount = currentManga.currentChapter + 1;\r\n//         const volumeCount = currentManga.currentVolume;\r\n\r\n//         // Update the local state immediately\r\n//         setUserMangaList((prevList) =>\r\n//           prevList.map((manga) =>\r\n//             manga.mangaId === id\r\n//               ? { ...manga, currentChapter: newChapterCount, currentVolume: volumeCount }\r\n//               : manga\r\n//           )\r\n//         );\r\n\r\n//         console.log('UserMangaList: ', userMangaList);\r\n\r\n//         try {\r\n//           // Make an API call to update the current chapter on the backend\r\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateManga`, {\r\n//             mangaId: id,\r\n//             status: userData.status || 'Reading',\r\n//             currentChapter: newChapterCount,\r\n//             currentVolume: volumeCount\r\n//           });\r\n\r\n//           if (!response.data) {\r\n//             console.log('Failed to update on the server');\r\n//           } else {\r\n//             fetchLatestActivities();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Error updating user progress:', error);\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const animeActivities = latestActivities.filter(\r\n//     (activity) => activity.animeDetails\r\n//   );\r\n//   const mangaActivities = latestActivities.filter(\r\n//     (activity) => activity.mangaDetails\r\n//   );\r\n//   const watchingAnime = filterAnimeByWatching();\r\n//   const readingManga = filterMangaByReading();\r\n\r\n//   const formatTimeUntilNextEpisode = (timeUntilAiring) => {\r\n//     const days = Math.floor(timeUntilAiring / (3600 * 24));\r\n//     const hours = Math.floor((timeUntilAiring % (3600 * 24)) / 3600);\r\n//     const minutes = Math.floor((timeUntilAiring % 3600) / 60);\r\n\r\n//     return `${days}d ${hours}h ${minutes}m`;\r\n//   };\r\n\r\n//   const handleMouseEnter = (animeId, event) => {\r\n//     const popupWidth = 300; // Set this to the width of your popup\r\n//     const cardElement = event.currentTarget; // Get the card element\r\n\r\n//     const cardRect = cardElement.getBoundingClientRect(); // Get the card's position\r\n\r\n//     // Get the activity page width\r\n//     const activityPage = document.querySelector(`.${homeStyles.activityPage}`);\r\n//     const activityPageRect = activityPage.getBoundingClientRect();\r\n//     const activityPageRightEdge = activityPageRect.right;\r\n\r\n//     // Calculate the right edge of the popup\r\n//     const rightEdge = cardRect.right + popupWidth;\r\n\r\n//     if (rightEdge > activityPageRightEdge) {\r\n//       // If it overflows, position it to the left of the card\r\n//       setPopupPosition({\r\n//         left: `-215%`, // Position to the left\r\n//         top: `0`, // Align with the card's top\r\n//       });\r\n//     } else {\r\n//       // Otherwise, position it to the right of the card\r\n//       setPopupPosition({\r\n//         left: `100%`, // Position to the right\r\n//         top: `0`, // Align with the card's top\r\n//       });\r\n//     }\r\n\r\n//     setHoveredCard(animeId);\r\n//   };\r\n\r\n//   return (\r\n//     <div className={homeStyles.activityPage}>\r\n//       {animeActivities.length > 0 && (\r\n//         <>\r\n//           <div className={homeStyles.sectionContainer}>\r\n//             <div className={homeStyles.headerContainer}>\r\n//               <h1>Anime Activities</h1>\r\n//             </div>\r\n//             <div className={homeStyles.activitiesGrid}>\r\n//               {animeActivities.slice(0, 15).map((activity) => (\r\n//                 <div key={activity._id} className={homeStyles.activityCard}>\r\n//                   <Link to={`/anime/${activity.animeDetails._id}`}>\r\n//                     <div className={homeStyles.activityImage}>\r\n//                       <img\r\n//                         src={activity.animeDetails.images.image}\r\n//                         alt={activity.animeDetails.titles.english}\r\n//                       />\r\n//                     </div>\r\n//                   </Link>\r\n//                   <div className={homeStyles.activityInfo}>\r\n//                     <h3>{activity.animeDetails.titles.english || activity.animeDetails.titles.romaji}</h3>\r\n//                     <p className={homeStyles.activityStatus}>\r\n//                       {activity.status === 'Completed'\r\n//                         ? 'Completed'\r\n//                         : activity.status === 'Planning'\r\n//                         ? `Planning to watch`\r\n//                         : activity.currentEpisode === 0 &&\r\n//                             activity.status === 'Watching'\r\n//                           ? 'Started watching'\r\n//                           : `Episode ${activity.currentEpisode}`}\r\n//                     </p>\r\n//                     <span className={homeStyles.activityTimestamp}>\r\n//                       {new Date(\r\n//                         activity.activityTimestamp\r\n//                       ).toLocaleDateString()}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {watchingAnime.length > 0 && (\r\n//             <div className={homeStyles.progressSection}>\r\n//               <h2>Currently Watching</h2>\r\n//               <div className={homeStyles.progressGrid}>\r\n//                 {watchingAnime.map((activity) => (\r\n//                   <div\r\n//                     key={activity.animeId}\r\n//                     className={homeStyles.progressCard}\r\n//                     onMouseEnter={(event) => handleMouseEnter(activity.animeId, event)}\r\n//                     onMouseLeave={() => setHoveredCard(null)}\r\n//                   >\r\n//                     <Link\r\n//                       to={`/anime/${activity.animeId}`}\r\n//                     >\r\n//                       <img\r\n//                         src={getAnimeById(activity.animeId)?.images.image}\r\n//                         alt={getAnimeById(activity.animeId)?.titles.english}\r\n//                       />\r\n//                     </Link>\r\n//                     <div className={homeStyles.progressInfo}>\r\n//                       {hoveredCard === activity.animeId ? (\r\n//                         <div className={homeStyles.episodeInfo}>\r\n//                           <span>\r\n//                             {activity.currentEpisode} {/* Show the current episode */}\r\n//                           </span>\r\n//                           <span\r\n//                             className={homeStyles.incrementWatchCount}\r\n//                             onClick={() => handleIncrementWatchCount(activity.animeId, 'anime')} // Increment function\r\n//                           >\r\n//                             +\r\n//                           </span>\r\n//                         </div>\r\n//                       ) : (\r\n//                         getAnimeById(activity.animeId)?.nextAiringEpisode?.airingAt && (\r\n//                           <div className={homeStyles.episodeInfo}>\r\n//                             <span>\r\n//                               {getAnimeById(activity.animeId)?.nextAiringEpisode?.episode}\r\n//                             </span>\r\n//                             <span>\r\n//                               {formatTimeUntilNextEpisode(getAnimeById(activity.animeId)?.nextAiringEpisode?.timeUntilAiring)}\r\n//                             </span>\r\n//                           </div>\r\n//                         )\r\n//                       )}\r\n//                     </div>\r\n//                     {hoveredCard === activity.animeId && (\r\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\r\n//                         <h4>{getAnimeById(activity.animeId)?.titles.english || getAnimeById(activity.animeId)?.titles.romaji}</h4>\r\n//                         <p>Progress: {activity.currentEpisode}/{getAnimeById(activity.animeId)?.lengths.Episodes}</p>\r\n//                       </div>\r\n//                     )}\r\n//                   </div>\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </>\r\n//       )}\r\n\r\n//       {mangaActivities.length > 0 && (\r\n//         <>\r\n//           <div className={homeStyles.sectionContainer}>\r\n//             <div className={homeStyles.headerContainer}>\r\n//               <h1>Manga Activities</h1>\r\n//             </div>\r\n//             <div className={homeStyles.activitiesGrid}>\r\n//               {mangaActivities.slice(0, 15).map((activity) => (\r\n//                 <div key={activity._id} className={homeStyles.activityCard}>\r\n//                   <Link to={`/manga/${activity.mangaDetails._id}`}>\r\n//                     <div className={homeStyles.activityImage}>\r\n//                       <img\r\n//                         src={activity.mangaDetails.images.image}\r\n//                         alt={activity.mangaDetails.titles.english}\r\n//                       />\r\n//                     </div>\r\n//                   </Link>\r\n//                   <div className={homeStyles.activityInfo}>\r\n//                     <h3>{activity.mangaDetails.titles.english || activity.mangaDetails.titles.romaji}</h3>\r\n//                     <p className={homeStyles.activityStatus}>\r\n//                       {activity.status === 'Completed'\r\n//                         ? 'Completed'\r\n//                         : activity.status === 'Planning'\r\n//                         ? 'Planning to read'\r\n//                         : activity.currentChapter === 0 &&\r\n//                             activity.status === 'Reading'\r\n//                           ? 'Started reading'\r\n//                           : `Chapter ${activity.currentChapter}`}\r\n//                     </p>\r\n//                     <span className={homeStyles.activityTimestamp}>\r\n//                       {new Date(\r\n//                         activity.activityTimestamp\r\n//                       ).toLocaleDateString()}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {readingManga.length > 0 && (\r\n//             <div className={homeStyles.progressSection}>\r\n//               <h2>Currently Reading</h2>\r\n//               <div className={homeStyles.progressGrid}>\r\n//                 {readingManga.map((activity) => (\r\n//                   <div\r\n//                     key={activity.mangaId}\r\n//                     className={homeStyles.progressCard}\r\n//                     onMouseEnter={(event) => handleMouseEnter(activity.mangaId, event)}\r\n//                     onMouseLeave={() => setHoveredCard(null)}\r\n//                   >\r\n//                     <Link\r\n//                       to={`/manga/${activity.mangaId}`}\r\n//                     >\r\n//                       <img\r\n//                         src={getMangaById(activity.mangaId)?.images.image}\r\n//                         alt={getMangaById(activity.mangaId)?.titles.english}\r\n//                       />\r\n//                     </Link>\r\n//                     <div className={homeStyles.progressInfo}>\r\n//                       {hoveredCard === activity.mangaId && (\r\n//                         <div className={homeStyles.episodeInfo}>\r\n//                           <span>\r\n//                             {activity.currentChapter}\r\n//                           </span>\r\n//                           <span\r\n//                             className={homeStyles.incrementWatchCount}\r\n//                             onClick={() => handleIncrementWatchCount(activity.mangaId, 'manga')}\r\n//                           >\r\n//                             +\r\n//                           </span>\r\n//                         </div>\r\n//                       )}\r\n//                     </div>\r\n//                     {hoveredCard === activity.mangaId && (\r\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\r\n//                         <h4>{getMangaById(activity.mangaId)?.titles.english || getMangaById(activity.mangaId)?.titles.romaji}</h4>\r\n//                         <p>Progress: {activity.currentChapter}/{getMangaById(activity.mangaId)?.lengths.chapters}</p>\r\n//                       </div>\r\n//                     )}\r\n//                   </div>\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </>\r\n//       )}\r\n\r\n//       {animeActivities.length === 0 && mangaActivities.length === 0 && (\r\n//         <div className={homeStyles.emptyState}>\r\n//           <h2>No Recent Activities</h2>\r\n//           <p>\r\n//             Start watching anime or reading manga to see your activities here!\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n\r\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport data from '../Context/ContextApi';\r\nimport styles from '../styles/pages/Home.module.css';\r\nimport { useAnimeContext } from '../Context/AnimeContext';\r\nimport { useMangaContext } from '../Context/MangaContext';\r\nimport { fetchWithErrorHandling } from '../utils/apiUtils';\r\n\r\nconst Home = () => {\r\n  const { animeList } = useAnimeContext();\r\n  const { mangaList } = useMangaContext();\r\n  const [activeTab, setActiveTab] = useState('activity');\r\n  const [view, setView] = useState('following');\r\n  const { userData } = useContext(data);\r\n  const [latestActivities, setLatestActivities] = useState([]);\r\n  const [userAnimeList, setUserAnimeList] = useState([]);\r\n  const [userMangaList, setUserMangaList] = useState([]);\r\n\r\n  const fetchLatestActivities = useCallback(async () => {\r\n    try {\r\n      const data = await fetchWithErrorHandling(`/latest-activities/${userData._id}`);\r\n      const sortedActivities = data.sort(\r\n        (a, b) => new Date(b.activityTimestamp) - new Date(a.activityTimestamp)\r\n      );\r\n      setLatestActivities(sortedActivities);\r\n    } catch (error) {\r\n      setLatestActivities([]);\r\n    }\r\n  }, [userData._id]);\r\n\r\n  const fetchUserList = useCallback(async () => {\r\n    try {\r\n      const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\r\n      setUserAnimeList(data.animes);\r\n      setUserMangaList(data.mangas);\r\n    } catch (error) {\r\n      setUserAnimeList([]);\r\n      setUserMangaList([]);\r\n    }\r\n  }, [userData._id]);\r\n\r\n  useEffect(() => {\r\n    fetchLatestActivities();\r\n    fetchUserList();\r\n  }, [userData._id, fetchLatestActivities, fetchUserList]);\r\n\r\n  const getAnimeById = (animeId) => {\r\n    return animeList.find((anime) => anime._id === animeId);\r\n  };\r\n\r\n  const getMangaById = (mangaId) => {\r\n    return mangaList.find((manga) => manga._id === mangaId);\r\n  };\r\n\r\n  const filterAnimeByWatching = () => {\r\n    return userAnimeList\r\n      .filter((userAnime) => userAnime.status === 'Watching')\r\n      .map((userAnime) => ({\r\n        animeId: userAnime.animeId,\r\n        currentEpisode: userAnime.currentEpisode,\r\n        status: userAnime.status,\r\n        animeDetails: getAnimeById(userAnime.animeId),\r\n      }));\r\n  };\r\n\r\n  const filterMangaByReading = () => {\r\n    return userMangaList\r\n      .filter((userManga) => userManga.status === 'Reading')\r\n      .map((userManga) => ({\r\n        mangaId: userManga.mangaId,\r\n        currentChapter: userManga.currentChapter,\r\n        currentVolume: userManga.currentVolume,\r\n        status: userManga.status,\r\n        mangaDetails: getMangaById(userManga.mangaId),\r\n      }));\r\n  };\r\n\r\n  const animeActivities = latestActivities.filter(\r\n    (activity) => activity.animeDetails\r\n  );\r\n  const mangaActivities = latestActivities.filter(\r\n    (activity) => activity.mangaDetails\r\n  );\r\n  const watchingAnime = filterAnimeByWatching();\r\n  const readingManga = filterMangaByReading();\r\n  \r\n  // Mock data for demonstration\r\n  const activities = [\r\n    {\r\n      id: 1,\r\n      user: {\r\n        name: userData.username,\r\n        avatar: `http://localhost:8080${userData?.avatar}`\r\n      },\r\n      type: 'COMPLETED',\r\n      title: 'A Life-Changing Turn',\r\n      timestamp: '3 days ago',\r\n      media: {\r\n        image: '/api/placeholder/150/200'\r\n      }\r\n    },\r\n    {\r\n      id: 2,\r\n      user: {\r\n        name: userData.username,\r\n        avatar: `http://localhost:8080${userData?.avatar}`\r\n      },\r\n      type: 'PLANNING',\r\n      title: 'Honey Lemon Soda',\r\n      timestamp: '4 days ago',\r\n      media: {\r\n        image: '/api/placeholder/150/200'\r\n      }\r\n    }\r\n  ];\r\n\r\n  const airingAnime = [\r\n    {\r\n      id: 1,\r\n      title: 'Series 1',\r\n      episode: 20,\r\n      timeUntil: '1d 20h 56m',\r\n      image: '/api/placeholder/120/180'\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Series 2',\r\n      episode: 18,\r\n      timeUntil: '1d 21h 56m',\r\n      image: '/api/placeholder/120/180'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {/* Header Tabs */}\r\n      <div className={styles.tabContainer}>\r\n        <button\r\n          className={`${styles.tab} ${activeTab === 'activity' ? styles.active : ''}`}\r\n          onClick={() => setActiveTab('activity')}\r\n        >\r\n          Activity\r\n        </button>\r\n        <button\r\n          className={`${styles.tab} ${activeTab === 'airing' ? styles.active : ''}`}\r\n          onClick={() => setActiveTab('airing')}\r\n        >\r\n          Airing\r\n        </button>\r\n      </div>\r\n\r\n      {/* View Toggle */}\r\n      <div className={styles.viewToggle}>\r\n        <button\r\n          className={`${styles.toggleButton} ${view === 'following' ? styles.active : ''}`}\r\n          onClick={() => setView('following')}\r\n        >\r\n          Following\r\n        </button>\r\n        <button\r\n          className={`${styles.toggleButton} ${view === 'global' ? styles.active : ''}`}\r\n          onClick={() => setView('global')}\r\n        >\r\n          Global\r\n        </button>\r\n      </div>\r\n\r\n      {/* Status Input */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Write a status...\"\r\n        className={styles.statusInput}\r\n      />\r\n\r\n      {activeTab === 'activity' ? (\r\n        /* Activity Feed */\r\n        <div className={styles.activityFeed}>\r\n          {animeActivities.map(activity => (\r\n            <div key={activity.id} className={styles.activityCard}>\r\n              <div className={styles.activityHeader}>\r\n                <img\r\n                  src={`http://localhost:8080${userData?.avatar}`}\r\n                  alt={activity.user.name}\r\n                  className={styles.avatar}\r\n                />\r\n                <div className={styles.activityInfo}>\r\n                  <div className={styles.activityMeta}>\r\n                    <span className={styles.username}>{activity.user.name}</span>\r\n                    <span className={styles.timestamp}>{activity.timestamp}</span>\r\n                  </div>\r\n                  <p className={styles.activityContent}>\r\n                    {activity.type === 'COMPLETED' ? 'Completed ' : 'Plans to watch '}\r\n                    <span className={styles.username}>{activity.title}</span>\r\n                  </p>\r\n                  <img\r\n                    src={activity.media.image}\r\n                    alt={activity.title}\r\n                    className={styles.mediaImage}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        /* Airing Schedule */\r\n        <div className={styles.airingGrid}>\r\n          {airingAnime.map(anime => (\r\n            <div key={anime.id} className={styles.airingCard}>\r\n              <img\r\n                src={anime.image}\r\n                alt={anime.title}\r\n                className={styles.airingImage}\r\n              />\r\n              <div className={styles.airingInfo}>\r\n                <div className={styles.episodeNumber}>Ep {anime.episode}</div>\r\n                <div className={styles.airingTime}>{anime.timeUntil}</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC3E,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,MAAM,MAAM,iCAAiC;AACpD,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,sBAAsB,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM;IAAEC;EAAU,CAAC,GAAGP,eAAe,CAAC,CAAC;EACvC,MAAM;IAAEQ;EAAU,CAAC,GAAGP,eAAe,CAAC,CAAC;EACvC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,UAAU,CAAC;EACtD,MAAM,CAACkB,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,WAAW,CAAC;EAC7C,MAAM;IAAEoB;EAAS,CAAC,GAAGlB,UAAU,CAACG,IAAI,CAAC;EACrC,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACuB,aAAa,EAAEC,gBAAgB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAM2B,qBAAqB,GAAGxB,WAAW,CAAC,YAAY;IACpD,IAAI;MACF,MAAME,IAAI,GAAG,MAAMI,sBAAsB,CAAC,sBAAsBW,QAAQ,CAACQ,GAAG,EAAE,CAAC;MAC/E,MAAMC,gBAAgB,GAAGxB,IAAI,CAACyB,IAAI,CAChC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,iBAAiB,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,iBAAiB,CACxE,CAAC;MACDZ,mBAAmB,CAACO,gBAAgB,CAAC;IACvC,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdb,mBAAmB,CAAC,EAAE,CAAC;IACzB;EACF,CAAC,EAAE,CAACF,QAAQ,CAACQ,GAAG,CAAC,CAAC;EAElB,MAAMQ,aAAa,GAAGjC,WAAW,CAAC,YAAY;IAC5C,IAAI;MACF,MAAME,IAAI,GAAG,MAAMI,sBAAsB,CAAC,UAAUW,QAAQ,CAACQ,GAAG,UAAU,CAAC;MAC3EJ,gBAAgB,CAACnB,IAAI,CAACgC,MAAM,CAAC;MAC7BX,gBAAgB,CAACrB,IAAI,CAACiC,MAAM,CAAC;IAC/B,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdX,gBAAgB,CAAC,EAAE,CAAC;MACpBE,gBAAgB,CAAC,EAAE,CAAC;IACtB;EACF,CAAC,EAAE,CAACN,QAAQ,CAACQ,GAAG,CAAC,CAAC;EAElB3B,SAAS,CAAC,MAAM;IACd0B,qBAAqB,CAAC,CAAC;IACvBS,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAAChB,QAAQ,CAACQ,GAAG,EAAED,qBAAqB,EAAES,aAAa,CAAC,CAAC;EAExD,MAAMG,YAAY,GAAIC,OAAO,IAAK;IAChC,OAAO1B,SAAS,CAAC2B,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACd,GAAG,KAAKY,OAAO,CAAC;EACzD,CAAC;EAED,MAAMG,YAAY,GAAIC,OAAO,IAAK;IAChC,OAAO7B,SAAS,CAAC0B,IAAI,CAAEI,KAAK,IAAKA,KAAK,CAACjB,GAAG,KAAKgB,OAAO,CAAC;EACzD,CAAC;EAED,MAAME,qBAAqB,GAAGA,CAAA,KAAM;IAClC,OAAOvB,aAAa,CACjBwB,MAAM,CAAEC,SAAS,IAAKA,SAAS,CAACC,MAAM,KAAK,UAAU,CAAC,CACtDC,GAAG,CAAEF,SAAS,KAAM;MACnBR,OAAO,EAAEQ,SAAS,CAACR,OAAO;MAC1BW,cAAc,EAAEH,SAAS,CAACG,cAAc;MACxCF,MAAM,EAAED,SAAS,CAACC,MAAM;MACxBG,YAAY,EAAEb,YAAY,CAACS,SAAS,CAACR,OAAO;IAC9C,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMa,oBAAoB,GAAGA,CAAA,KAAM;IACjC,OAAO5B,aAAa,CACjBsB,MAAM,CAAEO,SAAS,IAAKA,SAAS,CAACL,MAAM,KAAK,SAAS,CAAC,CACrDC,GAAG,CAAEI,SAAS,KAAM;MACnBV,OAAO,EAAEU,SAAS,CAACV,OAAO;MAC1BW,cAAc,EAAED,SAAS,CAACC,cAAc;MACxCC,aAAa,EAAEF,SAAS,CAACE,aAAa;MACtCP,MAAM,EAAEK,SAAS,CAACL,MAAM;MACxBQ,YAAY,EAAEd,YAAY,CAACW,SAAS,CAACV,OAAO;IAC9C,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMc,eAAe,GAAGrC,gBAAgB,CAAC0B,MAAM,CAC5CY,QAAQ,IAAKA,QAAQ,CAACP,YACzB,CAAC;EACD,MAAMQ,eAAe,GAAGvC,gBAAgB,CAAC0B,MAAM,CAC5CY,QAAQ,IAAKA,QAAQ,CAACF,YACzB,CAAC;EACD,MAAMI,aAAa,GAAGf,qBAAqB,CAAC,CAAC;EAC7C,MAAMgB,YAAY,GAAGT,oBAAoB,CAAC,CAAC;;EAE3C;EACA,MAAMU,UAAU,GAAG,CACjB;IACEC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE;MACJC,IAAI,EAAE9C,QAAQ,CAAC+C,QAAQ;MACvBC,MAAM,EAAE,wBAAwBhD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEgD,MAAM;IAClD,CAAC;IACDC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,sBAAsB;IAC7BC,SAAS,EAAE,YAAY;IACvBC,KAAK,EAAE;MACLC,KAAK,EAAE;IACT;EACF,CAAC,EACD;IACET,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE;MACJC,IAAI,EAAE9C,QAAQ,CAAC+C,QAAQ;MACvBC,MAAM,EAAE,wBAAwBhD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEgD,MAAM;IAClD,CAAC;IACDC,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE,kBAAkB;IACzBC,SAAS,EAAE,YAAY;IACvBC,KAAK,EAAE;MACLC,KAAK,EAAE;IACT;EACF,CAAC,CACF;EAED,MAAMC,WAAW,GAAG,CAClB;IACEV,EAAE,EAAE,CAAC;IACLM,KAAK,EAAE,UAAU;IACjBK,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,YAAY;IACvBH,KAAK,EAAE;EACT,CAAC,EACD;IACET,EAAE,EAAE,CAAC;IACLM,KAAK,EAAE,UAAU;IACjBK,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,YAAY;IACvBH,KAAK,EAAE;EACT,CAAC,CACF;EAED,oBACE9D,OAAA;IAAKkE,SAAS,EAAEvE,MAAM,CAACwE,SAAU;IAAAC,QAAA,gBAE/BpE,OAAA;MAAKkE,SAAS,EAAEvE,MAAM,CAAC0E,YAAa;MAAAD,QAAA,gBAClCpE,OAAA;QACEkE,SAAS,EAAE,GAAGvE,MAAM,CAAC2E,GAAG,IAAIjE,SAAS,KAAK,UAAU,GAAGV,MAAM,CAAC4E,MAAM,GAAG,EAAE,EAAG;QAC5EC,OAAO,EAAEA,CAAA,KAAMlE,YAAY,CAAC,UAAU,CAAE;QAAA8D,QAAA,EACzC;MAED;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT5E,OAAA;QACEkE,SAAS,EAAE,GAAGvE,MAAM,CAAC2E,GAAG,IAAIjE,SAAS,KAAK,QAAQ,GAAGV,MAAM,CAAC4E,MAAM,GAAG,EAAE,EAAG;QAC1EC,OAAO,EAAEA,CAAA,KAAMlE,YAAY,CAAC,QAAQ,CAAE;QAAA8D,QAAA,EACvC;MAED;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGN5E,OAAA;MAAKkE,SAAS,EAAEvE,MAAM,CAACkF,UAAW;MAAAT,QAAA,gBAChCpE,OAAA;QACEkE,SAAS,EAAE,GAAGvE,MAAM,CAACmF,YAAY,IAAIvE,IAAI,KAAK,WAAW,GAAGZ,MAAM,CAAC4E,MAAM,GAAG,EAAE,EAAG;QACjFC,OAAO,EAAEA,CAAA,KAAMhE,OAAO,CAAC,WAAW,CAAE;QAAA4D,QAAA,EACrC;MAED;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT5E,OAAA;QACEkE,SAAS,EAAE,GAAGvE,MAAM,CAACmF,YAAY,IAAIvE,IAAI,KAAK,QAAQ,GAAGZ,MAAM,CAAC4E,MAAM,GAAG,EAAE,EAAG;QAC9EC,OAAO,EAAEA,CAAA,KAAMhE,OAAO,CAAC,QAAQ,CAAE;QAAA4D,QAAA,EAClC;MAED;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGN5E,OAAA;MACE0D,IAAI,EAAC,MAAM;MACXqB,WAAW,EAAC,mBAAmB;MAC/Bb,SAAS,EAAEvE,MAAM,CAACqF;IAAY;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,EAEDvE,SAAS,KAAK,UAAU;IAAA;IACvB;IACAL,OAAA;MAAKkE,SAAS,EAAEvE,MAAM,CAACsF,YAAa;MAAAb,QAAA,EACjCrB,eAAe,CAACR,GAAG,CAACS,QAAQ,iBAC3BhD,OAAA;QAAuBkE,SAAS,EAAEvE,MAAM,CAACuF,YAAa;QAAAd,QAAA,eACpDpE,OAAA;UAAKkE,SAAS,EAAEvE,MAAM,CAACwF,cAAe;UAAAf,QAAA,gBACpCpE,OAAA;YACEoF,GAAG,EAAE,wBAAwB3E,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEgD,MAAM,EAAG;YAChD4B,GAAG,EAAErC,QAAQ,CAACM,IAAI,CAACC,IAAK;YACxBW,SAAS,EAAEvE,MAAM,CAAC8D;UAAO;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACF5E,OAAA;YAAKkE,SAAS,EAAEvE,MAAM,CAAC2F,YAAa;YAAAlB,QAAA,gBAClCpE,OAAA;cAAKkE,SAAS,EAAEvE,MAAM,CAAC4F,YAAa;cAAAnB,QAAA,gBAClCpE,OAAA;gBAAMkE,SAAS,EAAEvE,MAAM,CAAC6D,QAAS;gBAAAY,QAAA,EAAEpB,QAAQ,CAACM,IAAI,CAACC;cAAI;gBAAAkB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC7D5E,OAAA;gBAAMkE,SAAS,EAAEvE,MAAM,CAACiE,SAAU;gBAAAQ,QAAA,EAAEpB,QAAQ,CAACY;cAAS;gBAAAa,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3D,CAAC,eACN5E,OAAA;cAAGkE,SAAS,EAAEvE,MAAM,CAAC6F,eAAgB;cAAApB,QAAA,GAClCpB,QAAQ,CAACU,IAAI,KAAK,WAAW,GAAG,YAAY,GAAG,iBAAiB,eACjE1D,OAAA;gBAAMkE,SAAS,EAAEvE,MAAM,CAAC6D,QAAS;gBAAAY,QAAA,EAAEpB,QAAQ,CAACW;cAAK;gBAAAc,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxD,CAAC,eACJ5E,OAAA;cACEoF,GAAG,EAAEpC,QAAQ,CAACa,KAAK,CAACC,KAAM;cAC1BuB,GAAG,EAAErC,QAAQ,CAACW,KAAM;cACpBO,SAAS,EAAEvE,MAAM,CAAC8F;YAAW;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC,GAtBE5B,QAAQ,CAACK,EAAE;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAuBhB,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;IAAA;IAEN;IACA5E,OAAA;MAAKkE,SAAS,EAAEvE,MAAM,CAAC+F,UAAW;MAAAtB,QAAA,EAC/BL,WAAW,CAACxB,GAAG,CAACR,KAAK,iBACpB/B,OAAA;QAAoBkE,SAAS,EAAEvE,MAAM,CAACgG,UAAW;QAAAvB,QAAA,gBAC/CpE,OAAA;UACEoF,GAAG,EAAErD,KAAK,CAAC+B,KAAM;UACjBuB,GAAG,EAAEtD,KAAK,CAAC4B,KAAM;UACjBO,SAAS,EAAEvE,MAAM,CAACiG;QAAY;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC,eACF5E,OAAA;UAAKkE,SAAS,EAAEvE,MAAM,CAACkG,UAAW;UAAAzB,QAAA,gBAChCpE,OAAA;YAAKkE,SAAS,EAAEvE,MAAM,CAACmG,aAAc;YAAA1B,QAAA,GAAC,KAAG,EAACrC,KAAK,CAACiC,OAAO;UAAA;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC9D5E,OAAA;YAAKkE,SAAS,EAAEvE,MAAM,CAACoG,UAAW;YAAA3B,QAAA,EAAErC,KAAK,CAACkC;UAAS;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC;MAAA,GATE7C,KAAK,CAACsB,EAAE;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUb,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1E,EAAA,CAxNID,IAAI;EAAA,QACcL,eAAe,EACfC,eAAe;AAAA;AAAAmG,EAAA,GAFjC/F,IAAI;AA0NV,eAAeA,IAAI;AAAC,IAAA+F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}