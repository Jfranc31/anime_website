{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Documents\\\\anime_website\\\\anime_website\\\\frontend\\\\src\\\\pages\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState, useCallback, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport axiosInstance from '../utils/axiosConfig';\nimport profileStyles from '../styles/pages/Profile.module.css';\nimport data from '../Context/ContextApi';\nimport { useAnimeContext } from '../Context/AnimeContext';\nimport { useMangaContext } from '../Context/MangaContext';\nimport { fetchWithErrorHandling } from '../utils/apiUtils';\nimport UserAnimeCard from '../cards/userAnimeCard';\nimport MangaCard from '../cards/MangaCard';\nimport { AVAILABLE_GENRES } from '../constants/filterOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  var _userData$username, _userData$animes, _userData$mangas;\n  const {\n    animeList\n  } = useAnimeContext();\n  const {\n    mangaList\n  } = useMangaContext();\n  const {\n    userData\n  } = useContext(data);\n  const [mediaType, setMediaType] = useState('anime');\n  const [statusType, setStatusType] = useState('watching');\n  const [userAnimeList, setUserAnimeList] = useState([]);\n  const [userMangaList, setUserMangaList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [gridLayout, setGridLayout] = useState('grid');\n  const [error, setError] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [showAllStatuses, setShowAllStatuses] = useState(true);\n  const changeLayout = layout => setGridLayout(layout);\n  const fetchUserList = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\n      setUserAnimeList(data.animes);\n      setUserMangaList(data.mangas);\n    } catch (error) {\n      setError('Failed to load user list. Please try again later.');\n      setUserAnimeList([]);\n      setUserMangaList([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [userData._id]);\n  useEffect(() => {\n    if (userData._id && animeList !== null && animeList !== void 0 && animeList.length && mangaList !== null && mangaList !== void 0 && mangaList.length) {\n      fetchUserList();\n    }\n  }, [userData._id, animeList, mangaList, fetchUserList]);\n  const getMediaById = useCallback((mediaId, type) => {\n    return type === 'anime' ? animeList === null || animeList === void 0 ? void 0 : animeList.find(anime => anime._id === mediaId) : mangaList === null || mangaList === void 0 ? void 0 : mangaList.find(manga => manga._id === mediaId);\n  }, [animeList, mangaList]);\n  const filteredMediaList = useMemo(() => {\n    const list = mediaType === 'anime' ? userAnimeList : userMangaList;\n    if (!list.length) return [];\n    const statusMap = {\n      'watching': mediaType === 'anime' ? 'Watching' : 'Reading',\n      'planning': 'Planning',\n      'completed': 'Completed'\n    };\n    return list.filter(item => item.status === statusMap[statusType]).map(item => ({\n      ...item,\n      mediaDetails: getMediaById(mediaType === 'anime' ? item.animeId : item.mangaId, mediaType)\n    }));\n  }, [userAnimeList, userMangaList, statusType, getMediaById, mediaType]);\n  const handleProgressUpdate = async (id, newProgress) => {\n    const isAnime = mediaType === 'anime';\n    const currentList = isAnime ? userAnimeList : userMangaList;\n    const currentItem = currentList.find(item => isAnime ? item.animeId === id : item.mangaId === id);\n    if (!currentItem) return;\n    const updateList = isAnime ? setUserAnimeList : setUserMangaList;\n    const progressField = isAnime ? 'currentEpisode' : 'currentChapter';\n    try {\n      updateList(prevList => prevList.map(item => (isAnime ? item.animeId : item.mangaId) === id ? {\n        ...item,\n        [progressField]: newProgress\n      } : item));\n      const endpoint = isAnime ? `/users/${userData._id}/updateAnime` : `/users/${userData._id}/updateManga`;\n      await axiosInstance.post(endpoint, {\n        [isAnime ? 'animeId' : 'mangaId']: id,\n        status: currentItem.status,\n        [progressField]: newProgress,\n        ...(isAnime ? {} : {\n          currentVolume: currentItem.currentVolume\n        })\n      });\n    } catch (error) {\n      setError(`Failed to update ${mediaType} progress. Please try again.`);\n      // Revert the optimistic update\n      fetchUserList();\n    }\n  };\n  const getTitle = titles => {\n    const preference = userData.title || 'english';\n    const titleMap = {\n      'english': titles.english,\n      'romaji': titles.romaji,\n      'native': titles.native\n    };\n    return titleMap[preference] || titles.english || titles.romaji || titles.native;\n  };\n  const renderLayoutControls = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: profileStyles.layoutControls,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => changeLayout('grid'),\n      className: profileStyles.layoutButton,\n      children: \"Grid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => changeLayout('wide'),\n      className: profileStyles.layoutButton,\n      children: \"Wide\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => changeLayout('compact'),\n      className: profileStyles.layoutButton,\n      children: \"Compact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n  const filterMedia = item => {\n    const mediaDetails = getMediaById(mediaType === 'anime' ? item.animeId : item.mangaId, mediaType);\n    if (!mediaDetails) return false;\n    const title = getTitle(mediaDetails.titles).toLowerCase();\n    const matchesSearch = searchQuery === '' || title.includes(searchQuery.toLowerCase());\n    const matchesGenres = selectedGenres.length === 0 || selectedGenres.every(genre => {\n      var _mediaDetails$genres;\n      return (_mediaDetails$genres = mediaDetails.genres) === null || _mediaDetails$genres === void 0 ? void 0 : _mediaDetails$genres.some(g => g.toLowerCase() === genre.toLowerCase());\n    });\n    return matchesSearch && matchesGenres;\n  };\n  const organizedMediaList = useMemo(() => {\n    const list = mediaType === 'anime' ? userAnimeList : userMangaList;\n    if (!list.length) return {};\n    const filtered = list.filter(filterMedia);\n    return filtered.reduce((acc, item) => {\n      const status = item.status;\n      if (!acc[status]) {\n        acc[status] = [];\n      }\n      acc[status].push(item);\n      return acc;\n    }, {});\n  }, [userAnimeList, userMangaList, mediaType, searchQuery, selectedGenres]);\n  const statusOrder = [mediaType === 'anime' ? 'Watching' : 'Reading', 'Completed', 'Planning'];\n\n  // return (\n  //   <div className={profileStyles.profilePage}>\n  //     <div className={profileStyles.profileHeader}>\n  //       <div className={profileStyles.userInfo}>\n  //         <div className={profileStyles.avatarContainer}>\n  //           <div className={profileStyles.avatar}>\n  //             {userData.username?.charAt(0).toUpperCase()}\n  //           </div>\n  //         </div>\n  //         <div className={profileStyles.userDetails}>\n  //           <h1>{userData.username}</h1>\n  //           <p>Member since {new Date(userData.createdAt).toLocaleDateString()}</p>\n  //         </div>\n  //       </div>\n  //       <div className={profileStyles.statsContainer}>\n  //         <div className={profileStyles.statCard}>\n  //           <h3>Anime Stats</h3>\n  //           <div className={profileStyles.statValue}>\n  //             {userData.animes?.length || 0} Total\n  //           </div>\n  //         </div>\n  //         <div className={profileStyles.statCard}>\n  //           <h3>Manga Stats</h3>\n  //           <div className={profileStyles.statValue}>\n  //             {userData.mangas?.length || 0} Total\n  //           </div>\n  //         </div>\n  //       </div>\n  //     </div>\n\n  //     <div className={profileStyles.contentSection}>\n  //       <div className={profileStyles.controls}>\n  //         <div className={profileStyles.tabContainer}>\n  //           <button\n  //             className={`${profileStyles.tabButton} ${mediaType === 'anime' ? profileStyles.activeTab : ''}`}\n  //             onClick={() => setMediaType('anime')}\n  //           >\n  //             Anime\n  //           </button>\n  //           <button\n  //             className={`${profileStyles.tabButton} ${mediaType === 'manga' ? profileStyles.activeTab : ''}`}\n  //             onClick={() => setMediaType('manga')}\n  //           >\n  //             Manga\n  //           </button>\n  //         </div>\n\n  //         {renderLayoutControls()}\n  //       </div>\n\n  //       <div className={profileStyles.statusTabs}>\n  //         <button\n  //           className={`${profileStyles.statusTab} ${statusType === 'watching' ? profileStyles.activeStatus : ''}`}\n  //           onClick={() => setStatusType('watching')}\n  //         >\n  //           {mediaType === 'anime' ? 'Watching' : 'Reading'}\n  //         </button>\n  //         <button\n  //           className={`${profileStyles.statusTab} ${statusType === 'planning' ? profileStyles.activeStatus : ''}`}\n  //           onClick={() => setStatusType('planning')}\n  //         >\n  //           Planning\n  //         </button>\n  //         <button\n  //           className={`${profileStyles.statusTab} ${statusType === 'completed' ? profileStyles.activeStatus : ''}`}\n  //           onClick={() => setStatusType('completed')}\n  //         >\n  //           Completed\n  //         </button>\n  //       </div>\n\n  //       {error && (\n  //         <div className={profileStyles.error}>\n  //           {error}\n  //         </div>\n  //       )}\n\n  //       {isLoading ? (\n  //         <div className={profileStyles.loading}>Loading...</div>\n  //       ) : (\n  //         <div className={`${profileStyles.contentGrid} ${profileStyles[gridLayout]}`}>\n  //           {filteredMediaList.map((item) => (\n  //             mediaType === 'anime' ? (\n  //               <UserAnimeCard\n  //                 key={item.animeId}\n  //                 anime={item.mediaDetails}\n  //                 name={getTitle(item.mediaDetails.titles)}\n  //                 layout={gridLayout}\n  //                 userProgress={item.currentEpisode}\n  //                 userStatus={item.status}\n  //                 onProgressUpdate={(newProgress) => \n  //                   handleProgressUpdate(item.animeId, newProgress)\n  //                 }\n  //               />\n  //             ) : (\n  //               <MangaCard\n  //                 key={item.mangaId}\n  //                 manga={item.mediaDetails}\n  //                 name={getTitle(item.mediaDetails.titles)}\n  //                 layout={gridLayout}\n  //                 userProgress={item.currentChapter}\n  //                 onProgressUpdate={(newProgress) => \n  //                   handleProgressUpdate(item.mangaId, newProgress)\n  //                 }\n  //               />\n  //             )\n  //           ))}\n  //         </div>\n  //       )}\n  //     </div>\n  //   </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: profileStyles.profilePage,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: profileStyles.profileHeader,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: profileStyles.userInfo,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: profileStyles.avatarContainer,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: profileStyles.avatar,\n            children: (_userData$username = userData.username) === null || _userData$username === void 0 ? void 0 : _userData$username.charAt(0).toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: profileStyles.userDetails,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: userData.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Member since \", new Date(userData.createdAt).toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: profileStyles.statsContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: profileStyles.statCard,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Anime Stats\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: profileStyles.statValue,\n            children: [((_userData$animes = userData.animes) === null || _userData$animes === void 0 ? void 0 : _userData$animes.length) || 0, \" Total\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: profileStyles.statCard,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Manga Stats\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: profileStyles.statValue,\n            children: [((_userData$mangas = userData.mangas) === null || _userData$mangas === void 0 ? void 0 : _userData$mangas.length) || 0, \" Total\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: profileStyles.controls,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: profileStyles.tabContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${profileStyles.tabButton} ${mediaType === 'anime' ? profileStyles.activeTab : ''}`,\n          onClick: () => setMediaType('anime'),\n          children: \"Anime\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${profileStyles.tabButton} ${mediaType === 'manga' ? profileStyles.activeTab : ''}`,\n          onClick: () => setMediaType('manga'),\n          children: \"Manga\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: profileStyles.searchContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: `Search ${mediaType}...`,\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value),\n          className: profileStyles.searchInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          multiple: true,\n          value: selectedGenres,\n          onChange: e => {\n            const values = Array.from(e.target.selectedOptions, option => option.value);\n            setSelectedGenres(values);\n          },\n          className: profileStyles.genreSelect,\n          children: AVAILABLE_GENRES.map(genre => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: genre,\n            children: genre\n          }, genre, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), renderLayoutControls(), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: profileStyles.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: profileStyles.loading,\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: profileStyles.contentSection,\n      children: statusOrder.map(status => {\n        const items = organizedMediaList[status] || [];\n        if (items.length === 0) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: profileStyles.statusSection,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: profileStyles.statusTitle,\n            children: [status, \" (\", items.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${profileStyles.contentGrid} ${profileStyles[gridLayout]}`,\n            children: items.map(item => mediaType === 'anime' ? /*#__PURE__*/_jsxDEV(UserAnimeCard, {\n              anime: item.mediaDetails,\n              name: getTitle(item.mediaDetails.titles),\n              layout: gridLayout,\n              userProgress: item.currentEpisode,\n              userStatus: item.status,\n              onProgressUpdate: newProgress => handleProgressUpdate(item.animeId, newProgress)\n            }, item.animeId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(MangaCard, {\n              manga: item.mediaDetails,\n              name: getTitle(item.mediaDetails.titles),\n              layout: gridLayout,\n              userProgress: item.currentChapter,\n              onProgressUpdate: newProgress => handleProgressUpdate(item.mangaId, newProgress)\n            }, item.mangaId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 17\n          }, this)]\n        }, status, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"T6woU/tNYLuEUfw0BvlcLLKRVbU=\", false, function () {\n  return [useAnimeContext, useMangaContext];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useCallback","useMemo","Link","axiosInstance","profileStyles","data","useAnimeContext","useMangaContext","fetchWithErrorHandling","UserAnimeCard","MangaCard","AVAILABLE_GENRES","jsxDEV","_jsxDEV","Profile","_s","_userData$username","_userData$animes","_userData$mangas","animeList","mangaList","userData","mediaType","setMediaType","statusType","setStatusType","userAnimeList","setUserAnimeList","userMangaList","setUserMangaList","isLoading","setIsLoading","gridLayout","setGridLayout","error","setError","searchQuery","setSearchQuery","selectedGenres","setSelectedGenres","showAllStatuses","setShowAllStatuses","changeLayout","layout","fetchUserList","_id","animes","mangas","length","getMediaById","mediaId","type","find","anime","manga","filteredMediaList","list","statusMap","filter","item","status","map","mediaDetails","animeId","mangaId","handleProgressUpdate","id","newProgress","isAnime","currentList","currentItem","updateList","progressField","prevList","endpoint","post","currentVolume","getTitle","titles","preference","title","titleMap","english","romaji","native","renderLayoutControls","className","layoutControls","children","onClick","layoutButton","fileName","_jsxFileName","lineNumber","columnNumber","filterMedia","toLowerCase","matchesSearch","includes","matchesGenres","every","genre","_mediaDetails$genres","genres","some","g","organizedMediaList","filtered","reduce","acc","push","statusOrder","profilePage","profileHeader","userInfo","avatarContainer","avatar","username","charAt","toUpperCase","userDetails","Date","createdAt","toLocaleDateString","statsContainer","statCard","statValue","controls","tabContainer","tabButton","activeTab","searchContainer","placeholder","value","onChange","e","target","searchInput","multiple","values","Array","from","selectedOptions","option","genreSelect","loading","contentSection","items","statusSection","statusTitle","contentGrid","name","userProgress","currentEpisode","userStatus","onProgressUpdate","currentChapter","_c","$RefreshReg$"],"sources":["C:/Users/david/Documents/anime_website/anime_website/frontend/src/pages/Profile.js"],"sourcesContent":["import React, { useContext, useEffect, useState, useCallback, useMemo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axiosInstance from '../utils/axiosConfig';\r\nimport profileStyles from '../styles/pages/Profile.module.css';\r\nimport data from '../Context/ContextApi';\r\nimport { useAnimeContext } from '../Context/AnimeContext';\r\nimport { useMangaContext } from '../Context/MangaContext';\r\nimport { fetchWithErrorHandling } from '../utils/apiUtils';\r\nimport UserAnimeCard from '../cards/userAnimeCard';\r\nimport MangaCard from '../cards/MangaCard';\r\nimport { AVAILABLE_GENRES } from '../constants/filterOptions';\r\n\r\nconst Profile = () => {\r\n  const { animeList } = useAnimeContext();\r\n  const { mangaList } = useMangaContext();\r\n  const { userData } = useContext(data);\r\n  const [mediaType, setMediaType] = useState('anime');\r\n  const [statusType, setStatusType] = useState('watching');\r\n  const [userAnimeList, setUserAnimeList] = useState([]);\r\n  const [userMangaList, setUserMangaList] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [gridLayout, setGridLayout] = useState('grid');\r\n  const [error, setError] = useState(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedGenres, setSelectedGenres] = useState([]);\r\n  const [showAllStatuses, setShowAllStatuses] = useState(true);\r\n\r\n  const changeLayout = (layout) => setGridLayout(layout);\r\n\r\n  const fetchUserList = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\r\n      setUserAnimeList(data.animes);\r\n      setUserMangaList(data.mangas);\r\n    } catch (error) {\r\n      setError('Failed to load user list. Please try again later.');\r\n      setUserAnimeList([]);\r\n      setUserMangaList([]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [userData._id]);\r\n\r\n  useEffect(() => {\r\n    if (userData._id && animeList?.length && mangaList?.length) {\r\n      fetchUserList();\r\n    }\r\n  }, [userData._id, animeList, mangaList, fetchUserList]);\r\n\r\n  const getMediaById = useCallback((mediaId, type) => {\r\n    return type === 'anime' \r\n      ? animeList?.find((anime) => anime._id === mediaId)\r\n      : mangaList?.find((manga) => manga._id === mediaId);\r\n  }, [animeList, mangaList]);\r\n\r\n  const filteredMediaList = useMemo(() => {\r\n    const list = mediaType === 'anime' ? userAnimeList : userMangaList;\r\n    if (!list.length) return [];\r\n    \r\n    const statusMap = {\r\n      'watching': mediaType === 'anime' ? 'Watching' : 'Reading',\r\n      'planning': 'Planning',\r\n      'completed': 'Completed'\r\n    };\r\n    \r\n    return list\r\n      .filter((item) => item.status === statusMap[statusType])\r\n      .map((item) => ({\r\n        ...item,\r\n        mediaDetails: getMediaById(\r\n          mediaType === 'anime' ? item.animeId : item.mangaId,\r\n          mediaType\r\n        ),\r\n      }));\r\n  }, [userAnimeList, userMangaList, statusType, getMediaById, mediaType]);\r\n\r\n  const handleProgressUpdate = async (id, newProgress) => {\r\n    const isAnime = mediaType === 'anime';\r\n    const currentList = isAnime ? userAnimeList : userMangaList;\r\n    const currentItem = currentList.find(item => \r\n      isAnime ? item.animeId === id : item.mangaId === id\r\n    );\r\n\r\n    if (!currentItem) return;\r\n\r\n    const updateList = isAnime ? setUserAnimeList : setUserMangaList;\r\n    const progressField = isAnime ? 'currentEpisode' : 'currentChapter';\r\n\r\n    try {\r\n      updateList(prevList =>\r\n        prevList.map(item =>\r\n          (isAnime ? item.animeId : item.mangaId) === id\r\n            ? { ...item, [progressField]: newProgress }\r\n            : item\r\n        )\r\n      );\r\n\r\n      const endpoint = isAnime \r\n        ? `/users/${userData._id}/updateAnime`\r\n        : `/users/${userData._id}/updateManga`;\r\n\r\n      await axiosInstance.post(endpoint, {\r\n        [isAnime ? 'animeId' : 'mangaId']: id,\r\n        status: currentItem.status,\r\n        [progressField]: newProgress,\r\n        ...(isAnime ? {} : { currentVolume: currentItem.currentVolume })\r\n      });\r\n    } catch (error) {\r\n      setError(`Failed to update ${mediaType} progress. Please try again.`);\r\n      // Revert the optimistic update\r\n      fetchUserList();\r\n    }\r\n  };\r\n\r\n  const getTitle = (titles) => {\r\n    const preference = userData.title || 'english';\r\n    const titleMap = {\r\n      'english': titles.english,\r\n      'romaji': titles.romaji,\r\n      'native': titles.native\r\n    };\r\n    return titleMap[preference] || titles.english || titles.romaji || titles.native;\r\n  };\r\n\r\n  const renderLayoutControls = () => (\r\n    <div className={profileStyles.layoutControls}>\r\n      <button onClick={() => changeLayout('grid')} className={profileStyles.layoutButton}>Grid</button>\r\n      <button onClick={() => changeLayout('wide')} className={profileStyles.layoutButton}>Wide</button>\r\n      <button onClick={() => changeLayout('compact')} className={profileStyles.layoutButton}>Compact</button>\r\n    </div>\r\n  );\r\n\r\n  const filterMedia = (item) => {\r\n    const mediaDetails = getMediaById(\r\n      mediaType === 'anime' ? item.animeId : item.mangaId,\r\n      mediaType\r\n    );\r\n    \r\n    if (!mediaDetails) return false;\r\n\r\n    const title = getTitle(mediaDetails.titles).toLowerCase();\r\n    const matchesSearch = searchQuery === '' || title.includes(searchQuery.toLowerCase());\r\n    \r\n    const matchesGenres = selectedGenres.length === 0 || \r\n      selectedGenres.every(genre => \r\n        mediaDetails.genres?.some(g => g.toLowerCase() === genre.toLowerCase())\r\n      );\r\n\r\n    return matchesSearch && matchesGenres;\r\n  };\r\n\r\n  const organizedMediaList = useMemo(() => {\r\n    const list = mediaType === 'anime' ? userAnimeList : userMangaList;\r\n    if (!list.length) return {};\r\n\r\n    const filtered = list.filter(filterMedia);\r\n    \r\n    return filtered.reduce((acc, item) => {\r\n      const status = item.status;\r\n      if (!acc[status]) {\r\n        acc[status] = [];\r\n      }\r\n      acc[status].push(item);\r\n      return acc;\r\n    }, {});\r\n  }, [userAnimeList, userMangaList, mediaType, searchQuery, selectedGenres]);\r\n\r\n  const statusOrder = [\r\n    mediaType === 'anime' ? 'Watching' : 'Reading',\r\n    'Completed',\r\n    'Planning'\r\n  ];\r\n\r\n  // return (\r\n  //   <div className={profileStyles.profilePage}>\r\n  //     <div className={profileStyles.profileHeader}>\r\n  //       <div className={profileStyles.userInfo}>\r\n  //         <div className={profileStyles.avatarContainer}>\r\n  //           <div className={profileStyles.avatar}>\r\n  //             {userData.username?.charAt(0).toUpperCase()}\r\n  //           </div>\r\n  //         </div>\r\n  //         <div className={profileStyles.userDetails}>\r\n  //           <h1>{userData.username}</h1>\r\n  //           <p>Member since {new Date(userData.createdAt).toLocaleDateString()}</p>\r\n  //         </div>\r\n  //       </div>\r\n  //       <div className={profileStyles.statsContainer}>\r\n  //         <div className={profileStyles.statCard}>\r\n  //           <h3>Anime Stats</h3>\r\n  //           <div className={profileStyles.statValue}>\r\n  //             {userData.animes?.length || 0} Total\r\n  //           </div>\r\n  //         </div>\r\n  //         <div className={profileStyles.statCard}>\r\n  //           <h3>Manga Stats</h3>\r\n  //           <div className={profileStyles.statValue}>\r\n  //             {userData.mangas?.length || 0} Total\r\n  //           </div>\r\n  //         </div>\r\n  //       </div>\r\n  //     </div>\r\n\r\n  //     <div className={profileStyles.contentSection}>\r\n  //       <div className={profileStyles.controls}>\r\n  //         <div className={profileStyles.tabContainer}>\r\n  //           <button\r\n  //             className={`${profileStyles.tabButton} ${mediaType === 'anime' ? profileStyles.activeTab : ''}`}\r\n  //             onClick={() => setMediaType('anime')}\r\n  //           >\r\n  //             Anime\r\n  //           </button>\r\n  //           <button\r\n  //             className={`${profileStyles.tabButton} ${mediaType === 'manga' ? profileStyles.activeTab : ''}`}\r\n  //             onClick={() => setMediaType('manga')}\r\n  //           >\r\n  //             Manga\r\n  //           </button>\r\n  //         </div>\r\n\r\n  //         {renderLayoutControls()}\r\n  //       </div>\r\n\r\n  //       <div className={profileStyles.statusTabs}>\r\n  //         <button\r\n  //           className={`${profileStyles.statusTab} ${statusType === 'watching' ? profileStyles.activeStatus : ''}`}\r\n  //           onClick={() => setStatusType('watching')}\r\n  //         >\r\n  //           {mediaType === 'anime' ? 'Watching' : 'Reading'}\r\n  //         </button>\r\n  //         <button\r\n  //           className={`${profileStyles.statusTab} ${statusType === 'planning' ? profileStyles.activeStatus : ''}`}\r\n  //           onClick={() => setStatusType('planning')}\r\n  //         >\r\n  //           Planning\r\n  //         </button>\r\n  //         <button\r\n  //           className={`${profileStyles.statusTab} ${statusType === 'completed' ? profileStyles.activeStatus : ''}`}\r\n  //           onClick={() => setStatusType('completed')}\r\n  //         >\r\n  //           Completed\r\n  //         </button>\r\n  //       </div>\r\n\r\n  //       {error && (\r\n  //         <div className={profileStyles.error}>\r\n  //           {error}\r\n  //         </div>\r\n  //       )}\r\n\r\n  //       {isLoading ? (\r\n  //         <div className={profileStyles.loading}>Loading...</div>\r\n  //       ) : (\r\n  //         <div className={`${profileStyles.contentGrid} ${profileStyles[gridLayout]}`}>\r\n  //           {filteredMediaList.map((item) => (\r\n  //             mediaType === 'anime' ? (\r\n  //               <UserAnimeCard\r\n  //                 key={item.animeId}\r\n  //                 anime={item.mediaDetails}\r\n  //                 name={getTitle(item.mediaDetails.titles)}\r\n  //                 layout={gridLayout}\r\n  //                 userProgress={item.currentEpisode}\r\n  //                 userStatus={item.status}\r\n  //                 onProgressUpdate={(newProgress) => \r\n  //                   handleProgressUpdate(item.animeId, newProgress)\r\n  //                 }\r\n  //               />\r\n  //             ) : (\r\n  //               <MangaCard\r\n  //                 key={item.mangaId}\r\n  //                 manga={item.mediaDetails}\r\n  //                 name={getTitle(item.mediaDetails.titles)}\r\n  //                 layout={gridLayout}\r\n  //                 userProgress={item.currentChapter}\r\n  //                 onProgressUpdate={(newProgress) => \r\n  //                   handleProgressUpdate(item.mangaId, newProgress)\r\n  //                 }\r\n  //               />\r\n  //             )\r\n  //           ))}\r\n  //         </div>\r\n  //       )}\r\n  //     </div>\r\n  //   </div>\r\n  // );\r\n  return (\r\n    <div className={profileStyles.profilePage}>\r\n      <div className={profileStyles.profileHeader}>\r\n        <div className={profileStyles.userInfo}>\r\n          <div className={profileStyles.avatarContainer}>\r\n            <div className={profileStyles.avatar}>\r\n              {userData.username?.charAt(0).toUpperCase()}\r\n            </div>\r\n          </div>\r\n          <div className={profileStyles.userDetails}>\r\n            <h1>{userData.username}</h1>\r\n            <p>Member since {new Date(userData.createdAt).toLocaleDateString()}</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className={profileStyles.statsContainer}>\r\n          <div className={profileStyles.statCard}>\r\n            <h3>Anime Stats</h3>\r\n            <div className={profileStyles.statValue}>\r\n              {userData.animes?.length || 0} Total\r\n            </div>\r\n          </div>\r\n          <div className={profileStyles.statCard}>\r\n            <h3>Manga Stats</h3>\r\n            <div className={profileStyles.statValue}>\r\n              {userData.mangas?.length || 0} Total\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={profileStyles.controls}>\r\n        <div className={profileStyles.tabContainer}>\r\n          <button\r\n            className={`${profileStyles.tabButton} ${mediaType === 'anime' ? profileStyles.activeTab : ''}`}\r\n            onClick={() => setMediaType('anime')}\r\n          >\r\n            Anime\r\n          </button>\r\n          <button\r\n            className={`${profileStyles.tabButton} ${mediaType === 'manga' ? profileStyles.activeTab : ''}`}\r\n            onClick={() => setMediaType('manga')}\r\n          >\r\n            Manga\r\n          </button>\r\n        </div>\r\n\r\n        <div className={profileStyles.searchContainer}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder={`Search ${mediaType}...`}\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className={profileStyles.searchInput}\r\n          />\r\n          \r\n          <select\r\n            multiple\r\n            value={selectedGenres}\r\n            onChange={(e) => {\r\n              const values = Array.from(e.target.selectedOptions, option => option.value);\r\n              setSelectedGenres(values);\r\n            }}\r\n            className={profileStyles.genreSelect}\r\n          >\r\n            {(AVAILABLE_GENRES).map(genre => (\r\n              <option key={genre} value={genre}>{genre}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {renderLayoutControls()};\r\n      </div>\r\n\r\n      {error && (\r\n        <div className={profileStyles.error}>\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      {isLoading ? (\r\n        <div className={profileStyles.loading}>Loading...</div>\r\n      ) : (\r\n        <div className={profileStyles.contentSection}>\r\n          {statusOrder.map(status => {\r\n            const items = organizedMediaList[status] || [];\r\n            if (items.length === 0) return null;\r\n\r\n            return (\r\n              <div key={status} className={profileStyles.statusSection}>\r\n                <h2 className={profileStyles.statusTitle}>\r\n                  {status} ({items.length})\r\n                </h2>\r\n                <div className={`${profileStyles.contentGrid} ${profileStyles[gridLayout]}`}>\r\n                  {items.map((item) => (\r\n                    mediaType === 'anime' ? (\r\n                      <UserAnimeCard\r\n                        key={item.animeId}\r\n                        anime={item.mediaDetails}\r\n                        name={getTitle(item.mediaDetails.titles)}\r\n                        layout={gridLayout}\r\n                        userProgress={item.currentEpisode}\r\n                        userStatus={item.status}\r\n                        onProgressUpdate={(newProgress) => \r\n                          handleProgressUpdate(item.animeId, newProgress)\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <MangaCard\r\n                        key={item.mangaId}\r\n                        manga={item.mediaDetails}\r\n                        name={getTitle(item.mediaDetails.titles)}\r\n                        layout={gridLayout}\r\n                        userProgress={item.currentChapter}\r\n                        onProgressUpdate={(newProgress) => \r\n                          handleProgressUpdate(item.mangaId, newProgress)\r\n                        }\r\n                      />\r\n                    )\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;"],"mappings":"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E3B,MAAM2D,QAAQ,GAAGnD,IAAI,CAACE,MAAM,CAACqC,WAAW,CAAC;IAEzC,OAAOY,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,EAAElD,IAAI,KAAK;MACpC,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM;MAC1B,IAAI,CAACiD,GAAG,CAACjD,MAAM,CAAC,EAAE;QAChBiD,GAAG,CAACjD,MAAM,CAAC,GAAG,EAAE;MAClB;MACAiD,GAAG,CAACjD,MAAM,CAAC,CAACkD,IAAI,CAACnD,IAAI,CAAC;MACtB,OAAOkD,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC,EAAE,CAACnF,aAAa,EAAEE,aAAa,EAAEN,SAAS,EAAEc,WAAW,EAAEE,cAAc,CAAC,CAAC;EAE1E,MAAMyE,WAAW,GAAG,CAClBzF,SAAS,KAAK,OAAO,GAAG,UAAU,GAAG,SAAS,EAC9C,WAAW,EACX,UAAU,CACX;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACET,OAAA;IAAKyE,SAAS,EAAElF,aAAa,CAAC4G,WAAY;IAAAxB,QAAA,gBACxC3E,OAAA;MAAKyE,SAAS,EAAElF,aAAa,CAAC6G,aAAc;MAAAzB,QAAA,gBAC1C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}