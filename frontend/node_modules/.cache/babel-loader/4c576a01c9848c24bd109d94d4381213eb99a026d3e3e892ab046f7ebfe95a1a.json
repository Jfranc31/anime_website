{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Documents\\\\anime_website\\\\anime_website\\\\frontend\\\\src\\\\cards\\\\AnimeCard.js\",\n  _s = $RefreshSig$();\n/**\r\n * src/cards/AnimeCard.js\r\n * Description: React component for rendering an anime card.\r\n */\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport cardsStyles from '../styles/components/cards.module.css';\n\n/**\r\n * Functional component representing an anime card.\r\n * @param {Object} props - Props passed to the component.\r\n * @param {Object} props.anime - Anime object containing details like titles, images, etc.\r\n * @param {Function} props.onTopRightButtonClick - Callback function for top-right button click.\r\n * @param {Function} props.handleGenreClick - Callback function for genre click.\r\n * @returns {JSX.Element} - Rendered anime card component.\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AnimeCard({\n  anime,\n  name,\n  onTopRightButtonClick,\n  hideTopRightButton = false,\n  layout,\n  handleGenreClick,\n  status\n}) {\n  _s();\n  // State to track hover state\n  const [isHovered, setIsHovered] = useState(false);\n  const [titleHeight, setTitleHeight] = useState('auto');\n  const titleRef = useRef(null);\n\n  // Use useEffect to measure and set the title height after render\n  useEffect(() => {\n    if (titleRef.current) {\n      const height = titleRef.current.scrollHeight;\n      setTitleHeight(height);\n    }\n  }, [anime.titles.english]); // Re-measure if title changes\n\n  const formatTimeUntilNextEpisode = (timeUntilAiring, episode) => {\n    const days = Math.floor(timeUntilAiring / (3600 * 24));\n    const hours = Math.floor(timeUntilAiring % (3600 * 24) / 3600);\n    return `Ep ${episode} airing in\n            ${days} days, ${hours} hours`;\n  };\n  const renderStatusIndicator = () => {\n    if (!status) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${cardsStyles.statusIndicator} ${cardsStyles[status.toLowerCase()]}`,\n      title: `Status: ${status}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this);\n  };\n\n  // Add this helper function to determine season\n  const getSeason = month => {\n    if (!month) return '';\n    const monthNum = parseInt(month);\n    if (monthNum >= 3 && monthNum <= 5) return 'Spring';\n    if (monthNum >= 6 && monthNum <= 8) return 'Summer';\n    if (monthNum >= 9 && monthNum <= 11) return 'Fall';\n    return 'Winter';\n  };\n\n  // Update the getHeaderInfo function\n  const getHeaderInfo = () => {\n    const currentYear = new Date().getFullYear();\n    const startYear = anime.releaseData.startDate.year;\n    const startMonth = anime.releaseData.startDate.month;\n    const endYear = anime.releaseData.endDate.year;\n    const nextEpisode = anime.nextAiringEpisode;\n    const season = getSeason(startMonth);\n    if (anime.releaseData.releaseStatus === 'Finished Releasing') {\n      if (startYear !== endYear) {\n        return `${startYear}-${endYear}`;\n      }\n      return `${season} ${startYear}`;\n    }\n    if (nextEpisode !== null) {\n      if (nextEpisode.episode !== null) {\n        return formatTimeUntilNextEpisode(nextEpisode.timeUntilAiring, nextEpisode.episode);\n      }\n    }\n    if (startYear < currentYear && anime.releaseData.releaseStatus === 'Currently Releasing') {\n      return `Airing Since ${startYear}`;\n    }\n    if (anime.releaseData.releaseStatus === 'Not Yet Released') {\n      return `${season} ${startYear}`;\n    }\n    return 'Airing';\n  };\n  const parseDescription = description => {\n    if (!description) return [];\n\n    // First handle <b> tags by preserving them\n    const preserveBoldTags = description.replace(/<b>/g, '###BOLDSTART###').replace(/<\\/b>/g, '###BOLDEND###');\n\n    // Handle <i> tags by preserving them\n    const preserveItalicTags = preserveBoldTags.replace(/<i>/g, '###ITALICSTART###').replace(/<\\/i>/g, '###ITALICEND###');\n\n    // Split by <br> tags\n    const paragraphs = preserveItalicTags.split(/<br>/);\n    return paragraphs.map(paragraph => {\n      // Remove closing br tags and trim whitespace\n      const cleanParagraph = paragraph.replace(/<\\/br>/g, '').trim();\n\n      // Restore <b> tags\n      return cleanParagraph.replace(/###BOLDSTART###/g, '<b>').replace(/###BOLDEND###/g, '</b>').replace(/###ITALICSTART###/g, '<i>').replace(/###ITALICEND###/g, '</i>');\n    }).filter(p => p);\n  };\n  const formatLength = anime => {\n    if (anime.typings.Format === 'Movie') {\n      const duration = parseInt(anime.lengths.EpisodeDuration);\n      if (!duration) return 'Movie';\n      const hours = Math.floor(duration / 60);\n      const minutes = duration % 60;\n      if (hours > 0) {\n        return `${hours}h ${minutes}m`;\n      }\n      return `${minutes}m`;\n    }\n    const episodes = anime.lengths.Episodes;\n    if (!episodes) return '';\n    return episodes === '1' ? '1 episode' : `${episodes} episodes`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${cardsStyles.card} ${layout === 'wide' ? cardsStyles.wide : ''} ${layout === 'compact' ? cardsStyles.compact : ''}`,\n    children: layout === 'compact' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: cardsStyles.card2,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cardsStyles.imgContainer,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: anime.images.image,\n            alt: anime.titles.english\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cardsStyles.titleAndProgress,\n        style: {\n          minHeight: titleHeight\n        },\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          className: cardsStyles.navLink,\n          to: `/anime/${anime._id}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cardsStyles.titleWrapper,\n            children: [renderStatusIndicator(), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: cardsStyles.animeTitle,\n              ref: titleRef,\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cardsStyles.genres,\n          children: anime.genres.map(genre => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: cardsStyles.genre,\n            onClick: () => handleGenreClick(genre),\n            children: genre\n          }, genre, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cardsStyles.formatInfo,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: cardsStyles.format,\n          children: anime.typings.Format\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), formatLength(anime) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cardsStyles.episodes,\n          children: formatLength(anime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cardsStyles.airingInfo,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: cardsStyles.airingDate,\n          children: getHeaderInfo()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cardsStyles.releaseStatus,\n          children: anime.releaseData.releaseStatus === 'Currently Releasing' && !anime.nextAiringEpisode ? 'Releasing' : anime.releaseData.releaseStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // Default and Wide layouts\n    _jsxDEV(\"div\", {\n      className: `${cardsStyles.animeCard} ${isHovered ? cardsStyles.hovered : ''}`,\n      onMouseEnter: () => setIsHovered(true),\n      onMouseLeave: () => setIsHovered(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: cardsStyles.card2,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cardsStyles.imgContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: anime.images.image,\n            alt: anime.titles.english\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cardsStyles.titleAndProgress,\n            style: {\n              height: titleHeight\n            },\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              className: cardsStyles.navLink,\n              to: `/anime/${anime._id}`,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: cardsStyles.titleWrapper,\n                children: [renderStatusIndicator(), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: cardsStyles.animeTitle,\n                  ref: titleRef,\n                  children: name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), layout === 'wide' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cardsStyles.extendedInfo,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: cardsStyles.header,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: cardsStyles.date,\n            children: getHeaderInfo()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cardsStyles.typings,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: anime.typings.Format\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 19\n            }, this), formatLength(anime) && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: cardsStyles.separator,\n                children: \"\\u2022\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: formatLength(anime)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cardsStyles.scrollWrap,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cardsStyles.description,\n            children: parseDescription(anime.description).map((paragraph, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n              className: cardsStyles.paragraph,\n              dangerouslySetInnerHTML: {\n                __html: paragraph\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cardsStyles.footer,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cardsStyles.genres,\n            children: anime.genres.map(genre => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: cardsStyles.genre,\n              onClick: () => handleGenreClick(genre),\n              children: genre\n            }, genre, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this), isHovered && !hideTopRightButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: cardsStyles.topRightButton,\n        onClick: () => onTopRightButtonClick(anime),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n\n// Exporting the AnimeCard component as the default export\n_s(AnimeCard, \"/fQUGGHcu0iGF0/g3HVD0gB0Shc=\");\n_c = AnimeCard;\nexport default AnimeCard;\nvar _c;\n$RefreshReg$(_c, \"AnimeCard\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Link","cardsStyles","jsxDEV","_jsxDEV","Fragment","_Fragment","AnimeCard","anime","name","onTopRightButtonClick","hideTopRightButton","layout","handleGenreClick","status","_s","isHovered","setIsHovered","titleHeight","setTitleHeight","titleRef","current","height","scrollHeight","titles","english","formatTimeUntilNextEpisode","timeUntilAiring","episode","days","Math","floor","hours","renderStatusIndicator","className","statusIndicator","toLowerCase","title","fileName","_jsxFileName","lineNumber","columnNumber","getSeason","month","monthNum","parseInt","getHeaderInfo","currentYear","Date","getFullYear","startYear","releaseData","startDate","year","startMonth","endYear","endDate","nextEpisode","nextAiringEpisode","season","releaseStatus","parseDescription","description","preserveBoldTags","replace","preserveItalicTags","paragraphs","split","map","paragraph","cleanParagraph","trim","filter","p","formatLength","typings","Format","duration","lengths","EpisodeDuration","minutes","episodes","Episodes","card","wide","compact","children","card2","imgContainer","src","images","image","alt","titleAndProgress","style","minHeight","navLink","to","_id","titleWrapper","animeTitle","ref","genres","genre","onClick","formatInfo","format","airingInfo","airingDate","animeCard","hovered","onMouseEnter","onMouseLeave","extendedInfo","header","date","separator","scrollWrap","index","dangerouslySetInnerHTML","__html","footer","topRightButton","_c","$RefreshReg$"],"sources":["C:/Users/david/Documents/anime_website/anime_website/frontend/src/cards/AnimeCard.js"],"sourcesContent":["/**\r\n * src/cards/AnimeCard.js\r\n * Description: React component for rendering an anime card.\r\n */\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport cardsStyles from '../styles/components/cards.module.css';\r\n\r\n/**\r\n * Functional component representing an anime card.\r\n * @param {Object} props - Props passed to the component.\r\n * @param {Object} props.anime - Anime object containing details like titles, images, etc.\r\n * @param {Function} props.onTopRightButtonClick - Callback function for top-right button click.\r\n * @param {Function} props.handleGenreClick - Callback function for genre click.\r\n * @returns {JSX.Element} - Rendered anime card component.\r\n */\r\nfunction AnimeCard({\r\n  anime,\r\n  name,\r\n  onTopRightButtonClick,\r\n  hideTopRightButton = false,\r\n  layout,\r\n  handleGenreClick,\r\n  status\r\n}) {\r\n  // State to track hover state\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [titleHeight, setTitleHeight] = useState('auto');\r\n  const titleRef = useRef(null);\r\n\r\n  // Use useEffect to measure and set the title height after render\r\n  useEffect(() => {\r\n    if (titleRef.current) {\r\n      const height = titleRef.current.scrollHeight;\r\n      setTitleHeight(height);\r\n    }\r\n  }, [anime.titles.english]); // Re-measure if title changes\r\n\r\n  const formatTimeUntilNextEpisode = (timeUntilAiring, episode) => {\r\n    const days = Math.floor(timeUntilAiring / (3600 * 24));\r\n    const hours = Math.floor((timeUntilAiring % (3600 * 24)) / 3600);\r\n\r\n    return `Ep ${episode} airing in\r\n            ${days} days, ${hours} hours`;\r\n  };\r\n\r\n  const renderStatusIndicator = () => {\r\n      if (!status) return null;\r\n  \r\n      return (\r\n        <div\r\n          className={`${cardsStyles.statusIndicator} ${cardsStyles[status.toLowerCase()]}`}\r\n          title={`Status: ${status}`}\r\n        />\r\n      );\r\n    };\r\n\r\n  // Add this helper function to determine season\r\n  const getSeason = (month) => {\r\n    if (!month) return '';\r\n    const monthNum = parseInt(month);\r\n    if (monthNum >= 3 && monthNum <= 5) return 'Spring';\r\n    if (monthNum >= 6 && monthNum <= 8) return 'Summer';\r\n    if (monthNum >= 9 && monthNum <= 11) return 'Fall';\r\n    return 'Winter';\r\n  };\r\n\r\n  // Update the getHeaderInfo function\r\n  const getHeaderInfo = () => {\r\n    const currentYear = new Date().getFullYear();\r\n    const startYear = anime.releaseData.startDate.year;\r\n    const startMonth = anime.releaseData.startDate.month;\r\n    const endYear = anime.releaseData.endDate.year;\r\n    const nextEpisode = anime.nextAiringEpisode;\r\n    const season = getSeason(startMonth);\r\n\r\n    if (anime.releaseData.releaseStatus === 'Finished Releasing') {\r\n      if (startYear !== endYear) {\r\n        return `${startYear}-${endYear}`;\r\n      }\r\n      return `${season} ${startYear}`;\r\n    }\r\n\r\n    if (nextEpisode !== null) {\r\n      if (nextEpisode.episode !== null) {\r\n        return formatTimeUntilNextEpisode(nextEpisode.timeUntilAiring, nextEpisode.episode);\r\n      }\r\n    }\r\n\r\n    if ( startYear < currentYear && anime.releaseData.releaseStatus === 'Currently Releasing') {\r\n      return `Airing Since ${startYear}`;\r\n    }\r\n\r\n    if ( anime.releaseData.releaseStatus === 'Not Yet Released') {\r\n      return `${season} ${startYear}`\r\n    }\r\n\r\n    return 'Airing';\r\n  };\r\n\r\n  const parseDescription = (description) => {\r\n    if (!description) return [];\r\n\r\n    // First handle <b> tags by preserving them\r\n    const preserveBoldTags = description.replace(/<b>/g, '###BOLDSTART###')\r\n                                      .replace(/<\\/b>/g, '###BOLDEND###');\r\n\r\n    // Handle <i> tags by preserving them\r\n    const preserveItalicTags = preserveBoldTags.replace(/<i>/g, '###ITALICSTART###')\r\n                                              .replace(/<\\/i>/g, '###ITALICEND###')\r\n\r\n    // Split by <br> tags\r\n    const paragraphs = preserveItalicTags.split(/<br>/);\r\n\r\n    return paragraphs.map(paragraph => {\r\n      // Remove closing br tags and trim whitespace\r\n      const cleanParagraph = paragraph.replace(/<\\/br>/g, '').trim();\r\n\r\n      // Restore <b> tags\r\n      return cleanParagraph.replace(/###BOLDSTART###/g, '<b>')\r\n                          .replace(/###BOLDEND###/g, '</b>')\r\n                          .replace(/###ITALICSTART###/g, '<i>')\r\n                          .replace(/###ITALICEND###/g, '</i>');\r\n    }).filter(p => p);\r\n  };\r\n\r\n  const formatLength = (anime) => {\r\n    if (anime.typings.Format === 'Movie') {\r\n      const duration = parseInt(anime.lengths.EpisodeDuration);\r\n      if (!duration) return 'Movie';\r\n\r\n      const hours = Math.floor(duration / 60);\r\n      const minutes = duration % 60;\r\n\r\n      if (hours > 0) {\r\n        return `${hours}h ${minutes}m`;\r\n      }\r\n      return `${minutes}m`;\r\n    }\r\n\r\n    const episodes = anime.lengths.Episodes;\r\n    if (!episodes) return '';\r\n\r\n    return episodes === '1' ? '1 episode' : `${episodes} episodes`;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`${cardsStyles.card} ${layout === 'wide' ? cardsStyles.wide : ''} ${layout === 'compact' ? cardsStyles.compact : ''}`}\r\n    >\r\n      {layout === 'compact' ? (\r\n        <>\r\n          <div className={cardsStyles.card2}>\r\n            <div className={cardsStyles.imgContainer}>\r\n              <img src={anime.images.image} alt={anime.titles.english} />\r\n            </div>\r\n          </div>\r\n          <div className={cardsStyles.titleAndProgress} style={{ minHeight: titleHeight }}>\r\n            <Link className={cardsStyles.navLink} to={`/anime/${anime._id}`}>\r\n              <div className={cardsStyles.titleWrapper}>\r\n                {renderStatusIndicator()}\r\n                <div className={cardsStyles.animeTitle} ref={titleRef}>\r\n                  {name}\r\n                </div>\r\n              </div>\r\n            </Link>\r\n            <div className={cardsStyles.genres}>\r\n              {anime.genres.map((genre) => (\r\n                <button\r\n                  key={genre}\r\n                  className={cardsStyles.genre}\r\n                  onClick={() => handleGenreClick(genre)}\r\n                >\r\n                  {genre}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className={cardsStyles.formatInfo}>\r\n            <div className={cardsStyles.format}>\r\n              {anime.typings.Format}\r\n            </div>\r\n            {formatLength(anime) && (\r\n              <div className={cardsStyles.episodes}>\r\n                {formatLength(anime)}\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className={cardsStyles.airingInfo}>\r\n            <div className={cardsStyles.airingDate}>{getHeaderInfo()}</div>\r\n            <div className={cardsStyles.releaseStatus}>\r\n              {anime.releaseData.releaseStatus === 'Currently Releasing' && !anime.nextAiringEpisode\r\n                ? 'Releasing'\r\n                : anime.releaseData.releaseStatus}\r\n            </div>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        // Default and Wide layouts\r\n        <div className={`${cardsStyles.animeCard} ${isHovered ? cardsStyles.hovered : ''}`}\r\n          onMouseEnter={() => setIsHovered(true)}\r\n          onMouseLeave={() => setIsHovered(false)}\r\n        >\r\n          <div className={cardsStyles.card2}>\r\n            <div className={cardsStyles.imgContainer}>\r\n              <img src={anime.images.image} alt={anime.titles.english} />\r\n              <div className={cardsStyles.titleAndProgress} style={{ height: titleHeight }}>\r\n                <Link className={cardsStyles.navLink} to={`/anime/${anime._id}`}>\r\n                <div className={cardsStyles.titleWrapper}>\r\n                  {renderStatusIndicator()}\r\n                  <div className={cardsStyles.animeTitle} ref={titleRef}>\r\n                    {name}\r\n                  </div>\r\n                </div>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {layout === 'wide' && (\r\n            <div className={cardsStyles.extendedInfo}>\r\n              <div className={cardsStyles.header}>\r\n                <div className={cardsStyles.date}>\r\n                  {getHeaderInfo()}\r\n                </div>\r\n                <div className={cardsStyles.typings}>\r\n                  <span>{anime.typings.Format}</span>\r\n                  {formatLength(anime) && (\r\n                    <>\r\n                      <span className={cardsStyles.separator}>•</span>\r\n                      <span>{formatLength(anime)}</span>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className={cardsStyles.scrollWrap}>\r\n                <div className={cardsStyles.description}>\r\n                  {parseDescription(anime.description).map((paragraph, index) => (\r\n                    <p key={index} className={cardsStyles.paragraph} dangerouslySetInnerHTML={{ __html: paragraph }} />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className={cardsStyles.footer}>\r\n                <div className={cardsStyles.genres}>\r\n                  {anime.genres.map((genre) => (\r\n                    <button\r\n                      key={genre}\r\n                      className={cardsStyles.genre}\r\n                      onClick={() => handleGenreClick(genre)}\r\n                    >\r\n                      {genre}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {isHovered && !hideTopRightButton && (\r\n            <button\r\n              className={cardsStyles.topRightButton}\r\n              onClick={() => onTopRightButtonClick(anime)}\r\n            >\r\n              Edit\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Exporting the AnimeCard component as the default export\r\nexport default AnimeCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}