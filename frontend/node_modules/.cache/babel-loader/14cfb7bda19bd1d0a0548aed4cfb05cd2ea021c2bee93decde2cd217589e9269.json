{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Documents\\\\anime_website\\\\anime_website\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useContext, useCallback } from 'react';\n// import { Link } from 'react-router-dom';\n// import axiosInstance from './../utils/axiosConfig';\n// import { useAnimeContext } from '../Context/AnimeContext';\n// import { useMangaContext } from '../Context/MangaContext';\n// import data from '../Context/ContextApi';\n// import homeStyles from '../styles/pages/Home.module.css';\n// import { fetchWithErrorHandling } from '../utils/apiUtils';\n\n// const Home = () => {\n//   const { animeList } = useAnimeContext();\n//   const { mangaList } = useMangaContext();\n//   const { userData } = useContext(data);\n//   const [latestActivities, setLatestActivities] = useState([]);\n//   const [userAnimeList, setUserAnimeList] = useState([]);\n//   const [userMangaList, setUserMangaList] = useState([]);\n//   const [hoveredCard, setHoveredCard] = useState(null);\n//   const [popupPosition, setPopupPosition] = useState({ left: '100%', top: '0' });\n\n//   const fetchLatestActivities = useCallback(async () => {\n//     try {\n//       const data = await fetchWithErrorHandling(`/latest-activities/${userData._id}`);\n//       const sortedActivities = data.sort(\n//         (a, b) => new Date(b.activityTimestamp) - new Date(a.activityTimestamp)\n//       );\n//       setLatestActivities(sortedActivities);\n//     } catch (error) {\n//       setLatestActivities([]);\n//     }\n//   }, [userData._id]);\n\n//   const fetchUserList = useCallback(async () => {\n//     try {\n//       const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\n//       setUserAnimeList(data.animes);\n//       setUserMangaList(data.mangas);\n//     } catch (error) {\n//       setUserAnimeList([]);\n//       setUserMangaList([]);\n//     }\n//   }, [userData._id]);\n\n//   useEffect(() => {\n//     fetchLatestActivities();\n//     fetchUserList();\n//   }, [userData._id, fetchLatestActivities, fetchUserList]);\n\n//   const getAnimeById = (animeId) => {\n//     return animeList.find((anime) => anime._id === animeId);\n//   };\n\n//   const getMangaById = (mangaId) => {\n//     return mangaList.find((manga) => manga._id === mangaId);\n//   };\n\n//   const filterAnimeByWatching = () => {\n//     return userAnimeList\n//       .filter((userAnime) => userAnime.status === 'Watching')\n//       .map((userAnime) => ({\n//         animeId: userAnime.animeId,\n//         currentEpisode: userAnime.currentEpisode,\n//         status: userAnime.status,\n//         animeDetails: getAnimeById(userAnime.animeId),\n//       }));\n//   };\n\n//   const filterMangaByReading = () => {\n//     return userMangaList\n//       .filter((userManga) => userManga.status === 'Reading')\n//       .map((userManga) => ({\n//         mangaId: userManga.mangaId,\n//         currentChapter: userManga.currentChapter,\n//         currentVolume: userManga.currentVolume,\n//         status: userManga.status,\n//         mangaDetails: getMangaById(userManga.mangaId),\n//       }));\n//   };\n\n//   const handleIncrementWatchCount = async (id, type) => {\n//     console.log('Incrementing count:', { id, type });\n\n//     if (type === 'anime') {\n//       const currentAnime = userAnimeList.find(anime => anime.animeId === id);\n//       console.log('Current anime:', currentAnime);\n\n//       if (currentAnime) {\n//         const newEpisodeCount = currentAnime.currentEpisode + 1;\n\n//         // Update the local state immediately\n//         setUserAnimeList((prevList) =>\n//           prevList.map((anime) =>\n//             anime.animeId === id\n//               ? { ...anime, currentEpisode: newEpisodeCount }\n//               : anime\n//           )\n//         );\n\n//         try {\n//           // Make an API call to update the current episode on the backend\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateAnime`, {\n//             animeId: id,\n//             status: userData.status || 'Watching',\n//             currentEpisode: newEpisodeCount,\n//           });\n\n//           if (!response.data) {\n//             console.error('Failed to update on the server');\n//           } else {\n//             fetchLatestActivities();\n//           }\n//         } catch (error) {\n//           console.error('Error updating user progress:', error);\n//         }\n//       }\n//     }\n//     if (type === 'manga') {\n//       const currentManga = userMangaList.find(manga => manga.mangaId === id);\n//       console.log('Current manga:', currentManga);\n\n//       if (currentManga) {\n//         const newChapterCount = currentManga.currentChapter + 1;\n//         const volumeCount = currentManga.currentVolume;\n\n//         // Update the local state immediately\n//         setUserMangaList((prevList) =>\n//           prevList.map((manga) =>\n//             manga.mangaId === id\n//               ? { ...manga, currentChapter: newChapterCount, currentVolume: volumeCount }\n//               : manga\n//           )\n//         );\n\n//         console.log('UserMangaList: ', userMangaList);\n\n//         try {\n//           // Make an API call to update the current chapter on the backend\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateManga`, {\n//             mangaId: id,\n//             status: userData.status || 'Reading',\n//             currentChapter: newChapterCount,\n//             currentVolume: volumeCount\n//           });\n\n//           if (!response.data) {\n//             console.log('Failed to update on the server');\n//           } else {\n//             fetchLatestActivities();\n//           }\n//         } catch (error) {\n//           console.error('Error updating user progress:', error);\n//         }\n//       }\n//     }\n//   };\n\n//   const animeActivities = latestActivities.filter(\n//     (activity) => activity.animeDetails\n//   );\n//   const mangaActivities = latestActivities.filter(\n//     (activity) => activity.mangaDetails\n//   );\n//   const watchingAnime = filterAnimeByWatching();\n//   const readingManga = filterMangaByReading();\n\n//   const formatTimeUntilNextEpisode = (timeUntilAiring) => {\n//     const days = Math.floor(timeUntilAiring / (3600 * 24));\n//     const hours = Math.floor((timeUntilAiring % (3600 * 24)) / 3600);\n//     const minutes = Math.floor((timeUntilAiring % 3600) / 60);\n\n//     return `${days}d ${hours}h ${minutes}m`;\n//   };\n\n//   const handleMouseEnter = (animeId, event) => {\n//     const popupWidth = 300; // Set this to the width of your popup\n//     const cardElement = event.currentTarget; // Get the card element\n\n//     const cardRect = cardElement.getBoundingClientRect(); // Get the card's position\n\n//     // Get the activity page width\n//     const activityPage = document.querySelector(`.${homeStyles.activityPage}`);\n//     const activityPageRect = activityPage.getBoundingClientRect();\n//     const activityPageRightEdge = activityPageRect.right;\n\n//     // Calculate the right edge of the popup\n//     const rightEdge = cardRect.right + popupWidth;\n\n//     if (rightEdge > activityPageRightEdge) {\n//       // If it overflows, position it to the left of the card\n//       setPopupPosition({\n//         left: `-215%`, // Position to the left\n//         top: `0`, // Align with the card's top\n//       });\n//     } else {\n//       // Otherwise, position it to the right of the card\n//       setPopupPosition({\n//         left: `100%`, // Position to the right\n//         top: `0`, // Align with the card's top\n//       });\n//     }\n\n//     setHoveredCard(animeId);\n//   };\n\n//   return (\n//     <div className={homeStyles.activityPage}>\n//       {animeActivities.length > 0 && (\n//         <>\n//           <div className={homeStyles.sectionContainer}>\n//             <div className={homeStyles.headerContainer}>\n//               <h1>Anime Activities</h1>\n//             </div>\n//             <div className={homeStyles.activitiesGrid}>\n//               {animeActivities.slice(0, 15).map((activity) => (\n//                 <div key={activity._id} className={homeStyles.activityCard}>\n//                   <Link to={`/anime/${activity.animeDetails._id}`}>\n//                     <div className={homeStyles.activityImage}>\n//                       <img\n//                         src={activity.animeDetails.images.image}\n//                         alt={activity.animeDetails.titles.english}\n//                       />\n//                     </div>\n//                   </Link>\n//                   <div className={homeStyles.activityInfo}>\n//                     <h3>{activity.animeDetails.titles.english || activity.animeDetails.titles.romaji}</h3>\n//                     <p className={homeStyles.activityStatus}>\n//                       {activity.status === 'Completed'\n//                         ? 'Completed'\n//                         : activity.status === 'Planning'\n//                         ? `Planning to watch`\n//                         : activity.currentEpisode === 0 &&\n//                             activity.status === 'Watching'\n//                           ? 'Started watching'\n//                           : `Episode ${activity.currentEpisode}`}\n//                     </p>\n//                     <span className={homeStyles.activityTimestamp}>\n//                       {new Date(\n//                         activity.activityTimestamp\n//                       ).toLocaleDateString()}\n//                     </span>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           {watchingAnime.length > 0 && (\n//             <div className={homeStyles.progressSection}>\n//               <h2>Currently Watching</h2>\n//               <div className={homeStyles.progressGrid}>\n//                 {watchingAnime.map((activity) => (\n//                   <div\n//                     key={activity.animeId}\n//                     className={homeStyles.progressCard}\n//                     onMouseEnter={(event) => handleMouseEnter(activity.animeId, event)}\n//                     onMouseLeave={() => setHoveredCard(null)}\n//                   >\n//                     <Link\n//                       to={`/anime/${activity.animeId}`}\n//                     >\n//                       <img\n//                         src={getAnimeById(activity.animeId)?.images.image}\n//                         alt={getAnimeById(activity.animeId)?.titles.english}\n//                       />\n//                     </Link>\n//                     <div className={homeStyles.progressInfo}>\n//                       {hoveredCard === activity.animeId ? (\n//                         <div className={homeStyles.episodeInfo}>\n//                           <span>\n//                             {activity.currentEpisode} {/* Show the current episode */}\n//                           </span>\n//                           <span\n//                             className={homeStyles.incrementWatchCount}\n//                             onClick={() => handleIncrementWatchCount(activity.animeId, 'anime')} // Increment function\n//                           >\n//                             +\n//                           </span>\n//                         </div>\n//                       ) : (\n//                         getAnimeById(activity.animeId)?.nextAiringEpisode?.airingAt && (\n//                           <div className={homeStyles.episodeInfo}>\n//                             <span>\n//                               {getAnimeById(activity.animeId)?.nextAiringEpisode?.episode}\n//                             </span>\n//                             <span>\n//                               {formatTimeUntilNextEpisode(getAnimeById(activity.animeId)?.nextAiringEpisode?.timeUntilAiring)}\n//                             </span>\n//                           </div>\n//                         )\n//                       )}\n//                     </div>\n//                     {hoveredCard === activity.animeId && (\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\n//                         <h4>{getAnimeById(activity.animeId)?.titles.english || getAnimeById(activity.animeId)?.titles.romaji}</h4>\n//                         <p>Progress: {activity.currentEpisode}/{getAnimeById(activity.animeId)?.lengths.Episodes}</p>\n//                       </div>\n//                     )}\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n//           )}\n//         </>\n//       )}\n\n//       {mangaActivities.length > 0 && (\n//         <>\n//           <div className={homeStyles.sectionContainer}>\n//             <div className={homeStyles.headerContainer}>\n//               <h1>Manga Activities</h1>\n//             </div>\n//             <div className={homeStyles.activitiesGrid}>\n//               {mangaActivities.slice(0, 15).map((activity) => (\n//                 <div key={activity._id} className={homeStyles.activityCard}>\n//                   <Link to={`/manga/${activity.mangaDetails._id}`}>\n//                     <div className={homeStyles.activityImage}>\n//                       <img\n//                         src={activity.mangaDetails.images.image}\n//                         alt={activity.mangaDetails.titles.english}\n//                       />\n//                     </div>\n//                   </Link>\n//                   <div className={homeStyles.activityInfo}>\n//                     <h3>{activity.mangaDetails.titles.english || activity.mangaDetails.titles.romaji}</h3>\n//                     <p className={homeStyles.activityStatus}>\n//                       {activity.status === 'Completed'\n//                         ? 'Completed'\n//                         : activity.status === 'Planning'\n//                         ? 'Planning to read'\n//                         : activity.currentChapter === 0 &&\n//                             activity.status === 'Reading'\n//                           ? 'Started reading'\n//                           : `Chapter ${activity.currentChapter}`}\n//                     </p>\n//                     <span className={homeStyles.activityTimestamp}>\n//                       {new Date(\n//                         activity.activityTimestamp\n//                       ).toLocaleDateString()}\n//                     </span>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n\n//           {readingManga.length > 0 && (\n//             <div className={homeStyles.progressSection}>\n//               <h2>Currently Reading</h2>\n//               <div className={homeStyles.progressGrid}>\n//                 {readingManga.map((activity) => (\n//                   <div\n//                     key={activity.mangaId}\n//                     className={homeStyles.progressCard}\n//                     onMouseEnter={(event) => handleMouseEnter(activity.mangaId, event)}\n//                     onMouseLeave={() => setHoveredCard(null)}\n//                   >\n//                     <Link\n//                       to={`/manga/${activity.mangaId}`}\n//                     >\n//                       <img\n//                         src={getMangaById(activity.mangaId)?.images.image}\n//                         alt={getMangaById(activity.mangaId)?.titles.english}\n//                       />\n//                     </Link>\n//                     <div className={homeStyles.progressInfo}>\n//                       {hoveredCard === activity.mangaId && (\n//                         <div className={homeStyles.episodeInfo}>\n//                           <span>\n//                             {activity.currentChapter}\n//                           </span>\n//                           <span\n//                             className={homeStyles.incrementWatchCount}\n//                             onClick={() => handleIncrementWatchCount(activity.mangaId, 'manga')}\n//                           >\n//                             +\n//                           </span>\n//                         </div>\n//                       )}\n//                     </div>\n//                     {hoveredCard === activity.mangaId && (\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\n//                         <h4>{getMangaById(activity.mangaId)?.titles.english || getMangaById(activity.mangaId)?.titles.romaji}</h4>\n//                         <p>Progress: {activity.currentChapter}/{getMangaById(activity.mangaId)?.lengths.chapters}</p>\n//                       </div>\n//                     )}\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n//           )}\n//         </>\n//       )}\n\n//       {animeActivities.length === 0 && mangaActivities.length === 0 && (\n//         <div className={homeStyles.emptyState}>\n//           <h2>No Recent Activities</h2>\n//           <p>\n//             Start watching anime or reading manga to see your activities here!\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Home;\n\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport axiosInstance from './../utils/axiosConfig';\nimport data from '../Context/ContextApi';\nimport styles from '../styles/pages/Home.module.css';\nimport { useAnimeContext } from '../Context/AnimeContext';\nimport { useMangaContext } from '../Context/MangaContext';\nimport { fetchWithErrorHandling } from '../utils/apiUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const {\n    animeList\n  } = useAnimeContext();\n  const {\n    mangaList\n  } = useMangaContext();\n  const [activeTab, setActiveTab] = useState('activity');\n  const [view, setView] = useState('following');\n  const {\n    userData\n  } = useContext(data);\n  const [latestActivities, setLatestActivities] = useState([]);\n  const [userAnimeList, setUserAnimeList] = useState([]);\n  const [userMangaList, setUserMangaList] = useState([]);\n  const [hoveredCard, setHoveredCard] = useState(null);\n  const [popupPosition, setPopupPosition] = useState({\n    left: '100%',\n    top: '0'\n  });\n  const fetchLatestActivities = useCallback(async () => {\n    try {\n      const data = await fetchWithErrorHandling(`/latest-activities/${userData._id}`);\n      const sortedActivities = data.sort((a, b) => new Date(b.activityTimestamp) - new Date(a.activityTimestamp));\n      setLatestActivities(sortedActivities);\n    } catch (error) {\n      setLatestActivities([]);\n    }\n  }, [userData._id]);\n  const fetchUserList = useCallback(async () => {\n    try {\n      const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\n      setUserAnimeList(data.animes);\n      setUserMangaList(data.mangas);\n    } catch (error) {\n      setUserAnimeList([]);\n      setUserMangaList([]);\n    }\n  }, [userData._id]);\n  useEffect(() => {\n    fetchLatestActivities();\n    fetchUserList();\n  }, [userData._id, fetchLatestActivities, fetchUserList]);\n  const getAnimeById = animeId => {\n    return animeList.find(anime => anime._id === animeId);\n  };\n  const getMangaById = mangaId => {\n    return mangaList.find(manga => manga._id === mangaId);\n  };\n  const filterAnimeByWatching = () => {\n    return userAnimeList.filter(userAnime => userAnime.status === 'Watching').map(userAnime => ({\n      animeId: userAnime.animeId,\n      currentEpisode: userAnime.currentEpisode,\n      status: userAnime.status,\n      animeDetails: getAnimeById(userAnime.animeId)\n    }));\n  };\n  const filterMangaByReading = () => {\n    return userMangaList.filter(userManga => userManga.status === 'Reading').map(userManga => ({\n      mangaId: userManga.mangaId,\n      currentChapter: userManga.currentChapter,\n      currentVolume: userManga.currentVolume,\n      status: userManga.status,\n      mangaDetails: getMangaById(userManga.mangaId)\n    }));\n  };\n  const handleIncrementWatchCount = async (id, type) => {\n    console.log('Incrementing count:', {\n      id,\n      type\n    });\n    if (type === 'anime') {\n      const currentAnime = userAnimeList.find(anime => anime.animeId === id);\n      console.log('Current anime:', currentAnime);\n      if (currentAnime) {\n        const newEpisodeCount = currentAnime.currentEpisode + 1;\n\n        // Update the local state immediately\n        setUserAnimeList(prevList => prevList.map(anime => anime.animeId === id ? {\n          ...anime,\n          currentEpisode: newEpisodeCount\n        } : anime));\n        try {\n          // Make an API call to update the current episode on the backend\n          const response = await axiosInstance.post(`/users/${userData._id}/updateAnime`, {\n            animeId: id,\n            status: userData.status || 'Watching',\n            currentEpisode: newEpisodeCount\n          });\n          if (!response.data) {\n            console.error('Failed to update on the server');\n          } else {\n            fetchLatestActivities();\n          }\n        } catch (error) {\n          console.error('Error updating user progress:', error);\n        }\n      }\n    }\n    if (type === 'manga') {\n      const currentManga = userMangaList.find(manga => manga.mangaId === id);\n      console.log('Current manga:', currentManga);\n      if (currentManga) {\n        const newChapterCount = currentManga.currentChapter + 1;\n        const volumeCount = currentManga.currentVolume;\n\n        // Update the local state immediately\n        setUserMangaList(prevList => prevList.map(manga => manga.mangaId === id ? {\n          ...manga,\n          currentChapter: newChapterCount,\n          currentVolume: volumeCount\n        } : manga));\n        console.log('UserMangaList: ', userMangaList);\n        try {\n          // Make an API call to update the current chapter on the backend\n          const response = await axiosInstance.post(`/users/${userData._id}/updateManga`, {\n            mangaId: id,\n            status: userData.status || 'Reading',\n            currentChapter: newChapterCount,\n            currentVolume: volumeCount\n          });\n          if (!response.data) {\n            console.log('Failed to update on the server');\n          } else {\n            fetchLatestActivities();\n          }\n        } catch (error) {\n          console.error('Error updating user progress:', error);\n        }\n      }\n    }\n  };\n  const animeActivities = latestActivities.filter(activity => activity.animeDetails);\n  const mangaActivities = latestActivities.filter(activity => activity.mangaDetails);\n  const watchingAnime = filterAnimeByWatching();\n  const readingManga = filterMangaByReading();\n  const formatTimeUntilNextEpisode = timeUntilAiring => {\n    const days = Math.floor(timeUntilAiring / (3600 * 24));\n    const hours = Math.floor(timeUntilAiring % (3600 * 24) / 3600);\n    const minutes = Math.floor(timeUntilAiring % 3600 / 60);\n    return `${days}d ${hours}h ${minutes}m`;\n  };\n  const handleMouseEnter = (animeId, event) => {\n    const popupWidth = 300; // Set this to the width of your popup\n    const cardElement = event.currentTarget; // Get the card element\n\n    const cardRect = cardElement.getBoundingClientRect(); // Get the card's position\n\n    // Get the activity page width\n    const activityPage = document.querySelector(`.${styles.activityPage}`);\n    const activityPageRect = activityPage.getBoundingClientRect();\n    const activityPageRightEdge = activityPageRect.right;\n\n    // Calculate the right edge of the popup\n    const rightEdge = cardRect.right + popupWidth;\n    if (rightEdge > activityPageRightEdge) {\n      // If it overflows, position it to the left of the card\n      setPopupPosition({\n        left: `-215%`,\n        // Position to the left\n        top: `0` // Align with the card's top\n      });\n    } else {\n      // Otherwise, position it to the right of the card\n      setPopupPosition({\n        left: `100%`,\n        // Position to the right\n        top: `0` // Align with the card's top\n      });\n    }\n    setHoveredCard(animeId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tabContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.tab} ${activeTab === 'activity' ? styles.active : ''}`,\n        onClick: () => setActiveTab('activity'),\n        children: \"Activity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.tab} ${activeTab === 'inProgress' ? styles.active : ''}`,\n        onClick: () => setActiveTab('inProgress'),\n        children: \"In Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.viewToggle,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.toggleButton} ${view === 'anime' ? styles.active : ''}`,\n        onClick: () => setView('anime'),\n        children: \"Anime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.toggleButton} ${view === 'manga' ? styles.active : ''}`,\n        onClick: () => setView('manga'),\n        children: \"Manga\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Write a status...\",\n      className: styles.statusInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 7\n    }, this), activeTab === 'activity' ? view === 'anime' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.activityFeed,\n      children: animeActivities.map(activity => {\n        var _activity$animeDetail;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.activityCard,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.activityHeader,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://localhost:8080${userData === null || userData === void 0 ? void 0 : userData.avatar}`,\n              alt: userData.username,\n              className: styles.avatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.activityInfo,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.activityMeta,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: styles.username,\n                  children: userData.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: styles.timestamp,\n                  children: new Date(activity.activityTimestamp).toLocaleDateString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 667,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: styles.activityContent,\n                children: [activity.status === 'Completed' ? 'Completed' : activity.status === 'Planning' ? `Planning to watch` : activity.currentEpisode === 0 && activity.status === 'Watching' ? 'Started watching' : `Episode ${activity.currentEpisode}`, /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: styles.username,\n                  children: [\" \", ((_activity$animeDetail = activity.animeDetails.titles) === null || _activity$animeDetail === void 0 ? void 0 : _activity$animeDetail.english) || activity.animeDetails.titles.romaji]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 680,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 671,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: activity.animeDetails.images.image,\n                alt: activity.title,\n                className: styles.mediaImage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 682,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 15\n          }, this)\n        }, activity.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.activityFeed,\n      children: mangaActivities.map(activity => {\n        var _activity$mangaDetail;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.activityCard,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.activityHeader,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://localhost:8080${userData === null || userData === void 0 ? void 0 : userData.avatar}`,\n              alt: userData.username,\n              className: styles.avatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.activityInfo,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.activityMeta,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: styles.username,\n                  children: userData.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 704,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: styles.timestamp,\n                  children: new Date(activity.activityTimestamp).toLocaleDateString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 705,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: styles.activityContent,\n                children: [activity.status === 'Completed' ? 'Completed' : activity.status === 'Planning' ? `Planning to read` : activity.currentEpisode === 0 && activity.status === 'Reading' ? 'Started reading' : `Chapter ${activity.currentChapter}`, /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: styles.username,\n                  children: [\" \", ((_activity$mangaDetail = activity.mangaDetails.titles) === null || _activity$mangaDetail === void 0 ? void 0 : _activity$mangaDetail.english) || activity.mangaDetails.titles.romaji]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 718,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 709,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: activity.mangaDetails.images.image,\n                alt: activity.title,\n                className: styles.mediaImage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 720,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 15\n          }, this)\n        }, activity.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 11\n    }, this) : (/* Airing Schedule */\n    view === 'anime' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.airingGrid,\n      children: watchingAnime.map(anime => {\n        var _getAnimeById, _getAnimeById2, _getAnimeById2$nextAi, _getAnimeById3, _getAnimeById3$nextAi, _getAnimeById4, _getAnimeById4$nextAi;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.airingCard /*onMouseEnter={(event) => handleMouseEnter(anime.animeId, event)} onMouseLeave={() => setHoveredCard(null)}*/,\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/anime/${anime.animeId}`,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: (_getAnimeById = getAnimeById(anime.animeId)) === null || _getAnimeById === void 0 ? void 0 : _getAnimeById.images.image,\n              alt: anime.title,\n              className: styles.airingImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.airingInfo,\n            children: hoveredCard === anime.animeId ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.episodeNumber,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: anime.currentEpisode\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 750,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.airingTime,\n                onClick: () => handleIncrementWatchCount(anime.animeId, 'anime'),\n                children: \"+\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 753,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 21\n            }, this) : ((_getAnimeById2 = getAnimeById(anime.animeId)) === null || _getAnimeById2 === void 0 ? void 0 : (_getAnimeById2$nextAi = _getAnimeById2.nextAiringEpisode) === null || _getAnimeById2$nextAi === void 0 ? void 0 : _getAnimeById2$nextAi.airingAt) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.episodeInfo,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: (_getAnimeById3 = getAnimeById(anime.animeId)) === null || _getAnimeById3 === void 0 ? void 0 : (_getAnimeById3$nextAi = _getAnimeById3.nextAiringEpisode) === null || _getAnimeById3$nextAi === void 0 ? void 0 : _getAnimeById3$nextAi.episode\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 760,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: formatTimeUntilNextEpisode((_getAnimeById4 = getAnimeById(anime.animeId)) === null || _getAnimeById4 === void 0 ? void 0 : (_getAnimeById4$nextAi = _getAnimeById4.nextAiringEpisode) === null || _getAnimeById4$nextAi === void 0 ? void 0 : _getAnimeById4$nextAi.timeUntilAiring)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 759,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 17\n          }, this)]\n        }, anime.animeId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.airingGrid,\n      children: readingManga.map(manga => {\n        var _getMangaById;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.airingCard,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: (_getMangaById = getMangaById(manga.mangaId)) === null || _getMangaById === void 0 ? void 0 : _getMangaById.images.image,\n            alt: manga.title,\n            className: styles.airingImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 783,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.airingInfo,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.episodeNumber,\n              children: [\"Ep \", manga.currentChapter]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.airingTime,\n              children: manga.timeUntil\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 790,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 17\n          }, this)]\n        }, manga.mangaId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 780,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 613,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"bW/6Z2mS72Cx/9h6roNJSZMWHoQ=\", false, function () {\n  return [useAnimeContext, useMangaContext];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useCallback","Link","axiosInstance","data","styles","useAnimeContext","useMangaContext","fetchWithErrorHandling","jsxDEV","_jsxDEV","Home","_s","animeList","mangaList","activeTab","setActiveTab","view","setView","userData","latestActivities","setLatestActivities","userAnimeList","setUserAnimeList","userMangaList","setUserMangaList","hoveredCard","setHoveredCard","popupPosition","setPopupPosition","left","top","fetchLatestActivities","_id","sortedActivities","sort","a","b","Date","activityTimestamp","error","fetchUserList","animes","mangas","getAnimeById","animeId","find","anime","getMangaById","mangaId","manga","filterAnimeByWatching","filter","userAnime","status","map","currentEpisode","animeDetails","filterMangaByReading","userManga","currentChapter","currentVolume","mangaDetails","handleIncrementWatchCount","id","type","console","log","currentAnime","newEpisodeCount","prevList","response","post","currentManga","newChapterCount","volumeCount","animeActivities","activity","mangaActivities","watchingAnime","readingManga","formatTimeUntilNextEpisode","timeUntilAiring","days","Math","floor","hours","minutes","handleMouseEnter","event","popupWidth","cardElement","currentTarget","cardRect","getBoundingClientRect","activityPage","document","querySelector","activityPageRect","activityPageRightEdge","right","rightEdge","className","container","children","tabContainer","tab","active","onClick","fileName","_jsxFileName","lineNumber","columnNumber","viewToggle","toggleButton","placeholder","statusInput","activityFeed","_activity$animeDetail","activityCard","activityHeader","src","avatar","alt","username","activityInfo","activityMeta","timestamp","toLocaleDateString","activityContent","titles","english","romaji","images","image","title","mediaImage","_activity$mangaDetail","airingGrid","_getAnimeById","_getAnimeById2","_getAnimeById2$nextAi","_getAnimeById3","_getAnimeById3$nextAi","_getAnimeById4","_getAnimeById4$nextAi","airingCard","to","airingImage","airingInfo","episodeNumber","airingTime","nextAiringEpisode","airingAt","episodeInfo","episode","_getMangaById","timeUntil","_c","$RefreshReg$"],"sources":["C:/Users/david/Documents/anime_website/anime_website/frontend/src/pages/Home.js"],"sourcesContent":["// import React, { useState, useEffect, useContext, useCallback } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import axiosInstance from './../utils/axiosConfig';\r\n// import { useAnimeContext } from '../Context/AnimeContext';\r\n// import { useMangaContext } from '../Context/MangaContext';\r\n// import data from '../Context/ContextApi';\r\n// import homeStyles from '../styles/pages/Home.module.css';\r\n// import { fetchWithErrorHandling } from '../utils/apiUtils';\r\n\r\n// const Home = () => {\r\n//   const { animeList } = useAnimeContext();\r\n//   const { mangaList } = useMangaContext();\r\n//   const { userData } = useContext(data);\r\n//   const [latestActivities, setLatestActivities] = useState([]);\r\n//   const [userAnimeList, setUserAnimeList] = useState([]);\r\n//   const [userMangaList, setUserMangaList] = useState([]);\r\n//   const [hoveredCard, setHoveredCard] = useState(null);\r\n//   const [popupPosition, setPopupPosition] = useState({ left: '100%', top: '0' });\r\n\r\n//   const fetchLatestActivities = useCallback(async () => {\r\n//     try {\r\n//       const data = await fetchWithErrorHandling(`/latest-activities/${userData._id}`);\r\n//       const sortedActivities = data.sort(\r\n//         (a, b) => new Date(b.activityTimestamp) - new Date(a.activityTimestamp)\r\n//       );\r\n//       setLatestActivities(sortedActivities);\r\n//     } catch (error) {\r\n//       setLatestActivities([]);\r\n//     }\r\n//   }, [userData._id]);\r\n\r\n//   const fetchUserList = useCallback(async () => {\r\n//     try {\r\n//       const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\r\n//       setUserAnimeList(data.animes);\r\n//       setUserMangaList(data.mangas);\r\n//     } catch (error) {\r\n//       setUserAnimeList([]);\r\n//       setUserMangaList([]);\r\n//     }\r\n//   }, [userData._id]);\r\n\r\n//   useEffect(() => {\r\n//     fetchLatestActivities();\r\n//     fetchUserList();\r\n//   }, [userData._id, fetchLatestActivities, fetchUserList]);\r\n\r\n//   const getAnimeById = (animeId) => {\r\n//     return animeList.find((anime) => anime._id === animeId);\r\n//   };\r\n\r\n//   const getMangaById = (mangaId) => {\r\n//     return mangaList.find((manga) => manga._id === mangaId);\r\n//   };\r\n\r\n//   const filterAnimeByWatching = () => {\r\n//     return userAnimeList\r\n//       .filter((userAnime) => userAnime.status === 'Watching')\r\n//       .map((userAnime) => ({\r\n//         animeId: userAnime.animeId,\r\n//         currentEpisode: userAnime.currentEpisode,\r\n//         status: userAnime.status,\r\n//         animeDetails: getAnimeById(userAnime.animeId),\r\n//       }));\r\n//   };\r\n\r\n//   const filterMangaByReading = () => {\r\n//     return userMangaList\r\n//       .filter((userManga) => userManga.status === 'Reading')\r\n//       .map((userManga) => ({\r\n//         mangaId: userManga.mangaId,\r\n//         currentChapter: userManga.currentChapter,\r\n//         currentVolume: userManga.currentVolume,\r\n//         status: userManga.status,\r\n//         mangaDetails: getMangaById(userManga.mangaId),\r\n//       }));\r\n//   };\r\n\r\n//   const handleIncrementWatchCount = async (id, type) => {\r\n//     console.log('Incrementing count:', { id, type });\r\n\r\n//     if (type === 'anime') {\r\n//       const currentAnime = userAnimeList.find(anime => anime.animeId === id);\r\n//       console.log('Current anime:', currentAnime);\r\n\r\n//       if (currentAnime) {\r\n//         const newEpisodeCount = currentAnime.currentEpisode + 1;\r\n\r\n//         // Update the local state immediately\r\n//         setUserAnimeList((prevList) =>\r\n//           prevList.map((anime) =>\r\n//             anime.animeId === id\r\n//               ? { ...anime, currentEpisode: newEpisodeCount }\r\n//               : anime\r\n//           )\r\n//         );\r\n\r\n//         try {\r\n//           // Make an API call to update the current episode on the backend\r\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateAnime`, {\r\n//             animeId: id,\r\n//             status: userData.status || 'Watching',\r\n//             currentEpisode: newEpisodeCount,\r\n//           });\r\n\r\n//           if (!response.data) {\r\n//             console.error('Failed to update on the server');\r\n//           } else {\r\n//             fetchLatestActivities();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Error updating user progress:', error);\r\n//         }\r\n//       }\r\n//     }\r\n//     if (type === 'manga') {\r\n//       const currentManga = userMangaList.find(manga => manga.mangaId === id);\r\n//       console.log('Current manga:', currentManga);\r\n\r\n//       if (currentManga) {\r\n//         const newChapterCount = currentManga.currentChapter + 1;\r\n//         const volumeCount = currentManga.currentVolume;\r\n\r\n//         // Update the local state immediately\r\n//         setUserMangaList((prevList) =>\r\n//           prevList.map((manga) =>\r\n//             manga.mangaId === id\r\n//               ? { ...manga, currentChapter: newChapterCount, currentVolume: volumeCount }\r\n//               : manga\r\n//           )\r\n//         );\r\n\r\n//         console.log('UserMangaList: ', userMangaList);\r\n\r\n//         try {\r\n//           // Make an API call to update the current chapter on the backend\r\n//           const response = await axiosInstance.post(`/users/${userData._id}/updateManga`, {\r\n//             mangaId: id,\r\n//             status: userData.status || 'Reading',\r\n//             currentChapter: newChapterCount,\r\n//             currentVolume: volumeCount\r\n//           });\r\n\r\n//           if (!response.data) {\r\n//             console.log('Failed to update on the server');\r\n//           } else {\r\n//             fetchLatestActivities();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Error updating user progress:', error);\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const animeActivities = latestActivities.filter(\r\n//     (activity) => activity.animeDetails\r\n//   );\r\n//   const mangaActivities = latestActivities.filter(\r\n//     (activity) => activity.mangaDetails\r\n//   );\r\n//   const watchingAnime = filterAnimeByWatching();\r\n//   const readingManga = filterMangaByReading();\r\n\r\n//   const formatTimeUntilNextEpisode = (timeUntilAiring) => {\r\n//     const days = Math.floor(timeUntilAiring / (3600 * 24));\r\n//     const hours = Math.floor((timeUntilAiring % (3600 * 24)) / 3600);\r\n//     const minutes = Math.floor((timeUntilAiring % 3600) / 60);\r\n\r\n//     return `${days}d ${hours}h ${minutes}m`;\r\n//   };\r\n\r\n//   const handleMouseEnter = (animeId, event) => {\r\n//     const popupWidth = 300; // Set this to the width of your popup\r\n//     const cardElement = event.currentTarget; // Get the card element\r\n\r\n//     const cardRect = cardElement.getBoundingClientRect(); // Get the card's position\r\n\r\n//     // Get the activity page width\r\n//     const activityPage = document.querySelector(`.${homeStyles.activityPage}`);\r\n//     const activityPageRect = activityPage.getBoundingClientRect();\r\n//     const activityPageRightEdge = activityPageRect.right;\r\n\r\n//     // Calculate the right edge of the popup\r\n//     const rightEdge = cardRect.right + popupWidth;\r\n\r\n//     if (rightEdge > activityPageRightEdge) {\r\n//       // If it overflows, position it to the left of the card\r\n//       setPopupPosition({\r\n//         left: `-215%`, // Position to the left\r\n//         top: `0`, // Align with the card's top\r\n//       });\r\n//     } else {\r\n//       // Otherwise, position it to the right of the card\r\n//       setPopupPosition({\r\n//         left: `100%`, // Position to the right\r\n//         top: `0`, // Align with the card's top\r\n//       });\r\n//     }\r\n\r\n//     setHoveredCard(animeId);\r\n//   };\r\n\r\n//   return (\r\n//     <div className={homeStyles.activityPage}>\r\n//       {animeActivities.length > 0 && (\r\n//         <>\r\n//           <div className={homeStyles.sectionContainer}>\r\n//             <div className={homeStyles.headerContainer}>\r\n//               <h1>Anime Activities</h1>\r\n//             </div>\r\n//             <div className={homeStyles.activitiesGrid}>\r\n//               {animeActivities.slice(0, 15).map((activity) => (\r\n//                 <div key={activity._id} className={homeStyles.activityCard}>\r\n//                   <Link to={`/anime/${activity.animeDetails._id}`}>\r\n//                     <div className={homeStyles.activityImage}>\r\n//                       <img\r\n//                         src={activity.animeDetails.images.image}\r\n//                         alt={activity.animeDetails.titles.english}\r\n//                       />\r\n//                     </div>\r\n//                   </Link>\r\n//                   <div className={homeStyles.activityInfo}>\r\n//                     <h3>{activity.animeDetails.titles.english || activity.animeDetails.titles.romaji}</h3>\r\n//                     <p className={homeStyles.activityStatus}>\r\n//                       {activity.status === 'Completed'\r\n//                         ? 'Completed'\r\n//                         : activity.status === 'Planning'\r\n//                         ? `Planning to watch`\r\n//                         : activity.currentEpisode === 0 &&\r\n//                             activity.status === 'Watching'\r\n//                           ? 'Started watching'\r\n//                           : `Episode ${activity.currentEpisode}`}\r\n//                     </p>\r\n//                     <span className={homeStyles.activityTimestamp}>\r\n//                       {new Date(\r\n//                         activity.activityTimestamp\r\n//                       ).toLocaleDateString()}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {watchingAnime.length > 0 && (\r\n//             <div className={homeStyles.progressSection}>\r\n//               <h2>Currently Watching</h2>\r\n//               <div className={homeStyles.progressGrid}>\r\n//                 {watchingAnime.map((activity) => (\r\n//                   <div\r\n//                     key={activity.animeId}\r\n//                     className={homeStyles.progressCard}\r\n//                     onMouseEnter={(event) => handleMouseEnter(activity.animeId, event)}\r\n//                     onMouseLeave={() => setHoveredCard(null)}\r\n//                   >\r\n//                     <Link\r\n//                       to={`/anime/${activity.animeId}`}\r\n//                     >\r\n//                       <img\r\n//                         src={getAnimeById(activity.animeId)?.images.image}\r\n//                         alt={getAnimeById(activity.animeId)?.titles.english}\r\n//                       />\r\n//                     </Link>\r\n//                     <div className={homeStyles.progressInfo}>\r\n//                       {hoveredCard === activity.animeId ? (\r\n//                         <div className={homeStyles.episodeInfo}>\r\n//                           <span>\r\n//                             {activity.currentEpisode} {/* Show the current episode */}\r\n//                           </span>\r\n//                           <span\r\n//                             className={homeStyles.incrementWatchCount}\r\n//                             onClick={() => handleIncrementWatchCount(activity.animeId, 'anime')} // Increment function\r\n//                           >\r\n//                             +\r\n//                           </span>\r\n//                         </div>\r\n//                       ) : (\r\n//                         getAnimeById(activity.animeId)?.nextAiringEpisode?.airingAt && (\r\n//                           <div className={homeStyles.episodeInfo}>\r\n//                             <span>\r\n//                               {getAnimeById(activity.animeId)?.nextAiringEpisode?.episode}\r\n//                             </span>\r\n//                             <span>\r\n//                               {formatTimeUntilNextEpisode(getAnimeById(activity.animeId)?.nextAiringEpisode?.timeUntilAiring)}\r\n//                             </span>\r\n//                           </div>\r\n//                         )\r\n//                       )}\r\n//                     </div>\r\n//                     {hoveredCard === activity.animeId && (\r\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\r\n//                         <h4>{getAnimeById(activity.animeId)?.titles.english || getAnimeById(activity.animeId)?.titles.romaji}</h4>\r\n//                         <p>Progress: {activity.currentEpisode}/{getAnimeById(activity.animeId)?.lengths.Episodes}</p>\r\n//                       </div>\r\n//                     )}\r\n//                   </div>\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </>\r\n//       )}\r\n\r\n//       {mangaActivities.length > 0 && (\r\n//         <>\r\n//           <div className={homeStyles.sectionContainer}>\r\n//             <div className={homeStyles.headerContainer}>\r\n//               <h1>Manga Activities</h1>\r\n//             </div>\r\n//             <div className={homeStyles.activitiesGrid}>\r\n//               {mangaActivities.slice(0, 15).map((activity) => (\r\n//                 <div key={activity._id} className={homeStyles.activityCard}>\r\n//                   <Link to={`/manga/${activity.mangaDetails._id}`}>\r\n//                     <div className={homeStyles.activityImage}>\r\n//                       <img\r\n//                         src={activity.mangaDetails.images.image}\r\n//                         alt={activity.mangaDetails.titles.english}\r\n//                       />\r\n//                     </div>\r\n//                   </Link>\r\n//                   <div className={homeStyles.activityInfo}>\r\n//                     <h3>{activity.mangaDetails.titles.english || activity.mangaDetails.titles.romaji}</h3>\r\n//                     <p className={homeStyles.activityStatus}>\r\n//                       {activity.status === 'Completed'\r\n//                         ? 'Completed'\r\n//                         : activity.status === 'Planning'\r\n//                         ? 'Planning to read'\r\n//                         : activity.currentChapter === 0 &&\r\n//                             activity.status === 'Reading'\r\n//                           ? 'Started reading'\r\n//                           : `Chapter ${activity.currentChapter}`}\r\n//                     </p>\r\n//                     <span className={homeStyles.activityTimestamp}>\r\n//                       {new Date(\r\n//                         activity.activityTimestamp\r\n//                       ).toLocaleDateString()}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {readingManga.length > 0 && (\r\n//             <div className={homeStyles.progressSection}>\r\n//               <h2>Currently Reading</h2>\r\n//               <div className={homeStyles.progressGrid}>\r\n//                 {readingManga.map((activity) => (\r\n//                   <div\r\n//                     key={activity.mangaId}\r\n//                     className={homeStyles.progressCard}\r\n//                     onMouseEnter={(event) => handleMouseEnter(activity.mangaId, event)}\r\n//                     onMouseLeave={() => setHoveredCard(null)}\r\n//                   >\r\n//                     <Link\r\n//                       to={`/manga/${activity.mangaId}`}\r\n//                     >\r\n//                       <img\r\n//                         src={getMangaById(activity.mangaId)?.images.image}\r\n//                         alt={getMangaById(activity.mangaId)?.titles.english}\r\n//                       />\r\n//                     </Link>\r\n//                     <div className={homeStyles.progressInfo}>\r\n//                       {hoveredCard === activity.mangaId && (\r\n//                         <div className={homeStyles.episodeInfo}>\r\n//                           <span>\r\n//                             {activity.currentChapter}\r\n//                           </span>\r\n//                           <span\r\n//                             className={homeStyles.incrementWatchCount}\r\n//                             onClick={() => handleIncrementWatchCount(activity.mangaId, 'manga')}\r\n//                           >\r\n//                             +\r\n//                           </span>\r\n//                         </div>\r\n//                       )}\r\n//                     </div>\r\n//                     {hoveredCard === activity.mangaId && (\r\n//                       <div className={homeStyles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\r\n//                         <h4>{getMangaById(activity.mangaId)?.titles.english || getMangaById(activity.mangaId)?.titles.romaji}</h4>\r\n//                         <p>Progress: {activity.currentChapter}/{getMangaById(activity.mangaId)?.lengths.chapters}</p>\r\n//                       </div>\r\n//                     )}\r\n//                   </div>\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </>\r\n//       )}\r\n\r\n//       {animeActivities.length === 0 && mangaActivities.length === 0 && (\r\n//         <div className={homeStyles.emptyState}>\r\n//           <h2>No Recent Activities</h2>\r\n//           <p>\r\n//             Start watching anime or reading manga to see your activities here!\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n\r\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axiosInstance from './../utils/axiosConfig';\r\nimport data from '../Context/ContextApi';\r\nimport styles from '../styles/pages/Home.module.css';\r\nimport { useAnimeContext } from '../Context/AnimeContext';\r\nimport { useMangaContext } from '../Context/MangaContext';\r\nimport { fetchWithErrorHandling } from '../utils/apiUtils';\r\n\r\nconst Home = () => {\r\n  const { animeList } = useAnimeContext();\r\n  const { mangaList } = useMangaContext();\r\n  const [activeTab, setActiveTab] = useState('activity');\r\n  const [view, setView] = useState('following');\r\n  const { userData } = useContext(data);\r\n  const [latestActivities, setLatestActivities] = useState([]);\r\n  const [userAnimeList, setUserAnimeList] = useState([]);\r\n  const [userMangaList, setUserMangaList] = useState([]);\r\n  const [hoveredCard, setHoveredCard] = useState(null);\r\n  const [popupPosition, setPopupPosition] = useState({ left: '100%', top: '0' });\r\n\r\n  const fetchLatestActivities = useCallback(async () => {\r\n    try {\r\n      const data = await fetchWithErrorHandling(`/latest-activities/${userData._id}`);\r\n      const sortedActivities = data.sort(\r\n        (a, b) => new Date(b.activityTimestamp) - new Date(a.activityTimestamp)\r\n      );\r\n      setLatestActivities(sortedActivities);\r\n    } catch (error) {\r\n      setLatestActivities([]);\r\n    }\r\n  }, [userData._id]);\r\n\r\n  const fetchUserList = useCallback(async () => {\r\n    try {\r\n      const data = await fetchWithErrorHandling(`/users/${userData._id}/current`);\r\n      setUserAnimeList(data.animes);\r\n      setUserMangaList(data.mangas);\r\n    } catch (error) {\r\n      setUserAnimeList([]);\r\n      setUserMangaList([]);\r\n    }\r\n  }, [userData._id]);\r\n\r\n  useEffect(() => {\r\n    fetchLatestActivities();\r\n    fetchUserList();\r\n  }, [userData._id, fetchLatestActivities, fetchUserList]);\r\n\r\n  const getAnimeById = (animeId) => {\r\n    return animeList.find((anime) => anime._id === animeId);\r\n  };\r\n\r\n  const getMangaById = (mangaId) => {\r\n    return mangaList.find((manga) => manga._id === mangaId);\r\n  };\r\n\r\n  const filterAnimeByWatching = () => {\r\n    return userAnimeList\r\n      .filter((userAnime) => userAnime.status === 'Watching')\r\n      .map((userAnime) => ({\r\n        animeId: userAnime.animeId,\r\n        currentEpisode: userAnime.currentEpisode,\r\n        status: userAnime.status,\r\n        animeDetails: getAnimeById(userAnime.animeId),\r\n      }));\r\n  };\r\n\r\n  const filterMangaByReading = () => {\r\n    return userMangaList\r\n      .filter((userManga) => userManga.status === 'Reading')\r\n      .map((userManga) => ({\r\n        mangaId: userManga.mangaId,\r\n        currentChapter: userManga.currentChapter,\r\n        currentVolume: userManga.currentVolume,\r\n        status: userManga.status,\r\n        mangaDetails: getMangaById(userManga.mangaId),\r\n      }));\r\n  };\r\n\r\n  const handleIncrementWatchCount = async (id, type) => {\r\n    console.log('Incrementing count:', { id, type });\r\n\r\n    if (type === 'anime') {\r\n      const currentAnime = userAnimeList.find(anime => anime.animeId === id);\r\n      console.log('Current anime:', currentAnime);\r\n\r\n      if (currentAnime) {\r\n        const newEpisodeCount = currentAnime.currentEpisode + 1;\r\n\r\n        // Update the local state immediately\r\n        setUserAnimeList((prevList) =>\r\n          prevList.map((anime) =>\r\n            anime.animeId === id\r\n              ? { ...anime, currentEpisode: newEpisodeCount }\r\n              : anime\r\n          )\r\n        );\r\n\r\n        try {\r\n          // Make an API call to update the current episode on the backend\r\n          const response = await axiosInstance.post(`/users/${userData._id}/updateAnime`, {\r\n            animeId: id,\r\n            status: userData.status || 'Watching',\r\n            currentEpisode: newEpisodeCount,\r\n          });\r\n\r\n          if (!response.data) {\r\n            console.error('Failed to update on the server');\r\n          } else {\r\n            fetchLatestActivities();\r\n          }\r\n        } catch (error) {\r\n          console.error('Error updating user progress:', error);\r\n        }\r\n      }\r\n    }\r\n    if (type === 'manga') {\r\n      const currentManga = userMangaList.find(manga => manga.mangaId === id);\r\n      console.log('Current manga:', currentManga);\r\n\r\n      if (currentManga) {\r\n        const newChapterCount = currentManga.currentChapter + 1;\r\n        const volumeCount = currentManga.currentVolume;\r\n\r\n        // Update the local state immediately\r\n        setUserMangaList((prevList) =>\r\n          prevList.map((manga) =>\r\n            manga.mangaId === id\r\n              ? { ...manga, currentChapter: newChapterCount, currentVolume: volumeCount }\r\n              : manga\r\n          )\r\n        );\r\n\r\n        console.log('UserMangaList: ', userMangaList);\r\n\r\n        try {\r\n          // Make an API call to update the current chapter on the backend\r\n          const response = await axiosInstance.post(`/users/${userData._id}/updateManga`, {\r\n            mangaId: id,\r\n            status: userData.status || 'Reading',\r\n            currentChapter: newChapterCount,\r\n            currentVolume: volumeCount\r\n          });\r\n\r\n          if (!response.data) {\r\n            console.log('Failed to update on the server');\r\n          } else {\r\n            fetchLatestActivities();\r\n          }\r\n        } catch (error) {\r\n          console.error('Error updating user progress:', error);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const animeActivities = latestActivities.filter(\r\n    (activity) => activity.animeDetails\r\n  );\r\n  const mangaActivities = latestActivities.filter(\r\n    (activity) => activity.mangaDetails\r\n  );\r\n  const watchingAnime = filterAnimeByWatching();\r\n  const readingManga = filterMangaByReading();\r\n  \r\n  const formatTimeUntilNextEpisode = (timeUntilAiring) => {\r\n    const days = Math.floor(timeUntilAiring / (3600 * 24));\r\n    const hours = Math.floor((timeUntilAiring % (3600 * 24)) / 3600);\r\n    const minutes = Math.floor((timeUntilAiring % 3600) / 60);\r\n\r\n    return `${days}d ${hours}h ${minutes}m`;\r\n  };\r\n\r\n  const handleMouseEnter = (animeId, event) => {\r\n    const popupWidth = 300; // Set this to the width of your popup\r\n    const cardElement = event.currentTarget; // Get the card element\r\n\r\n    const cardRect = cardElement.getBoundingClientRect(); // Get the card's position\r\n\r\n    // Get the activity page width\r\n    const activityPage = document.querySelector(`.${styles.activityPage}`);\r\n    const activityPageRect = activityPage.getBoundingClientRect();\r\n    const activityPageRightEdge = activityPageRect.right;\r\n\r\n    // Calculate the right edge of the popup\r\n    const rightEdge = cardRect.right + popupWidth;\r\n\r\n    if (rightEdge > activityPageRightEdge) {\r\n      // If it overflows, position it to the left of the card\r\n      setPopupPosition({\r\n        left: `-215%`, // Position to the left\r\n        top: `0`, // Align with the card's top\r\n      });\r\n    } else {\r\n      // Otherwise, position it to the right of the card\r\n      setPopupPosition({\r\n        left: `100%`, // Position to the right\r\n        top: `0`, // Align with the card's top\r\n      });\r\n    }\r\n\r\n    setHoveredCard(animeId);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {/* Header Tabs */}\r\n      <div className={styles.tabContainer}>\r\n        <button\r\n          className={`${styles.tab} ${activeTab === 'activity' ? styles.active : ''}`}\r\n          onClick={() => setActiveTab('activity')}\r\n        >\r\n          Activity\r\n        </button>\r\n        <button\r\n          className={`${styles.tab} ${activeTab === 'inProgress' ? styles.active : ''}`}\r\n          onClick={() => setActiveTab('inProgress')}\r\n        >\r\n          In Progress\r\n        </button>\r\n      </div>\r\n\r\n      {/* View Toggle */}\r\n      <div className={styles.viewToggle}>\r\n        <button\r\n          className={`${styles.toggleButton} ${view === 'anime' ? styles.active : ''}`}\r\n          onClick={() => setView('anime')}\r\n        >\r\n          Anime\r\n        </button>\r\n        <button\r\n          className={`${styles.toggleButton} ${view === 'manga' ? styles.active : ''}`}\r\n          onClick={() => setView('manga')}\r\n        >\r\n          Manga\r\n        </button>\r\n      </div>\r\n\r\n      {/* Status Input */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Write a status...\"\r\n        className={styles.statusInput}\r\n      />\r\n\r\n      {activeTab === 'activity' ? (\r\n        view === 'anime' ? (\r\n          <div className={styles.activityFeed}>\r\n          {animeActivities.map(activity => (\r\n            <div key={activity.id} className={styles.activityCard}>\r\n              <div className={styles.activityHeader}>\r\n                <img\r\n                  src={`http://localhost:8080${userData?.avatar}`}\r\n                  alt={userData.username}\r\n                  className={styles.avatar}\r\n                />\r\n                <div className={styles.activityInfo}>\r\n                  <div className={styles.activityMeta}>\r\n                    <span className={styles.username}>{userData.username}</span>\r\n                    <span className={styles.timestamp}>{new Date(\r\n                        activity.activityTimestamp\r\n                      ).toLocaleDateString()}</span>\r\n                  </div>\r\n                  <p className={styles.activityContent}>\r\n                  {activity.status === 'Completed'\r\n                        ? 'Completed'\r\n                        : activity.status === 'Planning'\r\n                        ? `Planning to watch`\r\n                        : activity.currentEpisode === 0 &&\r\n                            activity.status === 'Watching'\r\n                          ? 'Started watching'\r\n                          : `Episode ${activity.currentEpisode}`}\r\n                    <span className={styles.username}> {activity.animeDetails.titles?.english || activity.animeDetails.titles.romaji}</span>\r\n                  </p>\r\n                  <img\r\n                    src={activity.animeDetails.images.image}\r\n                    alt={activity.title}\r\n                    className={styles.mediaImage}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        ):(\r\n          <div className={styles.activityFeed}>\r\n          {mangaActivities.map(activity => (\r\n            <div key={activity.id} className={styles.activityCard}>\r\n              <div className={styles.activityHeader}>\r\n                <img\r\n                  src={`http://localhost:8080${userData?.avatar}`}\r\n                  alt={userData.username}\r\n                  className={styles.avatar}\r\n                />\r\n                <div className={styles.activityInfo}>\r\n                  <div className={styles.activityMeta}>\r\n                    <span className={styles.username}>{userData.username}</span>\r\n                    <span className={styles.timestamp}>{new Date(\r\n                        activity.activityTimestamp\r\n                      ).toLocaleDateString()}</span>\r\n                  </div>\r\n                  <p className={styles.activityContent}>\r\n                  {activity.status === 'Completed'\r\n                        ? 'Completed'\r\n                        : activity.status === 'Planning'\r\n                        ? `Planning to read`\r\n                        : activity.currentEpisode === 0 &&\r\n                            activity.status === 'Reading'\r\n                          ? 'Started reading'\r\n                          : `Chapter ${activity.currentChapter}`}\r\n                    <span className={styles.username}> {activity.mangaDetails.titles?.english || activity.mangaDetails.titles.romaji}</span>\r\n                  </p>\r\n                  <img\r\n                    src={activity.mangaDetails.images.image}\r\n                    alt={activity.title}\r\n                    className={styles.mediaImage}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        )\r\n        \r\n      ) : (\r\n        /* Airing Schedule */\r\n        view === 'anime' ? (\r\n          <div className={styles.airingGrid}>\r\n            {watchingAnime.map(anime => (\r\n              <div key={anime.animeId} className={styles.airingCard} /*onMouseEnter={(event) => handleMouseEnter(anime.animeId, event)} onMouseLeave={() => setHoveredCard(null)}*/>\r\n                <Link\r\n                  to={`/anime/${anime.animeId}`}\r\n                >\r\n                  <img\r\n                    src={getAnimeById(anime.animeId)?.images.image}\r\n                    alt={anime.title}\r\n                    className={styles.airingImage}\r\n                  />\r\n                </Link>\r\n                <div className={styles.airingInfo}>\r\n                  {hoveredCard === anime.animeId ? (\r\n                    <div className={styles.episodeNumber}>\r\n                      <span>\r\n                        {anime.currentEpisode}\r\n                      </span>\r\n                      <span className={styles.airingTime} onClick={() => handleIncrementWatchCount(anime.animeId, 'anime')}>\r\n                        +\r\n                      </span>\r\n                    </div>\r\n                  ) : (\r\n                    getAnimeById(anime.animeId)?.nextAiringEpisode?.airingAt && (\r\n                      <div className={styles.episodeInfo}>\r\n                        <span>\r\n                          {getAnimeById(anime.animeId)?.nextAiringEpisode?.episode}\r\n                        </span>\r\n                        <span>\r\n                          {formatTimeUntilNextEpisode(getAnimeById(anime.animeId)?.nextAiringEpisode?.timeUntilAiring)}\r\n                        </span>\r\n                      </div>\r\n                    )\r\n                  )}\r\n                </div>\r\n                {/* {hoveredCard === anime.animeId && (\r\n                  <div className={styles.popup} style={{ left: popupPosition.left, top: popupPosition.top }}>\r\n                    <h4>{getAnimeById(anime.animeId)?.titles.english || getAnimeById(anime.animeId)?.titles.romaji}</h4>\r\n                    <p>Progress: {anime.currentEpisode}/{getAnimeById(anime.animeId)?.lengths.Episodes}</p>\r\n                  </div>\r\n                )} */}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className={styles.airingGrid}>\r\n            {readingManga.map(manga => (\r\n              <div key={manga.mangaId} className={styles.airingCard}>\r\n                <img\r\n                  src={getMangaById(manga.mangaId)?.images.image}\r\n                  alt={manga.title}\r\n                  className={styles.airingImage}\r\n                />\r\n                <div className={styles.airingInfo}>\r\n                  <div className={styles.episodeNumber}>Ep {manga.currentChapter}</div>\r\n                  <div className={styles.airingTime}>{manga.timeUntil}</div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )\r\n        \r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC3E,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,aAAa,MAAM,wBAAwB;AAClD,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,MAAM,MAAM,iCAAiC;AACpD,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,sBAAsB,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM;IAAEC;EAAU,CAAC,GAAGP,eAAe,CAAC,CAAC;EACvC,MAAM;IAAEQ;EAAU,CAAC,GAAGP,eAAe,CAAC,CAAC;EACvC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,UAAU,CAAC;E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}