{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Documents\\\\anime_website\\\\anime_website\\\\frontend\\\\src\\\\Context\\\\CharacterContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/CharacterContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CharacterContext = /*#__PURE__*/createContext();\nexport const CharacterProvider = ({\n  children\n}) => {\n  _s();\n  const [characterList, setCharacterList] = useState([]);\n  const [selectedCharacterId, setSelectedCharacterId] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // fetch data from your API\n        const response = await fetch('http://localhost:8080/characters/characters', {\n          credentials: 'include'\n        });\n        const data = await response.json();\n\n        // Update the characterList in the context\n        setCharacterList(data);\n      } catch (error) {\n        console.error('Error fetching character list:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CharacterContext.Provider, {\n    value: {\n      characterList,\n      setCharacterList,\n      selectedCharacterId,\n      setSelectedCharacterId\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(CharacterProvider, \"XH9U/yD0pduwWN7eFrs6oY3yHVc=\");\n_c = CharacterProvider;\nexport const useCharacterContext = () => {\n  _s2();\n  const context = useContext(CharacterContext);\n  if (!context) {\n    throw new Error('useCharacterContext must be used within a CharacterProvider');\n  }\n  return context;\n};\n_s2(useCharacterContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CharacterProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","CharacterContext","CharacterProvider","children","_s","characterList","setCharacterList","selectedCharacterId","setSelectedCharacterId","fetchData","response","fetch","credentials","data","json","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCharacterContext","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/david/Documents/anime_website/anime_website/frontend/src/Context/CharacterContext.js"],"sourcesContent":["// src/context/CharacterContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nexport const CharacterContext = createContext();\r\n\r\nexport const CharacterProvider = ({ children }) => {\r\n  const [characterList, setCharacterList] = useState([]);\r\n  const [selectedCharacterId, setSelectedCharacterId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // fetch data from your API\r\n        const response = await fetch(\r\n          'http://localhost:8080/characters/characters',\r\n          {\r\n            credentials: 'include',\r\n          }\r\n        );\r\n\r\n        const data = await response.json();\r\n\r\n        // Update the characterList in the context\r\n        setCharacterList(data);\r\n      } catch (error) {\r\n        console.error('Error fetching character list:', error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <CharacterContext.Provider\r\n      value={{\r\n        characterList,\r\n        setCharacterList,\r\n        selectedCharacterId,\r\n        setSelectedCharacterId,\r\n      }}\r\n    >\r\n      {children}\r\n    </CharacterContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCharacterContext = () => {\r\n  const context = useContext(CharacterContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      'useCharacterContext must be used within a CharacterProvider'\r\n    );\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,OAAO,MAAMC,gBAAgB,gBAAGN,aAAa,CAAC,CAAC;AAE/C,OAAO,MAAMO,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEpEC,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,6CAA6C,EAC7C;UACEC,WAAW,EAAE;QACf,CACF,CAAC;QAED,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;;QAElC;QACAR,gBAAgB,CAACO,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IACDN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA,CAACC,gBAAgB,CAACgB,QAAQ;IACxBC,KAAK,EAAE;MACLb,aAAa;MACbC,gBAAgB;MAChBC,mBAAmB;MACnBC;IACF,CAAE;IAAAL,QAAA,EAEDA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAAClB,EAAA,CAtCWF,iBAAiB;AAAAqB,EAAA,GAAjBrB,iBAAiB;AAwC9B,OAAO,MAAMsB,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACvC,MAAMC,OAAO,GAAG9B,UAAU,CAACK,gBAAgB,CAAC;EAC5C,IAAI,CAACyB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CACb,6DACF,CAAC;EACH;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,mBAAmB;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}