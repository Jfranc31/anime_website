{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Documents\\\\anime_website\\\\anime_website\\\\frontend\\\\src\\\\Components\\\\Details\\\\MangaDetails.js\",\n  _s = $RefreshSig$();\n/**\r\n * src/Components/Details/MangaDetails.js\r\n * Description: React component for rendering details of a manga.\r\n */\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport data from '../../Context/ContextApi';\nimport MangaEditor from '../ListEditors/MangaEditor';\nimport mangaDetailsStyles from '../../styles/pages/manga_details.module.css';\nimport modalStyles from '../../styles/components/Modal.module.css';\nimport { MONTHS } from '../../constants/filterOptions';\nimport axiosInstance from '../../utils/axiosConfig';\nimport Loader from '../../constants/Loader.js';\nimport SkeletonDetails from './SkeletonDetails';\n\n/**\r\n * Functional component representing details of a manga.\r\n * @returns {JSX.Element} - Rendered manga details component.\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MangaDetails = () => {\n  _s();\n  var _mangaDetails$images, _mangaDetails$images2, _mangaDetails$titles, _mangaDetails$release, _mangaDetails$typings, _mangaDetails$lengths, _mangaDetails$lengths2, _mangaDetails$release2, _mangaDetails$release3;\n  const {\n    id\n  } = useParams();\n  const {\n    userData,\n    setUserData\n  } = useContext(data);\n  const [mangaDetails, setMangaDetails] = useState(null);\n  const [isMangaAdded, setIsMangaAdded] = useState(null);\n  const [charactersDetails, setCharactersDetails] = useState([]);\n  const [relationsDetails, setRelationsDetails] = useState([]);\n  const [isMangaEditorOpen, setIsMangaEditorOpen] = useState(false);\n  const [userProgress, setUserProgress] = useState({\n    status: 'Planning',\n    currentChapter: 0,\n    currentVolume: 0\n  });\n  const [activeTab, setActiveTab] = useState('about');\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchMangaDetails = async () => {\n      try {\n        // Fetch manga details\n        const mangaResponse = await axiosInstance.get(`/mangas/manga/${id}`);\n        setMangaDetails(mangaResponse.data);\n        if (userData !== null && userData !== void 0 && userData._id) {\n          var _currentUser$mangas, _currentUser$mangas2;\n          const userResponse = await axiosInstance.get(`/users/${userData._id}/current`);\n          const currentUser = userResponse.data;\n          setUserData(currentUser);\n          const mangaAdded = currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$mangas = currentUser.mangas) === null || _currentUser$mangas === void 0 ? void 0 : _currentUser$mangas.some(manga => manga.mangaId === id);\n          setIsMangaAdded(mangaAdded);\n          const existingMangaIndex = currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$mangas2 = currentUser.mangas) === null || _currentUser$mangas2 === void 0 ? void 0 : _currentUser$mangas2.findIndex(manga => manga.mangaId.toString() === id.toString());\n          setMangaDetails(mangaResponse.data);\n          if (currentUser && existingMangaIndex !== -1) {\n            setUserProgress({\n              status: currentUser.mangas[existingMangaIndex].status,\n              currentChapter: currentUser.mangas[existingMangaIndex].currentChapter,\n              currentVolume: currentUser.mangas[existingMangaIndex].currentVolume\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching manga details:', error);\n      }\n    };\n    fetchMangaDetails();\n  }, [id, userData, setUserData]);\n  const fetchCharacterDetails = async () => {\n    setLoading(true);\n    setCharactersDetails([]); // Clear previous characters\n\n    try {\n      await Promise.all(((mangaDetails === null || mangaDetails === void 0 ? void 0 : mangaDetails.characters) || []).map(async character => {\n        try {\n          const response = await axiosInstance.get(`/characters/character/${character.characterId}`);\n\n          // Immediately update state with the new character\n          setCharactersDetails(prev => {\n            // Check if character already exists to prevent duplicates\n            const existingCharacter = prev.find(c => c.characterDetails._id === response.data._id);\n            if (!existingCharacter) {\n              const newCharacter = {\n                ...character,\n                characterDetails: response.data\n              };\n\n              // Sort the characters as they are added\n              const updatedCharacters = [...prev, newCharacter].sort((a, b) => {\n                const rolePriority = ['Main', 'Supporting', 'Background'];\n                const priorityA = rolePriority.indexOf(a.role);\n                const priorityB = rolePriority.indexOf(b.role);\n                if (priorityA === priorityB) {\n                  // Sort by anilistId as secondary criteria\n                  return (a.characterDetails.anilistId || 0) - (b.characterDetails.anilistId || 0);\n                }\n                return priorityA - priorityB;\n              });\n              return updatedCharacters;\n            }\n            return prev;\n          });\n          return {\n            ...character,\n            characterDetails: response.data\n          };\n        } catch (error) {\n          console.error(`Error fetching details for character ${character.characterId}:`, error.message);\n          return null;\n        }\n      }) || []);\n    } catch (error) {\n      console.error('Error fetching characters:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchRelationDetails = async () => {\n    setLoading(true);\n    try {\n      const relationsWithDetails = await Promise.all([...((mangaDetails === null || mangaDetails === void 0 ? void 0 : mangaDetails.mangaRelations.map(async relation => {\n        try {\n          const response = await axiosInstance.get(`/mangas/manga/${relation.relationId}`);\n          return {\n            ...relation,\n            relationDetails: response.data,\n            contentType: 'manga'\n          };\n        } catch (error) {\n          if (error.name === 'CanceledError') return null; // Silently handle canceled requests\n          console.error(`Error fetching manga relation ${relation.relationId}:`, error.message);\n          return null;\n        }\n      })) || []), ...((mangaDetails === null || mangaDetails === void 0 ? void 0 : mangaDetails.animeRelations.map(async relation => {\n        try {\n          const response = await axiosInstance.get(`/animes/anime/${relation.relationId}`);\n          return {\n            ...relation,\n            relationDetails: response.data,\n            contentType: 'anime'\n          };\n        } catch (error) {\n          if (error.name === 'CanceledError') return null; // Silently handle canceled requests\n          console.error(`Error fetching anime relation ${relation.relationId}:`, error.message);\n          return null;\n        }\n      })) || [])]);\n      setRelationsDetails(relationsWithDetails);\n    } catch (error) {\n      console.error('Error fetching relations:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleTabChange = tab => {\n    setActiveTab(tab);\n    if (tab === 'characters') {\n      fetchCharacterDetails(); // Fetch characters only when the tab is 'characters'\n    }\n    if (tab === 'relations') {\n      fetchRelationDetails();\n    }\n  };\n  useEffect(() => {\n    if (userData !== null && userData !== void 0 && userData._id && mangaDetails !== null && mangaDetails !== void 0 && mangaDetails._id) {\n      var _userData$mangas;\n      const isAdded = (_userData$mangas = userData.mangas) === null || _userData$mangas === void 0 ? void 0 : _userData$mangas.some(manga => manga.mangaId === mangaDetails._id);\n      setIsMangaAdded(isAdded);\n    }\n  }, [userData, mangaDetails]);\n  if (!mangaDetails) {\n    return /*#__PURE__*/_jsxDEV(SkeletonDetails, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 12\n    }, this);\n  }\n  const onMangaDelete = mangaId => {\n    // Implement logic to update the user's anime list after deletion\n    setUserData(prevUserData => {\n      const updatedUser = {\n        ...prevUserData\n      };\n      const updatedMangas = updatedUser.mangas.filter(manga => manga.mangaId !== mangaId);\n      updatedUser.mangas = updatedMangas;\n      return updatedUser;\n    });\n  };\n  const handleModalClose = () => {\n    setIsMangaEditorOpen(false);\n  };\n  const openEditor = () => {\n    setIsMangaEditorOpen(true);\n  };\n  const getFullName = names => {\n    switch (userData.characterName) {\n      case 'romaji':\n        return `${names.givenName} ${names.surName}`;\n      case 'romaji-western':\n        return `${names.surName} ${names.givenName}`;\n      case 'native':\n        return `${names.nativeName || ''}`;\n      default:\n        return `${names.givenName} ${names.surName}`;\n    }\n  };\n  const seriesTitle = titles => {\n    switch (userData.title) {\n      case 'english':\n        return titles.english || titles.romaji;\n      case 'romaji':\n        return titles.romaji || titles.english;\n      case 'native':\n        return titles.native;\n      default:\n        return titles.english || titles.romaji || titles.native || 'Unknown Title';\n    }\n  };\n  const formatDate = dateObj => {\n    if (!dateObj) return 'TBA';\n    const {\n      year,\n      month,\n      day\n    } = dateObj;\n    if (!year && !month && !day) return 'TBA';\n    const monthName = month ? MONTHS[month - 1] : '';\n    const formattedDay = day ? day : '';\n    if (!monthName && !formattedDay) return year || 'TBA';\n    if (!formattedDay) return `${monthName} ${year || 'TBA'}`;\n    return `${monthName} ${formattedDay}, ${year || 'TBA'}`;\n  };\n  const determineSeason = startDate => {\n    if (!startDate || !startDate.month) return {\n      season: 'TBA',\n      year: (startDate === null || startDate === void 0 ? void 0 : startDate.year) || 'TBA'\n    };\n    const month = startDate.month;\n    let season;\n    if (month >= 3 && month <= 5) season = 'Spring';else if (month >= 6 && month <= 8) season = 'Summer';else if (month >= 9 && month <= 11) season = 'Fall';else season = 'Winter';\n    return {\n      season,\n      year: startDate.year || 'TBA'\n    };\n  };\n  const {\n    season,\n    year\n  } = determineSeason(mangaDetails.releaseData.startDate);\n  const parseDescription = description => {\n    if (!description) return [];\n\n    // First handle <b> tags by preserving them\n    const preserveBoldTags = description.replace(/<b>/g, '###BOLDSTART###').replace(/<\\/b>/g, '###BOLDEND###');\n\n    // Handle <i> tags by preserving them\n    const preserveItalicTags = preserveBoldTags.replace(/<i>/g, '###ITALICSTART###').replace(/<\\/i>/g, '###ITALICEND###');\n\n    // Split by <br> tags\n    const paragraphs = preserveItalicTags.split(/<br>/);\n    return paragraphs.map(paragraph => {\n      // Remove closing br tags and trim whitespace\n      const cleanParagraph = paragraph.replace(/<\\/br>/g, '').trim();\n\n      // Restore <b> tags\n      return cleanParagraph.replace(/###BOLDSTART###/g, '<b>').replace(/###BOLDEND###/g, '</b>').replace(/###ITALICSTART###/g, '<i>').replace(/###ITALICEND###/g, '</i>');\n    }).filter(p => p);\n  };\n  const handleRelationClick = (contentType, relationId) => {\n    // Force a full navigation to the new page\n    window.location.href = `/${contentType}/${relationId}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: mangaDetailsStyles.mangaDetailsPage,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: mangaDetailsStyles.mangaHeader,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: mangaDetailsStyles.bannerSection,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: (mangaDetails === null || mangaDetails === void 0 ? void 0 : (_mangaDetails$images = mangaDetails.images) === null || _mangaDetails$images === void 0 ? void 0 : _mangaDetails$images.border) || (mangaDetails === null || mangaDetails === void 0 ? void 0 : (_mangaDetails$images2 = mangaDetails.images) === null || _mangaDetails$images2 === void 0 ? void 0 : _mangaDetails$images2.image) || '',\n          alt: (mangaDetails === null || mangaDetails === void 0 ? void 0 : (_mangaDetails$titles = mangaDetails.titles) === null || _mangaDetails$titles === void 0 ? void 0 : _mangaDetails$titles.english) || 'Manga',\n          className: mangaDetailsStyles.bannerImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mangaDetailsStyles.bannerOverlay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mangaDetailsStyles.contentWrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: mangaDetailsStyles.posterContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: mangaDetails.images.image,\n            alt: mangaDetails.titles.english\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: mangaDetailsStyles.actionButtons,\n            children: userData && (userData.role === 'admin' || userData.role === 'user') && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: isMangaAdded ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: openEditor,\n                className: mangaDetailsStyles.editButton,\n                children: \"Edit Progress\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: openEditor,\n                className: mangaDetailsStyles.addButton,\n                children: \"Add to List\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 21\n              }, this)\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), userData.role === 'admin' && /*#__PURE__*/_jsxDEV(Link, {\n            to: `/manga/${mangaDetails._id}/update`,\n            className: mangaDetailsStyles.editMangaLink,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: mangaDetailsStyles.editMangaButton,\n              children: \"Edit Manga\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mangaDetailsStyles.mangaInfo,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: mangaDetailsStyles.mangaTitle,\n            children: seriesTitle(mangaDetails.titles)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: mangaDetailsStyles.quickInfo,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: mangaDetailsStyles.quickInfoItem,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Status:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 17\n              }, this), \" \", (mangaDetails === null || mangaDetails === void 0 ? void 0 : (_mangaDetails$release = mangaDetails.releaseData) === null || _mangaDetails$release === void 0 ? void 0 : _mangaDetails$release.releaseStatus) || 'TBA']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mangaDetailsStyles.quickInfoItem,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Format:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 17\n              }, this), \" \", (mangaDetails === null || mangaDetails === void 0 ? void 0 : (_mangaDetails$typings = mangaDetails.typings) === null || _mangaDetails$typings === void 0 ? void 0 : _mangaDetails$typings.Format) || 'TBA']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mangaDetailsStyles.quickInfoItem,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Chapters:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 17\n              }, this), \" \", (mangaDetails === null || mangaDetails === void 0 ? void 0 : (_mangaDetails$lengths = mangaDetails.lengths) === null || _mangaDetails$lengths === void 0 ? void 0 : _mangaDetails$lengths.chapters) || 'TBA']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mangaDetailsStyles.quickInfoItem,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Volumes:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 17\n              }, this), \" \", (mangaDetails === null || mangaDetails === void 0 ? void 0 : (_mangaDetails$lengths2 = mangaDetails.lengths) === null || _mangaDetails$lengths2 === void 0 ? void 0 : _mangaDetails$lengths2.volumes) || 'TBA']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mangaDetailsStyles.quickInfoItem,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Season:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 17\n              }, this), \" \", season, \" \", year]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mangaDetailsStyles.quickInfoItem,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Start Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 17\n              }, this), ' ', formatDate(mangaDetails === null || mangaDetails === void 0 ? void 0 : (_mangaDetails$release2 = mangaDetails.releaseData) === null || _mangaDetails$release2 === void 0 ? void 0 : _mangaDetails$release2.startDate)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mangaDetailsStyles.quickInfoItem,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"End Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 17\n              }, this), ' ', formatDate(mangaDetails === null || mangaDetails === void 0 ? void 0 : (_mangaDetails$release3 = mangaDetails.releaseData) === null || _mangaDetails$release3 === void 0 ? void 0 : _mangaDetails$release3.endDate)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: mangaDetailsStyles.mangaTabs,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `${mangaDetailsStyles.tabButton} ${activeTab === 'about' ? mangaDetailsStyles.active : ''}`,\n              onClick: () => setActiveTab('about'),\n              children: \"About\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `${mangaDetailsStyles.tabButton} ${activeTab === 'characters' ? mangaDetailsStyles.active : ''}`,\n              onClick: () => handleTabChange('characters'),\n              children: \"Characters\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `${mangaDetailsStyles.tabButton} ${activeTab === 'relations' ? mangaDetailsStyles.active : ''}`,\n              onClick: () => handleTabChange('relations'),\n              children: \"Relations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mangaDetailsStyles.mangaContent,\n      children: [activeTab === 'about' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mangaDetailsStyles.aboutContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: mangaDetailsStyles.metadataGrid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mangaDetailsStyles.descriptionSection,\n          children: parseDescription(mangaDetails.description).map((paragraph, index) => {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              className: mangaDetailsStyles.paragraph,\n              dangerouslySetInnerHTML: {\n                __html: paragraph\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this), activeTab === 'characters' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mangaDetailsStyles.charactersContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mangaDetailsStyles.charactersGrid,\n          children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 17\n          }, this) : charactersDetails.map(character => /*#__PURE__*/_jsxDEV(Link, {\n            to: `/characters/${character.characterDetails._id}`,\n            className: mangaDetailsStyles.characterCard,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mangaDetailsStyles.card2,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: mangaDetailsStyles.characterImageContainer,\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: character.characterDetails.characterImage,\n                  alt: character.characterDetails.names.givenName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 468,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: mangaDetailsStyles.characterRole,\n                  children: character.role\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: mangaDetailsStyles.characterInfo,\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: getFullName(character.characterDetails.names)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 21\n            }, this)\n          }, character.characterDetails._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this), activeTab === 'relations' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mangaDetailsStyles.relationsContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mangaDetailsStyles.relationsGrid,\n          children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 17\n          }, this) : relationsDetails.map(relation => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handleRelationClick(relation.contentType, relation.relationDetails._id),\n            className: mangaDetailsStyles.relationCard,\n            style: {\n              cursor: 'pointer'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mangaDetailsStyles.card2,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: mangaDetailsStyles.relationImageContainer,\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: relation.relationDetails.images.image,\n                  alt: relation.relationDetails.titles.english\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 502,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: mangaDetailsStyles.relationType,\n                  children: relation.typeofRelation\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 506,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: mangaDetailsStyles.relationInfo,\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: seriesTitle(relation.relationDetails.titles)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 511,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 21\n            }, this)\n          }, relation.relationDetails._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), isMangaEditorOpen && userProgress && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: modalStyles.modalOverlay,\n      onClick: handleModalClose,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: modalStyles.characterModal,\n        onClick: e => e.stopPropagation(),\n        children: /*#__PURE__*/_jsxDEV(MangaEditor, {\n          manga: mangaDetails,\n          userId: userData._id,\n          closeModal: handleModalClose,\n          onMangaDelete: onMangaDelete,\n          setUserData: setUserData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n};\n_s(MangaDetails, \"hFYK6qHIorRzATz6hEFsFlgmA8I=\", false, function () {\n  return [useParams];\n});\n_c = MangaDetails;\nexport default MangaDetails;\nvar _c;\n$RefreshReg$(_c, \"MangaDetails\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useParams","Link","data","MangaEditor","mangaDetailsStyles","modalStyles","MONTHS","axiosInstance","Loader","SkeletonDetails","jsxDEV","_jsxDEV","Fragment","_Fragment","MangaDetails","_s","_mangaDetails$images","_mangaDetails$images2","_mangaDetails$titles","_mangaDetails$release","_mangaDetails$typings","_mangaDetails$lengths","_mangaDetails$lengths2","_mangaDetails$release2","_mangaDetails$release3","id","userData","setUserData","mangaDetails","setMangaDetails","isMangaAdded","setIsMangaAdded","charactersDetails","setCharactersDetails","relationsDetails","setRelationsDetails","isMangaEditorOpen","setIsMangaEditorOpen","userProgress","setUserProgress","status","currentChapter","currentVolume","activeTab","setActiveTab","loading","setLoading","fetchMangaDetails","mangaResponse","get","_id","_currentUser$mangas","_currentUser$mangas2","userResponse","currentUser","mangaAdded","mangas","some","manga","mangaId","existingMangaIndex","findIndex","toString","error","console","fetchCharacterDetails","Promise","all","characters","map","character","response","characterId","prev","existingCharacter","find","c","characterDetails","newCharacter","updatedCharacters","sort","a","b","rolePriority","priorityA","indexOf","role","priorityB","anilistId","message","fetchRelationDetails","relationsWithDetails","mangaRelations","relation","relationId","relationDetails","contentType","name","animeRelations","handleTabChange","tab","_userData$mangas","isAdded","fileName","_jsxFileName","lineNumber","columnNumber","onMangaDelete","prevUserData","updatedUser","updatedMangas","filter","handleModalClose","openEditor","getFullName","names","characterName","givenName","surName","nativeName","seriesTitle","titles","title","english","romaji","native","formatDate","dateObj","year","month","day","monthName","formattedDay","determineSeason","startDate","season","releaseData","parseDescription","description","preserveBoldTags","replace","preserveItalicTags","paragraphs","split","paragraph","cleanParagraph","trim","p","handleRelationClick","window","location","href","className","mangaDetailsPage","children","mangaHeader","bannerSection","src","images","border","image","alt","bannerImage","bannerOverlay","contentWrapper","posterContainer","actionButtons","onClick","editButton","addButton","to","editMangaLink","editMangaButton","mangaInfo","mangaTitle","quickInfo","quickInfoItem","releaseStatus","typings","Format","lengths","chapters","volumes","endDate","mangaTabs","tabButton","active","mangaContent","aboutContainer","metadataGrid","descriptionSection","index","dangerouslySetInnerHTML","__html","charactersContainer","charactersGrid","characterCard","card2","characterImageContainer","characterImage","characterRole","characterInfo","relationsContainer","relationsGrid","relationCard","style","cursor","relationImageContainer","relationType","typeofRelation","relationInfo","modalOverlay","characterModal","e","stopPropagation","userId","closeModal","_c","$RefreshReg$"],"sources":["C:/Users/david/Documents/anime_website/anime_website/frontend/src/Components/Details/MangaDetails.js"],"sourcesContent":["/**\r\n * src/Components/Details/MangaDetails.js\r\n * Description: React component for rendering details of a manga.\r\n */\r\n\r\nimport React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport data from '../../Context/ContextApi';\r\nimport MangaEditor from '../ListEditors/MangaEditor';\r\nimport mangaDetailsStyles from '../../styles/pages/manga_details.module.css';\r\nimport modalStyles from '../../styles/components/Modal.module.css';\r\nimport { MONTHS } from '../../constants/filterOptions';\r\nimport axiosInstance from '../../utils/axiosConfig';\r\nimport Loader from '../../constants/Loader.js';\r\nimport SkeletonDetails from './SkeletonDetails';\r\n\r\n/**\r\n * Functional component representing details of a manga.\r\n * @returns {JSX.Element} - Rendered manga details component.\r\n */\r\nconst MangaDetails = () => {\r\n  const { id } = useParams();\r\n  const { userData, setUserData } = useContext(data);\r\n  const [mangaDetails, setMangaDetails] = useState(null);\r\n  const [isMangaAdded, setIsMangaAdded] = useState(null);\r\n  const [charactersDetails, setCharactersDetails] = useState([]);\r\n  const [relationsDetails, setRelationsDetails] = useState([]);\r\n  const [isMangaEditorOpen, setIsMangaEditorOpen] = useState(false);\r\n  const [userProgress, setUserProgress] = useState({\r\n    status: 'Planning',\r\n    currentChapter: 0,\r\n    currentVolume: 0,\r\n  });\r\n\r\n  const [activeTab, setActiveTab] = useState('about');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMangaDetails = async () => {\r\n      try {\r\n        // Fetch manga details\r\n        const mangaResponse = await axiosInstance.get(\r\n          `/mangas/manga/${id}`\r\n        );\r\n        setMangaDetails(mangaResponse.data);\r\n\r\n        if (userData?._id) {\r\n          const userResponse = await axiosInstance.get(\r\n            `/users/${userData._id}/current`\r\n          );\r\n          const currentUser = userResponse.data;\r\n\r\n          setUserData(currentUser);\r\n\r\n          const mangaAdded = currentUser?.mangas?.some(\r\n            (manga) => manga.mangaId === id\r\n          );\r\n          setIsMangaAdded(mangaAdded);\r\n\r\n          const existingMangaIndex = currentUser?.mangas?.findIndex(\r\n            (manga) => manga.mangaId.toString() === id.toString()\r\n          );\r\n\r\n          setMangaDetails(mangaResponse.data);\r\n\r\n          if (currentUser && existingMangaIndex !== -1) {\r\n            setUserProgress({\r\n              status:\r\n                currentUser.mangas[existingMangaIndex].status,\r\n              currentChapter:\r\n                currentUser.mangas[existingMangaIndex].currentChapter,\r\n              currentVolume:\r\n                currentUser.mangas[existingMangaIndex].currentVolume,\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching manga details:', error);\r\n      }\r\n    };\r\n\r\n    fetchMangaDetails();\r\n  }, [id, userData, setUserData]);\r\n\r\n  const fetchCharacterDetails = async () => {\r\n    setLoading(true);\r\n    setCharactersDetails([]); // Clear previous characters\r\n\r\n    try {\r\n      await Promise.all(\r\n        (mangaDetails?.characters || []).map(async (character) => {\r\n          try {\r\n            const response = await axiosInstance.get(\r\n              `/characters/character/${character.characterId}`,\r\n            );\r\n\r\n            // Immediately update state with the new character\r\n            setCharactersDetails(prev => {\r\n              // Check if character already exists to prevent duplicates\r\n              const existingCharacter = prev.find(\r\n                c => c.characterDetails._id === response.data._id\r\n              );\r\n\r\n              if (!existingCharacter) {\r\n                const newCharacter = {\r\n                  ...character,\r\n                  characterDetails: response.data,\r\n                };\r\n\r\n                // Sort the characters as they are added\r\n                const updatedCharacters = [...prev, newCharacter]\r\n                  .sort((a, b) => {\r\n                    const rolePriority = ['Main', 'Supporting', 'Background'];\r\n                    const priorityA = rolePriority.indexOf(a.role);\r\n                    const priorityB = rolePriority.indexOf(b.role);\r\n\r\n                    if (priorityA === priorityB) {\r\n                      // Sort by anilistId as secondary criteria\r\n                      return (a.characterDetails.anilistId || 0) - (b.characterDetails.anilistId || 0);\r\n                    }\r\n\r\n                    return priorityA - priorityB;\r\n                  });\r\n\r\n                return updatedCharacters;\r\n              }\r\n\r\n              return prev;\r\n            });\r\n\r\n            return {\r\n              ...character,\r\n              characterDetails: response.data,\r\n            };\r\n          } catch (error) {\r\n            console.error(\r\n              `Error fetching details for character ${character.characterId}:`,\r\n              error.message\r\n            );\r\n            return null;\r\n          }\r\n        }) || []\r\n      );\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching characters:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRelationDetails = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const relationsWithDetails = await Promise.all([\r\n        ...(mangaDetails?.mangaRelations.map(async (relation) => {\r\n          try {\r\n            const response = await axiosInstance.get(\r\n              `/mangas/manga/${relation.relationId}`,\r\n            );\r\n            return {\r\n              ...relation,\r\n              relationDetails: response.data,\r\n              contentType: 'manga',\r\n            };\r\n          } catch (error) {\r\n            if (error.name === 'CanceledError') return null; // Silently handle canceled requests\r\n            console.error(\r\n              `Error fetching manga relation ${relation.relationId}:`,\r\n              error.message\r\n            );\r\n            return null;\r\n          }\r\n        }) || []),\r\n        ...(mangaDetails?.animeRelations.map(async (relation) => {\r\n          try {\r\n            const response = await axiosInstance.get(\r\n              `/animes/anime/${relation.relationId}`,\r\n            );\r\n            return {\r\n              ...relation,\r\n              relationDetails: response.data,\r\n              contentType: 'anime',\r\n            };\r\n          } catch (error) {\r\n            if (error.name === 'CanceledError') return null; // Silently handle canceled requests\r\n            console.error(\r\n              `Error fetching anime relation ${relation.relationId}:`,\r\n              error.message\r\n            );\r\n            return null;\r\n          }\r\n        }) || []),\r\n      ]);\r\n\r\n      setRelationsDetails(relationsWithDetails);\r\n    } catch (error) {\r\n      console.error('Error fetching relations:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTabChange = (tab) => {\r\n    setActiveTab(tab);\r\n    if (tab === 'characters') {\r\n      fetchCharacterDetails(); // Fetch characters only when the tab is 'characters'\r\n    }\r\n    if (tab === 'relations') {\r\n      fetchRelationDetails();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData?._id && mangaDetails?._id) {\r\n      const isAdded = userData.mangas?.some(\r\n        (manga) => manga.mangaId === mangaDetails._id\r\n      );\r\n      setIsMangaAdded(isAdded);\r\n    }\r\n  }, [userData, mangaDetails]);\r\n\r\n  if (!mangaDetails) {\r\n    return <SkeletonDetails/>;\r\n  }\r\n\r\n  const onMangaDelete = (mangaId) => {\r\n    // Implement logic to update the user's anime list after deletion\r\n    setUserData((prevUserData) => {\r\n      const updatedUser = { ...prevUserData };\r\n      const updatedMangas = updatedUser.mangas.filter(\r\n        (manga) => manga.mangaId !== mangaId\r\n      );\r\n      updatedUser.mangas = updatedMangas;\r\n      return updatedUser;\r\n    });\r\n  };\r\n\r\n  const handleModalClose = () => {\r\n    setIsMangaEditorOpen(false);\r\n  };\r\n\r\n  const openEditor = () => {\r\n    setIsMangaEditorOpen(true);\r\n  };\r\n\r\n  const getFullName = (names) => {\r\n    switch (userData.characterName) {\r\n      case 'romaji':\r\n        return `${names.givenName} ${names.surName}`;\r\n      case 'romaji-western':\r\n        return `${names.surName} ${names.givenName}`;\r\n      case 'native':\r\n        return `${names.nativeName || ''}`;\r\n      default:\r\n        return `${names.givenName} ${names.surName}`;\r\n    }\r\n  };\r\n\r\n  const seriesTitle = (titles) => {\r\n    switch (userData.title) {\r\n      case 'english':\r\n        return titles.english || titles.romaji\r\n      case 'romaji':\r\n        return titles.romaji || titles.english\r\n      case 'native':\r\n        return titles.native\r\n      default:\r\n        return titles.english || titles.romaji || titles.native || 'Unknown Title';\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateObj) => {\r\n    if (!dateObj) return 'TBA';\r\n    const { year, month, day } = dateObj;\r\n    if (!year && !month && !day) return 'TBA';\r\n\r\n    const monthName = month ? MONTHS[month - 1] : '';\r\n    const formattedDay = day ? day : '';\r\n\r\n    if (!monthName && !formattedDay) return year || 'TBA';\r\n    if (!formattedDay) return `${monthName} ${year || 'TBA'}`;\r\n\r\n    return `${monthName} ${formattedDay}, ${year || 'TBA'}`;\r\n  };\r\n\r\n  const determineSeason = (startDate) => {\r\n    if (!startDate || !startDate.month)\r\n      return { season: 'TBA', year: startDate?.year || 'TBA' };\r\n\r\n    const month = startDate.month;\r\n    let season;\r\n\r\n    if (month >= 3 && month <= 5) season = 'Spring';\r\n    else if (month >= 6 && month <= 8) season = 'Summer';\r\n    else if (month >= 9 && month <= 11) season = 'Fall';\r\n    else season = 'Winter';\r\n\r\n    return {\r\n      season,\r\n      year: startDate.year || 'TBA',\r\n    };\r\n  };\r\n\r\n  const { season, year } = determineSeason(mangaDetails.releaseData.startDate);\r\n\r\n  const parseDescription = (description) => {\r\n    if (!description) return [];\r\n\r\n    // First handle <b> tags by preserving them\r\n    const preserveBoldTags = description.replace(/<b>/g, '###BOLDSTART###')\r\n                                      .replace(/<\\/b>/g, '###BOLDEND###');\r\n\r\n    // Handle <i> tags by preserving them\r\n    const preserveItalicTags = preserveBoldTags.replace(/<i>/g, '###ITALICSTART###')\r\n                                              .replace(/<\\/i>/g, '###ITALICEND###')\r\n\r\n    // Split by <br> tags\r\n    const paragraphs = preserveItalicTags.split(/<br>/);\r\n\r\n    return paragraphs.map(paragraph => {\r\n      // Remove closing br tags and trim whitespace\r\n      const cleanParagraph = paragraph.replace(/<\\/br>/g, '').trim();\r\n\r\n      // Restore <b> tags\r\n      return cleanParagraph.replace(/###BOLDSTART###/g, '<b>')\r\n                          .replace(/###BOLDEND###/g, '</b>')\r\n                          .replace(/###ITALICSTART###/g, '<i>')\r\n                          .replace(/###ITALICEND###/g, '</i>');\r\n    }).filter(p => p);\r\n  };\r\n\r\n  const handleRelationClick = (contentType, relationId) => {\r\n    // Force a full navigation to the new page\r\n    window.location.href = `/${contentType}/${relationId}`;\r\n  };\r\n\r\n  return (\r\n    <div className={mangaDetailsStyles.mangaDetailsPage}>\r\n      <div className={mangaDetailsStyles.mangaHeader}>\r\n        <div className={mangaDetailsStyles.bannerSection}>\r\n          <img\r\n            src={mangaDetails?.images?.border || mangaDetails?.images?.image || ''}\r\n            alt={mangaDetails?.titles?.english || 'Manga'}\r\n            className={mangaDetailsStyles.bannerImage}\r\n          />\r\n          <div className={mangaDetailsStyles.bannerOverlay} />\r\n        </div>\r\n\r\n        <div className={mangaDetailsStyles.contentWrapper}>\r\n          <div className={mangaDetailsStyles.posterContainer}>\r\n            <img\r\n              src={mangaDetails.images.image}\r\n              alt={mangaDetails.titles.english}\r\n            />\r\n            <div className={mangaDetailsStyles.actionButtons}>\r\n              {userData && (userData.role === 'admin' || userData.role === 'user') && (\r\n                <>\r\n                  {isMangaAdded ? (\r\n                      <button onClick={openEditor} className={mangaDetailsStyles.editButton}>\r\n                        Edit Progress\r\n                      </button>\r\n                  ) : (\r\n                    <button onClick={openEditor} className={mangaDetailsStyles.addButton}>\r\n                      Add to List\r\n                    </button>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n            {userData.role === 'admin' && (\r\n              <Link\r\n                to={`/manga/${mangaDetails._id}/update`}\r\n                className={mangaDetailsStyles.editMangaLink}\r\n              >\r\n                <button className={mangaDetailsStyles.editMangaButton}>\r\n                  Edit Manga\r\n                </button>\r\n              </Link>\r\n            )}\r\n          </div>\r\n\r\n          <div className={mangaDetailsStyles.mangaInfo}>\r\n            <h1 className={mangaDetailsStyles.mangaTitle}>\r\n              {seriesTitle(mangaDetails.titles)}\r\n            </h1>\r\n\r\n            <div className={mangaDetailsStyles.quickInfo}>\r\n              <div className={mangaDetailsStyles.quickInfoItem}>\r\n                <span>Status:</span> {mangaDetails?.releaseData?.releaseStatus || 'TBA'}\r\n              </div>\r\n              <div className={mangaDetailsStyles.quickInfoItem}>\r\n                <span>Format:</span> {mangaDetails?.typings?.Format || 'TBA'}\r\n              </div>\r\n              <div className={mangaDetailsStyles.quickInfoItem}>\r\n                <span>Chapters:</span> {mangaDetails?.lengths?.chapters || 'TBA'}\r\n              </div>\r\n              <div className={mangaDetailsStyles.quickInfoItem}>\r\n                <span>Volumes:</span> {mangaDetails?.lengths?.volumes || 'TBA'}\r\n              </div>\r\n              <div className={mangaDetailsStyles.quickInfoItem}>\r\n                <span>Season:</span> {season} {year}\r\n              </div>\r\n              <div className={mangaDetailsStyles.quickInfoItem}>\r\n                <span>Start Date:</span>{' '}\r\n                {formatDate(mangaDetails?.releaseData?.startDate)}\r\n              </div>\r\n              <div className={mangaDetailsStyles.quickInfoItem}>\r\n                <span>End Date:</span>{' '}\r\n                {formatDate(mangaDetails?.releaseData?.endDate)}\r\n              </div>\r\n            </div>\r\n\r\n            <div className={mangaDetailsStyles.mangaTabs}>\r\n              <button\r\n                className={`${mangaDetailsStyles.tabButton} ${activeTab === 'about' ? mangaDetailsStyles.active : ''}`}\r\n                onClick={() => setActiveTab('about')}\r\n              >\r\n                About\r\n              </button>\r\n              <button\r\n                className={`${mangaDetailsStyles.tabButton} ${activeTab === 'characters' ? mangaDetailsStyles.active : ''}`}\r\n                onClick={() => handleTabChange('characters')}\r\n              >\r\n                Characters\r\n              </button>\r\n              <button\r\n                className={`${mangaDetailsStyles.tabButton} ${activeTab === 'relations' ? mangaDetailsStyles.active : ''}`}\r\n                onClick={() => handleTabChange('relations')}\r\n              >\r\n                Relations\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={mangaDetailsStyles.mangaContent}>\r\n        {activeTab === 'about' && (\r\n          <div className={mangaDetailsStyles.aboutContainer}>\r\n            <div className={mangaDetailsStyles.metadataGrid}>\r\n              {/* Metadata items */}\r\n            </div>\r\n            <div className={mangaDetailsStyles.descriptionSection}>\r\n              {parseDescription(mangaDetails.description).map((paragraph, index) => {\r\n                return (\r\n                  <p key={index} className={mangaDetailsStyles.paragraph} dangerouslySetInnerHTML={{ __html: paragraph }} />\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'characters' && (\r\n          <div className={mangaDetailsStyles.charactersContainer}>\r\n            <div className={mangaDetailsStyles.charactersGrid}>\r\n              {loading ? (\r\n                <Loader />\r\n              ) : (\r\n                charactersDetails.map((character) => (\r\n                  <Link\r\n                    to={`/characters/${character.characterDetails._id}`}\r\n                    key={character.characterDetails._id}\r\n                    className={mangaDetailsStyles.characterCard}\r\n                  >\r\n                    <div className={mangaDetailsStyles.card2}>\r\n                      <div className={mangaDetailsStyles.characterImageContainer}>\r\n                        <img\r\n                          src={character.characterDetails.characterImage}\r\n                          alt={character.characterDetails.names.givenName}\r\n                        />\r\n                        <div className={mangaDetailsStyles.characterRole}>\r\n                          {character.role}\r\n                        </div>\r\n                      </div>\r\n                      <div className={mangaDetailsStyles.characterInfo}>\r\n                        <h4>{getFullName(character.characterDetails.names)}</h4>\r\n                      </div>\r\n                    </div>\r\n                  </Link>\r\n                ))\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'relations' && (\r\n          <div className={mangaDetailsStyles.relationsContainer}>\r\n            <div className={mangaDetailsStyles.relationsGrid}>\r\n              {loading ? (\r\n                <Loader />\r\n              ) : (\r\n                relationsDetails.map((relation) => (\r\n                  <div\r\n                    key={relation.relationDetails._id}\r\n                    onClick={() => handleRelationClick(relation.contentType, relation.relationDetails._id)}\r\n                    className={mangaDetailsStyles.relationCard}\r\n                    style={{ cursor: 'pointer' }}\r\n                  >\r\n                    <div className={mangaDetailsStyles.card2}>\r\n                      <div className={mangaDetailsStyles.relationImageContainer}>\r\n                        <img\r\n                          src={relation.relationDetails.images.image}\r\n                          alt={relation.relationDetails.titles.english}\r\n                        />\r\n                        <div className={mangaDetailsStyles.relationType}>\r\n                          {relation.typeofRelation}\r\n                        </div>\r\n                      </div>\r\n                      <div className={mangaDetailsStyles.relationInfo}>\r\n                        <h4>{seriesTitle(relation.relationDetails.titles)}</h4>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {isMangaEditorOpen && userProgress && (\r\n        <div className={modalStyles.modalOverlay} onClick={handleModalClose}>\r\n          <div\r\n            className={modalStyles.characterModal}\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <MangaEditor\r\n              manga={mangaDetails}\r\n              userId={userData._id}\r\n              closeModal={handleModalClose}\r\n              onMangaDelete={onMangaDelete}\r\n              setUserData={setUserData}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MangaDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}